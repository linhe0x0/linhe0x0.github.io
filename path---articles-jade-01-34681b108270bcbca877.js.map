{"version":3,"sources":["webpack:///path---articles-jade-01-34681b108270bcbca877.js","webpack:///./.cache/json/articles-jade-01.json"],"names":["webpackJsonp","397","module","exports","data","markdownRemark","html","frontmatter","title","date","category","tags","cover","site","siteMetadata","url","thumbnail","defaultAuthor","donation","status","channel","alipay","wechat","share","pathContext","slug","excerpt","prev","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,8jGAAkmFC,aAAkgBC,MAAA,sBAAAC,KAAA,aAAAC,SAAA,KAAAC,MAAA,QAAAC,MAAA,OAAgGC,MAASC,cAAgBC,IAAA,6BAAAC,UAAA,GAAAC,cAAA,MAAAC,UAAoFC,QAAA,EAAAC,SAAyBC,OAAA,mDAAAC,OAAA,mEAAuIC,OAAA,KAAgBC,aAAgBC,KAAA,YAAAjB,MAAA,sBAAAkB,QAAA,4GAAAC,MAA+KC,QAAUH,KAAA,iBAAuBlB,aAAgBC,MAAA,oCAAAE,SAAA,KAAAC,KAAA,KAAAC,MAAA,KAAAH,KAAA,cAAyGiB,QAAA,8EAAwFG,MAASD,QAAUH,KAAA,aAAmBlB,aAAgBC,MAAA,2BAAAE,SAAA,KAAAC,MAAA,QAAAC,MAAA,KAAAH,KAAA,cAAoGiB,QAAA","file":"path---articles-jade-01-34681b108270bcbca877.js","sourcesContent":["webpackJsonp([261146748432161],{\n\n/***/ 397:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>随着 web 发展，前端应用变得越来越复杂，基于后端的 <code>javascript(Node.js)</code> 也开始崭露头角，此时 <code>javascript</code> 被寄予了更大的期望，与此同时 <code>javascript MVC</code> 思想也开始流行起来。为了使用户界面与业务数据（内容）分离，就产生了『模板引擎』这个概念。</p>\\n<p>说的简单点，模板引擎就是一个字符串中有几个变量待定，通过模板引擎函数把数据动态的塞进去。</p>\\n<p>今天我们就来聊一聊 <code>Jade</code> 的使用方法和语法说明。<code>Jade</code>官网：<a href=\\\"http://jade-lang.com/\\\">jade-lang.com/</a></p>\\n<!--more-->\\n<h2>Jade 的使用和命令行工具构建方法</h2>\\n<p>Jade 的使用需要依赖 <code>Node</code>环境，通过 <code>npm</code> 包进行安装 <code>Jade</code> 命令行工具，安装成功之后就可以新建一个文件，文件后缀名为 <code>*.jade</code>。我们就可以尽情的使用 <code>jade</code> 的语法咯，写完之后只需要通过命令行工具进行编译即可编译为我们平时使用的 <code>html</code> 静态文件。</p>\\n<h3>安装方法</h3>\\n<p>1.首先确定是否安装有 <code>Node</code> 环境和 <code>npm</code> 工具，查看方法如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>// 在命令行工具中执行如下代码：\\nnode -v\\n=> v0.10.35\\nnpm -v\\n=> 1.4.28\\n// 如果成功返回版本号信息即为安装成功。</code></pre>\\n      </div>\\n<p>2.通过 <code>npm</code> 全局安装 <code>Jade</code> 命令行工具</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>npm install jade -g\\n\\n// mac用户可能需要管理员权限，使用如下命令\\nsudo npm install jade -g</code></pre>\\n      </div>\\n<p>3.创建 <code>*.Jade</code> 文件，开始任务。</p>\\n<p>4.通过使用 <code>Jade</code> 命令行工具将 <code>jade</code> 文件编译为 <code>html</code> 文件</p>\\n<h3>Jade 命令行工具使用方法</h3>\\n<p>我们可以通过 <code>jade --help</code> 查看 <code>Jade</code> 命令行工具的使用参数</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>jade --help\\n\\nUsage: jade [options] [dir|file ...]\\n\\n  Options:\\n\\n    -h, --help         output usage information / 输出使用信息\\n    -V, --version      output the version number / 输出版本号信息\\n    -O, --obj <str>    javascript options object / 传输到 jade 文件中的数据对象\\n    -o, --out <dir>    output the compiled html to <dir> / 输出编译后的 HTML 到 <dir>\\n    -p, --path <path>  filename used to resolve includes / 在处理 stdio 时，查找包含文件时的查找路径\\n    -P, --pretty       compile pretty html output / 格式化编译 html 文件\\n    -c, --client       compile function for client-side runtime.js / 编译浏览器端可用的 runtime.js\\n    -n, --name <str>   The name of the compiled template (requires --client) / 编译模板的名字\\n    -D, --no-debug     compile without debugging (smaller functions) / 关闭编译的调试选项(函数会更小)\\n    -w, --watch        watch files for changes and automatically re-render / 监听文件改变并自动刷新编译结果\\n    --name-after-file  Name the template after the last section of the file path (requires --client and overriden by --name)\\n    --doctype <str>    Specify the doctype on the command line (useful if it is not specified by the template) / 在命令行中指定文档类型(如果在模板中没有被指定)\\n\\n  Examples:\\n\\n    # 编译整个目录\\n    $ jade templates\\n\\n    # 生成 {foo,bar}.html\\n    $ jade {foo,bar}.jade\\n\\n    # 在标准IO下使用jade\\n    $ jade < my.jade > my.html\\n\\n    # 在标准IO下使用jade\\n    $ echo 'h1 Jade!' | jade\\n\\n    # foo, bar 目录渲染到 /tmp\\n    $ jade foo bar --out /tmp</code></pre>\\n      </div>\\n<p>实例：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>// 比如说我们需要编译index.jade文件，默认编译到同文件夹下的同名html 文件中\\njade index.jade\\n\\n// 如果我们要格式化输出 index.html 文件，只需要添加 -P 参数即可\\njade -P index.jade\\n\\n// 如果我们要实现监听和自动编译，需要使用 -w 参数\\njade -P -w index.jade</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"前端开发模板引擎 -- Jade之开篇\",\"date\":\"2015-08-20\",\"category\":\"技术\",\"tags\":[\"jade\"],\"cover\":null}},\"site\":{\"siteMetadata\":{\"url\":\"http://blog.sqrtthree.com/\",\"thumbnail\":\"\",\"defaultAuthor\":\"根号三\",\"donation\":{\"status\":true,\"channel\":{\"alipay\":\"http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG\",\"wechat\":\"http://7xl8me.com1.z0.glb.clouddn.com/wechat_receive_money.JPG\"}},\"share\":true}}},\"pathContext\":{\"slug\":\"/jade-01/\",\"title\":\"前端开发模板引擎 -- Jade之开篇\",\"excerpt\":\"随着 web 发展，前端应用变得越来越复杂，基于后端的  javascript(Node.js)  也开始崭露头角，此时  javascript  被寄予了更大的期望，与此同时  javascript MVC…\",\"prev\":{\"fields\":{\"slug\":\"/utf8-to-b64/\"},\"frontmatter\":{\"title\":\"解决 Javascript 中 atob 方法解码中文字符乱码问题\",\"category\":\"技术\",\"tags\":null,\"cover\":null,\"date\":\"2015-08-29\"},\"excerpt\":\"今天在写一个通过 GitHub API 获取 README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-…\"},\"next\":{\"fields\":{\"slug\":\"/jade-02/\"},\"frontmatter\":{\"title\":\"前端开发模板引擎 -- Jade之标签的基本写法\",\"category\":\"技术\",\"tags\":[\"jade\"],\"cover\":null,\"date\":\"2015-08-20\"},\"excerpt\":\"1、文档声明 我们在开始写一个  html  页面的时候，首先要写上  DOCTYPE  文档声明的，现在通常情况下我们都是采用  HTML5  的文档声明方式，那么在  jade  里面我们应该怎么写呢？ 在  jade  里面编写文档声明有…\"}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-jade-01-34681b108270bcbca877.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>随着 web 发展，前端应用变得越来越复杂，基于后端的 <code>javascript(Node.js)</code> 也开始崭露头角，此时 <code>javascript</code> 被寄予了更大的期望，与此同时 <code>javascript MVC</code> 思想也开始流行起来。为了使用户界面与业务数据（内容）分离，就产生了『模板引擎』这个概念。</p>\\n<p>说的简单点，模板引擎就是一个字符串中有几个变量待定，通过模板引擎函数把数据动态的塞进去。</p>\\n<p>今天我们就来聊一聊 <code>Jade</code> 的使用方法和语法说明。<code>Jade</code>官网：<a href=\\\"http://jade-lang.com/\\\">jade-lang.com/</a></p>\\n<!--more-->\\n<h2>Jade 的使用和命令行工具构建方法</h2>\\n<p>Jade 的使用需要依赖 <code>Node</code>环境，通过 <code>npm</code> 包进行安装 <code>Jade</code> 命令行工具，安装成功之后就可以新建一个文件，文件后缀名为 <code>*.jade</code>。我们就可以尽情的使用 <code>jade</code> 的语法咯，写完之后只需要通过命令行工具进行编译即可编译为我们平时使用的 <code>html</code> 静态文件。</p>\\n<h3>安装方法</h3>\\n<p>1.首先确定是否安装有 <code>Node</code> 环境和 <code>npm</code> 工具，查看方法如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>// 在命令行工具中执行如下代码：\\nnode -v\\n=> v0.10.35\\nnpm -v\\n=> 1.4.28\\n// 如果成功返回版本号信息即为安装成功。</code></pre>\\n      </div>\\n<p>2.通过 <code>npm</code> 全局安装 <code>Jade</code> 命令行工具</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>npm install jade -g\\n\\n// mac用户可能需要管理员权限，使用如下命令\\nsudo npm install jade -g</code></pre>\\n      </div>\\n<p>3.创建 <code>*.Jade</code> 文件，开始任务。</p>\\n<p>4.通过使用 <code>Jade</code> 命令行工具将 <code>jade</code> 文件编译为 <code>html</code> 文件</p>\\n<h3>Jade 命令行工具使用方法</h3>\\n<p>我们可以通过 <code>jade --help</code> 查看 <code>Jade</code> 命令行工具的使用参数</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>jade --help\\n\\nUsage: jade [options] [dir|file ...]\\n\\n  Options:\\n\\n    -h, --help         output usage information / 输出使用信息\\n    -V, --version      output the version number / 输出版本号信息\\n    -O, --obj <str>    javascript options object / 传输到 jade 文件中的数据对象\\n    -o, --out <dir>    output the compiled html to <dir> / 输出编译后的 HTML 到 <dir>\\n    -p, --path <path>  filename used to resolve includes / 在处理 stdio 时，查找包含文件时的查找路径\\n    -P, --pretty       compile pretty html output / 格式化编译 html 文件\\n    -c, --client       compile function for client-side runtime.js / 编译浏览器端可用的 runtime.js\\n    -n, --name <str>   The name of the compiled template (requires --client) / 编译模板的名字\\n    -D, --no-debug     compile without debugging (smaller functions) / 关闭编译的调试选项(函数会更小)\\n    -w, --watch        watch files for changes and automatically re-render / 监听文件改变并自动刷新编译结果\\n    --name-after-file  Name the template after the last section of the file path (requires --client and overriden by --name)\\n    --doctype <str>    Specify the doctype on the command line (useful if it is not specified by the template) / 在命令行中指定文档类型(如果在模板中没有被指定)\\n\\n  Examples:\\n\\n    # 编译整个目录\\n    $ jade templates\\n\\n    # 生成 {foo,bar}.html\\n    $ jade {foo,bar}.jade\\n\\n    # 在标准IO下使用jade\\n    $ jade < my.jade > my.html\\n\\n    # 在标准IO下使用jade\\n    $ echo 'h1 Jade!' | jade\\n\\n    # foo, bar 目录渲染到 /tmp\\n    $ jade foo bar --out /tmp</code></pre>\\n      </div>\\n<p>实例：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>// 比如说我们需要编译index.jade文件，默认编译到同文件夹下的同名html 文件中\\njade index.jade\\n\\n// 如果我们要格式化输出 index.html 文件，只需要添加 -P 参数即可\\njade -P index.jade\\n\\n// 如果我们要实现监听和自动编译，需要使用 -w 参数\\njade -P -w index.jade</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"前端开发模板引擎 -- Jade之开篇\",\"date\":\"2015-08-20\",\"category\":\"技术\",\"tags\":[\"jade\"],\"cover\":null}},\"site\":{\"siteMetadata\":{\"url\":\"http://blog.sqrtthree.com/\",\"thumbnail\":\"\",\"defaultAuthor\":\"根号三\",\"donation\":{\"status\":true,\"channel\":{\"alipay\":\"http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG\",\"wechat\":\"http://7xl8me.com1.z0.glb.clouddn.com/wechat_receive_money.JPG\"}},\"share\":true}}},\"pathContext\":{\"slug\":\"/jade-01/\",\"title\":\"前端开发模板引擎 -- Jade之开篇\",\"excerpt\":\"随着 web 发展，前端应用变得越来越复杂，基于后端的  javascript(Node.js)  也开始崭露头角，此时  javascript  被寄予了更大的期望，与此同时  javascript MVC…\",\"prev\":{\"fields\":{\"slug\":\"/utf8-to-b64/\"},\"frontmatter\":{\"title\":\"解决 Javascript 中 atob 方法解码中文字符乱码问题\",\"category\":\"技术\",\"tags\":null,\"cover\":null,\"date\":\"2015-08-29\"},\"excerpt\":\"今天在写一个通过 GitHub API 获取 README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-…\"},\"next\":{\"fields\":{\"slug\":\"/jade-02/\"},\"frontmatter\":{\"title\":\"前端开发模板引擎 -- Jade之标签的基本写法\",\"category\":\"技术\",\"tags\":[\"jade\"],\"cover\":null,\"date\":\"2015-08-20\"},\"excerpt\":\"1、文档声明 我们在开始写一个  html  页面的时候，首先要写上  DOCTYPE  文档声明的，现在通常情况下我们都是采用  HTML5  的文档声明方式，那么在  jade  里面我们应该怎么写呢？ 在  jade  里面编写文档声明有…\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-jade-01.json\n// module id = 397\n// module chunks = 261146748432161"],"sourceRoot":""}