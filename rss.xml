<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>根号三</title>
  <subtitle>O ever youthful, O ever weeping.</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://blog.sqrtthree.com/"/>
  <updated>2017-03-15T15:51:09.000Z</updated>
  <id>http://blog.sqrtthree.com/</id>
  
  <author>
    <name>sqrtthree</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>作为一个开源软件的作者是一种什么样的感受？</title>
    <link href="http://blog.sqrtthree.com/2017/03/15/what-it-feels-like-to-be-an-open-source-maintainer/"/>
    <id>http://blog.sqrtthree.com/2017/03/15/what-it-feels-like-to-be-an-open-source-maintainer/</id>
    <published>2017-03-15T15:51:09.000Z</published>
    <updated>2017-03-15T15:51:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://nolanlawson.com/2017/03/05/what-it-feels-like-to-be-an-open-source-maintainer/" target="_blank" rel="external">What it feels like to be an open-source maintainer</a></li>
<li>原文作者：<a href="https://twitter.com/nolanlawson" target="_blank" rel="external">Nolan Lawson</a></li>
<li>译文出自：<a href="https://github.com/sqrthree/sqrthree.github.io/issues/13" target="_blank" rel="external">[译] 作为一个开源软件的作者是一种什么样的感受？</a></li>
<li>译者：<a href="http://github.com/sqrthree" target="_blank" rel="external">根号三</a></li>
</ul>
</blockquote>
<p>你的门外有几百人在排队。他们耐心地等待着你回答他们的问题、抱怨、pull requests 和 功能请求。</p>
<p>你想帮助他们，但是现在你要关闭它们。或许你已经辛苦工作了一整天，或者你累了，或者你只是想和你的家人、朋友享受一个周末。</p>
<p>但是如果你访问 <a href="https://github.com/notifications" target="_blank" rel="external">github.com/notifications</a>，它会持续地提醒你有多少人正在等着你：</p>
<a id="more"></a>
<p><img src="https://nolanwlawson.files.wordpress.com/2017/03/out.png?w=570" alt="screenshot showing 403 unread GitHub notifications"></p>
<p>当你设法找到一些空闲时间后，你打开门并接待了第一个人。他们非常善意。他们尝试使用你的项目，但是在 API 上遇到了一些困惑。他们将自己的代码粘贴到了 GitHub 评论区中，但是他们忘记或不知道怎样格式化它，所以他们的代码非常混乱，难以阅读。</p>
<p>你热心地将他们的代码放到一个代码块中，因此它们有一个很友好的格式。但是你仍然需要阅读很多代码。</p>
<p>并且他们对于问题的描述也很难理解。或许这个人不以英文为母语，或者他们有残疾使得他们很难通过写作进行沟通。你不确定。总之，你很难理解他们发布的这一段话。</p>
<p>你很疲劳。你看了看排在他后面的数百个其他人。你<strong>可以</strong>花费半个小时来理解这个人的代码，或者你可以选择跳过他，只是给他一些教程和文档的链接，这些有助于帮助解决他们的问题。你也可以善意的建议他们尝试 Stack Overflow 或 Slack channel instead。</p>
<p>队伍里的下一个人脸上皱起了眉头。他们抱怨你的项目浪费了他们两个小时，因为某个明确的 API 并没有像宣传的那样如期工作。他们刻薄的言辞让你感觉很不舒服。</p>
<p>你不想在这个人上浪费太多的时间。你简单地回复了：“这是一个开源项目，并由志愿者志愿维护”。如果代码中有一些 bug，请提交一个可复现的测试代码或者一个 PR。</p>
<p>接下来的一个人遇到了一个非常普遍的错误，但是有一个很容易的解决方案。你知道你之前见过这个错误，但是就是想不起来解决方法写在了哪里了。Stack Overflow? wiki? 邮件？Google 了几分钟以后，你粘贴了一个链接并关闭了这个问题。</p>
<p>下一个人是一个长期贡献者。你从各种社区论坛和兄弟项目中认出他们的名字。他们遇到了一个非常深奥的问题，并且提出了一个 pull request 来解决它。不幸地是，这个问题太复杂了，以至于他们的 PR 包含了好几段文字来解释它。</p>
<p>你的眼睛再一次瞥了外面仍然在排队的几百人。你知道这个人在他们的解决方案上做了大量的工作。并且这可能是一个合理的方案。Travis 的测试已经通过了。所以你想回复一个 “LGTM” (译者注：Looks Good To Me.) 然后合并它。</p>
<p>然而，在之前你曾吃过这样的亏。你曾经合并过一个 PR 但是并没有完整的评估它。最后它让你很头痛因为你没有预料到它带来的问题。或许通过了测试，但是性能下降了十分之一。或者造成了内存泄漏。又或者因为导致了这个项目的 API 过于复杂以至于对新用户来说容易困惑。</p>
<p>如果你现在合并了这个 PR，明天你可能会遇到更多的问题，因为你通过解决了这个人的（非常边缘的）问题打破了别人的工作流。因此你决定先将它滞后，稍后当你有更多时间时你会再处理它。</p>
<p>下一个人发现了一个新 bug，但是你知道它实际上是一个兄弟项目中的 bug。他们说这个问题阻止他们运行应用。你知道这是一个大问题，但是只是许多问题中的一个。你现在没有时间来马上修复它。</p>
<p>你回复到看起来这真的是一个问题，但是在另一个 repo 里报告这个问题更合适。因此你关闭了这个问题，并把它复制到另一个 repo 里面。然后添加一个评论建议应该从代码中的哪个地方开始修复它。虽然你怀疑他们是否会这样做。（很少啦）。</p>
<p>接下来的一个人只是说了一句“这是什么状态？”。你不确定他们到底在讨论什么，因此你查看上下文。他们关于一个项目中的长期 bug 的评论导致 GitHub 评论板很冗长。许多人不同意这个问题原本的解决方案，所以它产生了很多讨论。</p>
<p>在这个问题上有 20 多条评论，你需要花费很长的时间才能阅读并理解所有的内容。所以你只是回复了一句：“对不起，这个问题已经打开了有一段时间了，但是到现在还没有人解决它。我们仍在试着理解问题的范围。一个 pull request 或许是一个好的开始。”</p>
<p>下一个人仅仅是一个 GreenKeeper bot。这个处理起来很轻松。除了这个特定的仓库有着相当脆弱的测试，并且因为一个看起来并不真实的原因而测试失败了，因此你为了能够通过测试必须重新启动它。你重启了测试并尝试提醒自己在稍后 Travis 能运行它时检查一下。</p>
<p>接下来的那个人打开了一个 pull request，但是是在一个相当活跃的仓库上，因此另一个维护者已经提出了反馈。你瞥了一眼大致过程，你相信这个维护者能够处理这个问题。因此你将它标记为已读并继续下一步。</p>
<p>下一个人在运行时出现了一个你之前从未见过的大问题。但不幸的是他们没有提供一丁点关于问题实际发生时的细节。用了什么浏览器？Node 的哪一个版本？项目的哪一个版本？使用哪些代码能重现它？你要求他们重新提供一些细节并关闭了这个页面。</p>
<h3 id="The-constant-stream"><a href="#The-constant-stream" class="headerlink" title="The constant stream"></a>The constant stream</h3><p>过了一段时间后，你已经处理了一二十个这样的情况。但是仍然还有几百个人在等待着。但是现在你已经感到精疲力尽了。每一个人都有他自己的抱怨、问题、或者是新需求。</p>
<p>从某种意义上来说，这些 GitHub 通知就是一个关于你的项目的的不间断消极流。没有人会因为对你的所作所为感到满意时打开一个 issue 或者是 pull request。他们只会在发现缺少一些东西时才这样做。尽管你只花费很少的时间来阅读他们的这些通知，但是仍然能让你在精神上和情绪上感到疲惫不堪。</p>
<p>你的伴侣观察到你在做完这些事情之后总是脾气很坏。或许你发现自己在毫无原因的嘲笑她，仅仅是因为你的心情很糟糕。“如果从事开源工作会让你如此生气，为什么你还要做呢？”她问道。你也没有一个很好的答案。</p>
<p>你可以休息一下。事实上你可以已经尝试过了。之前有一次，你远离 GitHub 给自己放了一两周的假期，仅仅是为了自己的心理健康。但是你知道你结束这种情况的原因是因为有数以百计的人们在耐心地等着你。</p>
<p>如果你保持关注并处理你的 GitHub 通知。或许每天只有 20-30 消息，更容易处理一点。然而你让它们在那里堆积，所以现在堆积了上百个。你感到内疚。</p>
<p>之前，由于某种原因，你真的让这些问题堆积在那了。你或许已经看到有一个问题已经几个月没有回复了。通常，当你回过头处理这样的问题时，打开这个问题的人一直没有给你回复。或者他们回复到：“我放弃了你的项目用了另外一个，所以问题已经解决啦。”这让你感觉很糟糕。但是你理解他们的失望。</p>
<p>从以往的经验中你学到了：对于这种陈旧的问题，更实际的回复是仅仅说一句：“我关闭这个旧问题啦，如果这个问题还存在或者你能提供更多细节的话请再重新打开。”通常情况下都没人回复。有时有人回复了一下，然而只是很生气的抱怨你让他们等待了这么长时间。</p>
<p>现在你尝试更频繁的关注你的通知。数百人的等待队伍实在是太长了。你渴望这个队伍的人数能够降到一百，或十几，甚至有一个 <a href="https://twitter.com/eranhammer/status/616137191131996160" target="_blank" rel="external">空收件箱</a> 的神话。所以你继续。</p>
<h3 id="招募一个新的贡献者"><a href="#招募一个新的贡献者" class="headerlink" title="招募一个新的贡献者"></a>招募一个新的贡献者</h3><p>像上面这样处理了很多问题之后，即使你最终清空了收件箱，仍然会以积压了大量的 bug 和 pull request 而收尾。标签可以对你有所帮助 —— 例如，你可以将一个问题标记为“需要再现”、“存在测试用例”或者 “good first patch”。“good first patch” 尤其有帮助，因为他们常常吸引新的贡献者。</p>
<p>然而，你已经注意到了，通常吸引新贡献者的那些问题都是非常容易的问题 —— 对那些问题而言努力记录并且解释如何修复它比你只是自己修复它还重要。你创建了一些这样的问题，因为你知道让新人参与到开源项目中是值得的，当 pull request 的作者告诉你“这是我第一次向开源项目做出贡献”时，你会感到很开心。</p>
<p>但你知道他们不太可能会回来。通常这些人不会成为长期贡献者或维护者。你想知道你是否做错了，是否有更多你力所能及的可以引领新贡献者并且帮助减轻你的负担的事情。</p>
<p>在你的项目中就有一个几乎是自我维持的。你已经好几年没有碰过它了，但是有一个维护小组在答复每一个问题和 PR，因此你不用关注它。你极其感激这些维护者。但是你并不知道是因为做了什么事情才有如此多的维护者参与这个项目中，而其他的项目则以你独自负责而收尾。</p>
<h3 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h3><p>你不愿意创建新项目了，因为你知道它只会增加你的维护负担。事实上，有一个对立的现象是：你越成功，你从 GitHub 通知那里得到的“惩罚”就越多。</p>
<p>你仍然可以回忆起创作的激情，从头开始写一个新项目解决之前未解决的问题时的那种喜悦。但是现在你不喜欢这种喜悦，因为任何新项目都会从旧项目中窃取时间。你想知道是否到了正式放弃你的一些旧项目或者 <a href="http://unmaintained.tech/" target="_blank" rel="external">标记它们为不再维护</a> 的时候了。</p>
<p>你想知道在你崩溃之前你还能坚持多久。你之前考虑将开源作为你的日常工作。但是和一些真正将开源作为生活的人聊过之后，你知道这通常意味着可以将一个具体的开源项目作为你的日常工作。但是对你来说并没有什么帮助，因为你有横跨多个领域的 <a href="https://www.npmjs.com/~nolanlawson" target="_blank" rel="external">几十个项目</a>，这些都在争夺你的时间。</p>
<p>你最想要的是有更多的项目可以自我维护。你尝试按照所有的 <a href="https://medium.freecodecamp.com/how-to-attract-new-contributors-to-your-open-source-project-46f8b791d787" target="_blank" rel="external">最佳实践</a>：你有一个 <code>CONTRIBUTING.md</code> 和一个行为准则，你热情地向所有提交高质量的 PR 的人发出所有者权限。为每一个项目都做这些事情是非常辛苦的，所以，你并没有对自己想象中的那样勤奋。</p>
<p>自从你知道开源经常被视为一个为享有特权的白人（就像你一样）开设的高档俱乐部后，你也因为这个而感到内疚。所以你因为没有付出足够的努力来修复这些问题而焦虑。</p>
<p>无论如何，你感到内疚：你知道你可以帮助某人解决他们的问题但是反而让他们的问题腐烂了几个月然后关闭它而内疚，或者因为知道某个人在你的仓库发起了他们的第一个 pull request 但是你并没有时间去回复它而内疚，并且你可能还因此致使他们对开源长期感到气馁。你因自己的所作所为而感到内疚，因没能做到的事情感到内疚，并且不想招募更多的人来分担你不幸的内疚经历。</p>
<h3 id="Putting-it-all-together"><a href="#Putting-it-all-together" class="headerlink" title="Putting it all together"></a>Putting it all together</h3><p>我上面所说的都是基于我自己的经验。我不能声称代表了所有从事开源软件事业的人，但是这确实是我的感受。</p>
<p>我已经从事开源很长一段时间了（大概 7 年吧），我一直很讨厌抱怨这些事情，因为我担心这会被理解为应当更明白事理的人的夸张的牢骚。毕竟，这种情况不是我自己导致的么？只要我愿意我可以随时离开 GitHub，我对任何人都没有义务。</p>
<p>还有，我不应该感激么？我在开源方面的工帮助我在社区获得了名声。我被邀请在一些会议上演讲。我在推特有成千上万的粉丝在听我说的话并且高度尊重我的意见。可以说我之所以得到了微软的工作就是因为我在开源方面的经历。我该抱怨谁？</p>
<p>并且，我知道已经有很多跟我类似的人放弃了。那些人在无影无踪地消失之前曾积极地合并 pull request、修复问题，在博客上写一些关于他们项目的文章。对于其中一些人，我甚至都不会在他们的 repo 上打开 issue，因为我知道他们不会回复。我不会抱怨这些事情，但是我担心我也会走他们的老路。</p>
<p>我已经采取了很多自我保护措施。我不再使用 GitHub 的通知界面了，我使用邮件进行过滤。因此我可以基于项目（不维护的会被忽略掉）或通知类型（提到我的和我评论过的通常优先级更高）分类我的通知。由于通知是邮件，这也有助于我离线工作并且在一个地方处理所有的事情。</p>
<p>我经常会收到蓝色级别的邮件让我支持一个我已经停止维护的项目（例如，我每月至少收到一封关于<a href="https://github.com/nolanlawson/catlog" target="_blank" rel="external">这一个项目</a>，通常情况下我不会回复他们。我也倾向于忽略我博客文章里面的评论、Stack Overflow 答案的回复和邮件里的问题。我基本上也不再关注那些我觉得别的维护者已经做得很好的 repo。</p>
<p>这种情况如此令人沮丧的原因之一是，我越来越觉得处理问题远比实际维护一个项目要花费时间。换句话说，我经常只有时间阅读一个问题然后说：“对不起，我现在没时间看这个。”仅仅是这样的回复就已经占用了我原本为开源预留的大部分时间。</p>
<p><a href="https://github.com/blog/2111-issue-and-pull-request-templates" target="_blank" rel="external">Issue templates</a>, <a href="https://greenkeeper.io/" target="_blank" rel="external">GreenKeeper</a>, <a href="https://travis-ci.org/" target="_blank" rel="external">Travis</a>, <a href="https://docs.travis-ci.com/user/common-build-problems/#travis_retry" target="_blank" rel="external">travis_retry</a>, <a href="http://coveralls.io/" target="_blank" rel="external">Coveralls</a>, <a href="http://saucelabs.com/" target="_blank" rel="external">Sauce Labs</a>… 针对开源维护的问题，有这么多的技术解决方案。我非常感激它们。如果没有这么多自动化工具，我将不能保持专注。但在某些时候，相比技术问题，你遇到的更多的是社交问题。一个人成不了规模。我甚至不在 <a href="https://gist.github.com/bcoe/dcc961b869bbf6685002" target="_blank" rel="external">前 100 个 npm 贡献者</a> 之列，就已经感觉到了压力。简直不敢想象那一百个人的感觉是什么样的。</p>
<p>我已经告诉我的伴侣，当我们决定开始拥有一个孩子时，可能我还是退出开源比较好。我不知道我怎样才能在撑起一个家庭和从事开源之间平衡时间。我预计最终这个将解决我的问题：核选择。我只是希望它能以一个积极的形式到来，像是开启了我的生活新篇章一样，而不是一个消极的形式。</p>
<h3 id="结尾词"><a href="#结尾词" class="headerlink" title="结尾词"></a>结尾词</h3><p>如果你已经阅读到这里，并且对开源社区的问题和潜在的解决方案感兴趣，或许你会想看看 <a href="https://twitter.com/nayafia" target="_blank" rel="external">Nadia Eghbal</a> 写的 <a href="http://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure" target="_blank" rel="external">“Roads and Bridges”</a>，这可能是对问题最清晰和最彻底的分析。</p>
<p>我也乐于接受建议，但是请记住，我非常不愿意在我的开源项目中将钱和劳动成果混在一起（由于傻傻的理想主义的原因）。但是我曾在 <a href="https://vuejs.org/support-vuejs/" target="_blank" rel="external">其他项目</a> 中看到它处理的很好。</p>
<p>注意，尽管上边这些都是消极的，但是我仍然感觉开源已经成为了对我的生活很有价值的补充。但我希望这是一个有用的窗口，它可以感受到如何成为你自己的成功的受害者，并且没有完成就放下工作而感到压力。</p>
<p>如果说我在开源中学到了一件事，那就是：你做的工作越多，你就越需要工作。我知道这个问题无解。</p>
<blockquote>
<p>本文根据 <a href="https://twitter.com/nolanlawson" target="_blank" rel="external">Nolan Lawson</a> 的《<a href="https://nolanlawson.com/2017/03/05/what-it-feels-like-to-be-an-open-source-maintainer/" target="_blank" rel="external">What it feels like to be an open-source maintainer</a>》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="https://nolanlawson.com/2017/03/05/what-it-feels-like-to-be-an-open-source-maintainer/" target="_blank" rel="external">nolanlawson.com/2017/03/05/what-it-feels-like-to-be-an-open-source-maintainer</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文地址：&lt;a href=&quot;https://nolanlawson.com/2017/03/05/what-it-feels-like-to-be-an-open-source-maintainer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What it feels like to be an open-source maintainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者：&lt;a href=&quot;https://twitter.com/nolanlawson&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nolan Lawson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自：&lt;a href=&quot;https://github.com/sqrthree/sqrthree.github.io/issues/13&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译] 作为一个开源软件的作者是一种什么样的感受？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者：&lt;a href=&quot;http://github.com/sqrthree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;根号三&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;你的门外有几百人在排队。他们耐心地等待着你回答他们的问题、抱怨、pull requests 和 功能请求。&lt;/p&gt;
&lt;p&gt;你想帮助他们，但是现在你要关闭它们。或许你已经辛苦工作了一整天，或者你累了，或者你只是想和你的家人、朋友享受一个周末。&lt;/p&gt;
&lt;p&gt;但是如果你访问 &lt;a href=&quot;https://github.com/notifications&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/notifications&lt;/a&gt;，它会持续地提醒你有多少人正在等着你：&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>是时候来用 Slush 构建你自己的脚手架了</title>
    <link href="http://blog.sqrtthree.com/2017/03/01/it-is-time-to-build-your-own-scaffolding-with-slush/"/>
    <id>http://blog.sqrtthree.com/2017/03/01/it-is-time-to-build-your-own-scaffolding-with-slush/</id>
    <published>2017-03-01T11:16:57.000Z</published>
    <updated>2017-03-01T11:16:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Slush-是什么？"><a href="#Slush-是什么？" class="headerlink" title="Slush 是什么？"></a>Slush 是什么？</h2><p>简单的来说，Slush 就是一个脚手架生成工具。什么？脚手架？这是什么鬼？嗯，脚手架嘛，自然是这个样子咯~</p>
<a id="more"></a>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fd3vev11wnj30go0b3431.jpg" alt=""></p>
<p>什么？你问的是编程中的脚手架呀？啊，这么说吧。身为一个前端开发者，每次新建一个项目的时候是不是要创建好多个文件夹、配置文件？写个文档是不是要创建好多个目录？然而每个项目的结构和配置文件都大同小异，是不是早已繁琐感觉人生无望，失去了活着的意义？</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fd3vw3uqtfj30bo08rwem.jpg" alt=""></p>
<p>就在这个时候，Slush 横空出世，能够让你轻松搞定这些繁琐的事情，重新找回人生的意义，你就说吼不吼啊。从此麻麻再也不用担心我整天都在忙着创建文件夹啦。</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fd3wiy66q4g306o0360vr.gif" alt=""></p>
<h2 id="道理我都懂，可我大-Yeoman-用的好好的，为什么要换新？"><a href="#道理我都懂，可我大-Yeoman-用的好好的，为什么要换新？" class="headerlink" title="道理我都懂，可我大 Yeoman 用的好好的，为什么要换新？"></a>道理我都懂，可我大 Yeoman 用的好好的，为什么要换新？</h2><p>嗯。Yeoman 确实也是一个很好用的脚手架工具，历史悠久。然而它以 Grunt 为基础工具，上手难度大大提高。在轮子层出不穷的前端领域早已是风前残烛。而 Slush 则是基于 Gulp 的 『流式』思想作为基础工具，当你在做定制化脚手架时，Gulp 简单易用的特点则能让你轻轻松松搞定。</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fd3wvq1wemj3060046q36.jpg" alt=""></p>
<p>噢，这么屌？那该怎么用呢？</p>
<h1 id="说了这么多，我到底该怎么用？"><a href="#说了这么多，我到底该怎么用？" class="headerlink" title="说了这么多，我到底该怎么用？"></a>说了这么多，我到底该怎么用？</h1><p>好啦，废话不多说啦，我们赶紧来趁着这个热乎劲看看怎么使用吧。</p>
<h3 id="1-安装-slush"><a href="#1-安装-slush" class="headerlink" title="1. 安装 slush"></a>1. 安装 slush</h3><p>首先，你得有 NodeJS 环境，什么？连 NodeJS 都没装？赶紧回家洗洗睡吧。如果你已经有了呢，你就可以通过 npm 直接将 slush 安装到全局环境下啦：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g slush</div></pre></td></tr></table></figure>
<p> 安装完了之后，你可以执行下面这行命令来确保安装成功：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">slush -v</span></div></pre></td></tr></table></figure>
<p>如果你能看到输出了一个版本号，就说明已经安装成功啦。下面我们就来看一下如何使用吧。</p>
<h3 id="2-安装第三方脚手架"><a href="#2-安装第三方脚手架" class="headerlink" title="2. 安装第三方脚手架"></a>2. 安装第三方脚手架</h3><p>在使用 slush 创建项目之前，你得先安装一些别人开发好的脚手架。安装好脚手架之后才能根据脚手架生成约定好的项目结构哟。</p>
<p>咦？不知道有什么脚手架？快来 <a href="http://slushjs.github.io/generators" target="_blank" rel="external">大厅</a> 里找找吧。</p>
<p>很好，你已经找到了自己喜欢的脚手架了，我们快来安装它吧。打住，提醒你一下，脚手架要安装到全局环境下才有效哟。</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g slush-react-starter-kit</div></pre></td></tr></table></figure>
<h3 id="3-开始生成项目吧"><a href="#3-开始生成项目吧" class="headerlink" title="3. 开始生成项目吧"></a>3. 开始生成项目吧</h3><p>现在我们已经安装好需要的一切了，终于可以开始创建项目啦。</p>
<p>首先，创建一个项目文件夹并进入文件夹中：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir <span class="keyword">my</span>-<span class="keyword">first</span>-slush-project</div><div class="line">cd <span class="keyword">my</span>-<span class="keyword">first</span>-slush-project</div></pre></td></tr></table></figure>
<p>其次，执行 slush 生成命令：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">slush react-starter-kit</span></div></pre></td></tr></table></figure>
<p><code>react-starter-kit</code>是什么鬼？我们安装的明明是 <code>slush-react-starter-kit</code> 呀。没错，在生成项目的时候，slush 后面跟的脚手架名字中是不带 <code>slush</code> 关键词的。就是这么任性。</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fd3xirh0ebg30jg0axhdt.gif" alt=""></p>
<h2 id="没找到好使的，宝宝想要自定义怎么办？"><a href="#没找到好使的，宝宝想要自定义怎么办？" class="headerlink" title="没找到好使的，宝宝想要自定义怎么办？"></a>没找到好使的，宝宝想要自定义怎么办？</h2><p>当然了，可能你翻遍了整个大厅都没找到自己想要的，迫切想要自己定制一个脚手架怎么办呢？且听我慢慢道来。</p>
<p>其实很简单啦，Slush 脚手架就是一个普通的 npm package，唯一需要注意的有这么几点：</p>
<ol>
<li>名字要以 <code>slush-*</code> 的方式</li>
<li>package 中包含一个 <code>slushfile.js</code> 文件</li>
<li>package.json 文件中加上 slushgenerator 关键词方便别人检索</li>
<li>模板文件放在 <code>templates</code> 文件夹中</li>
<li>别忘了安装 gulp 作为本地依赖啦</li>
</ol>
<p>假设你已经按照上面这些约定做好了准备工作，那么接下来我们就可以搞一件大新闻啦。</p>
<h4 id="第一步：创建模板文件"><a href="#第一步：创建模板文件" class="headerlink" title="第一步：创建模板文件"></a>第一步：创建模板文件</h4><p>首先，你要将模板文件（就是运行脚手架之后生成的项目文件）全部放到 <code>templates</code> 文件夹中</p>
<h4 id="第二步：在-slushfile-js-文件中编写任务流。"><a href="#第二步：在-slushfile-js-文件中编写任务流。" class="headerlink" title="第二步：在 slushfile.js 文件中编写任务流。"></a>第二步：在 slushfile.js 文件中编写任务流。</h4><p>前面已经说到 Slush 是基于 Gulp 作为基础工具的，所以你只需要按照 Gulp 的使用方法在 <code>slushfile.js</code> 编写任务流就可以啦。</p>
<p>咦，好像有点不太对，既然是用 Gulp，那么 <code>gulpfile.js</code>  文件呢？</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fd3y3nwzfgj304o03smxd.jpg" alt=""></p>
<p>这里确实是不需要 <code>gulpfile.js</code>  文件啦，因为 Gulp 任务都在 <code>slushfile.js</code> 文件中写啦，Slush 会帮你自动驱动 Gulp 的啦。</p>
<p>好了，那么 <code>slushfile.js</code> 文件中的到底该怎么写呢？放着我来，小哥亲自给你示范一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    install = <span class="built_in">require</span>(<span class="string">'gulp-install'</span>),</div><div class="line">    conflict = <span class="built_in">require</span>(<span class="string">'gulp-conflict'</span>),</div><div class="line">    template = <span class="built_in">require</span>(<span class="string">'gulp-template'</span>),</div><div class="line">    inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">  inquirer.prompt([</div><div class="line">    &#123;</div><div class="line">    	type: <span class="string">'input'</span>,</div><div class="line">    	name: <span class="string">'name'</span>, </div><div class="line">    	message: <span class="string">'Give your app a name'</span>, </div><div class="line">    	<span class="keyword">default</span>: gulp.args.join(<span class="string">' '</span>) <span class="comment">// 从运行参数中获取值作为 name 的默认值。</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">    	type: <span class="string">'confirm'</span>,</div><div class="line">    	name: <span class="string">'moveon'</span>,</div><div class="line">        message: <span class="string">'Continue?'</span></div><div class="line">    &#125;</div><div class="line">  ]).then(<span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!answers.moveon) &#123;</div><div class="line">      <span class="keyword">return</span> done();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    gulp.src(__dirname + <span class="string">'/templates/**'</span>)      <span class="comment">// 使用脚本所在的目录作为相对路径。</span></div><div class="line">      .pipe(template(answers))                 <span class="comment">// Lodash 模板支持，可以方便的在模板中进行插值。</span></div><div class="line">      .pipe(conflict(<span class="string">'./'</span>))                    <span class="comment">// 当文件冲突时，询问是否覆盖。</span></div><div class="line">      .pipe(gulp.dest(<span class="string">'./'</span>))                   <span class="comment">// 输出到执行命令的当前文件夹中。</span></div><div class="line">      .pipe(install())                         <span class="comment">// 使用 `bower install` 或 `npm install` 执行安装操作。</span></div><div class="line">      .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        done();                                <span class="comment">// 告知完成。</span></div><div class="line">      &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>PS: 去哪里发现诸如 <code>[inquirer](https://github.com/SBoudrias/Inquirer.js)</code> 这么好用的 package 呢？你可以关注下 <a href="https://github.com/sqrthree/awesome-npm-packages" target="_blank" rel="external">github.com/sqrthree/awesome-npm-packages</a> 哟。</p>
<p>现在就已经搞定啦，接下来怎么使用呢？因为 Slush 调用的是全局环境下的脚手架，但是目前我们的脚手架并不在全局环境中，然而你还没发布这个脚手架，不能直接工作 <code>npm install -g</code> 进行全局安装，所以显然是不！能！用！啦！哈！哈！哈！</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fd3ynyznx6g3050050wgk.gif" alt=""></p>
<p>别着急砸电脑嘛，我们还有一个办法捏。那就是通过 <code>npm link</code> 命令将当前脚手架挂载到全局环境中啦。你只需要在当前文件夹中执行 <code>npm link</code>，搞定，收工（前提是 <code>package.json</code> 已经写好）。然后就可以随便找个文件夹安装我们上面说的方法使用脚手架啦。</p>
<h2 id="生成-Slush-脚手架的脚手架"><a href="#生成-Slush-脚手架的脚手架" class="headerlink" title="生成 Slush 脚手架的脚手架"></a>生成 Slush 脚手架的脚手架</h2><p>尽管自定义一个脚手架已经非常方便了，但是细心的你会发现几乎每个脚手架之间 <code>slushfile.js</code> 也都大同小异，只是 <code>templates</code> 文件夹中的模板文件不一样，所以呢，你懂得😉。</p>
<p><a href="https://github.com/chrisenytc/slush-generator" target="_blank" rel="external">slush-generator</a> 就是这么一个让我们来生成 Slush 脚手架的脚手架。有了它，创建自定义脚手架的时候异常方便。</p>
<h4 id="第一步：安装-slush-generator"><a href="#第一步：安装-slush-generator" class="headerlink" title="第一步：安装 slush-generator"></a>第一步：安装 slush-generator</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g slush-generator</div></pre></td></tr></table></figure>
<h4 id="第二步：创建并进入自定义脚手架的文件夹"><a href="#第二步：创建并进入自定义脚手架的文件夹" class="headerlink" title="第二步：创建并进入自定义脚手架的文件夹"></a>第二步：创建并进入自定义脚手架的文件夹</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mkdir</span> <span class="keyword">my</span>-slush-generator</div><div class="line">cd <span class="keyword">my</span>-slush-generator</div></pre></td></tr></table></figure>
<h4 id="第三步：运行任务："><a href="#第三步：运行任务：" class="headerlink" title="第三步：运行任务："></a>第三步：运行任务：</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">slush generator</span></div></pre></td></tr></table></figure>
<p>之后会让你回答一些问题，在回答过之后，你的自定义脚手架目录就已经生成好啦。接下来只需要在 <code>templates</code> 文件夹中放置你需要的文件就好了。</p>
<h2 id="查看已经安装好的脚手架"><a href="#查看已经安装好的脚手架" class="headerlink" title="查看已经安装好的脚手架"></a>查看已经安装好的脚手架</h2><p>直接输入 <code>slush</code> 即可看到已经安装过的脚手架：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  <span class="selector-tag">slush</span></div><div class="line"><span class="selector-attr">[slush]</span> <span class="selector-tag">Installed</span> <span class="selector-tag">generators</span></div><div class="line"><span class="selector-attr">[slush]</span> ├── <span class="selector-tag">generator</span> (0<span class="selector-class">.2</span><span class="selector-class">.11</span>)</div><div class="line"><span class="selector-attr">[slush]</span> └── <span class="selector-tag">koa2</span> (0<span class="selector-class">.1</span><span class="selector-class">.0</span>)</div></pre></td></tr></table></figure>
<p>怎么样？是不是已经迫不及待的想要尝试了？</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fd3z94buhfj30g40g4t9g.jpg" alt=""></p>
<p>喔，对了，少侠留步，差点忘了告诉你一件事情：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fd3za793nqj30rs0rsabk.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Slush-是什么？&quot;&gt;&lt;a href=&quot;#Slush-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Slush 是什么？&quot;&gt;&lt;/a&gt;Slush 是什么？&lt;/h2&gt;&lt;p&gt;简单的来说，Slush 就是一个脚手架生成工具。什么？脚手架？这是什么鬼？嗯，脚手架嘛，自然是这个样子咯~&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具" scheme="http://blog.sqrtthree.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="gulp" scheme="http://blog.sqrtthree.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>一个关于 Styled Components 的五分钟介绍</title>
    <link href="http://blog.sqrtthree.com/2017/02/10/a-5-minute-intro-to-styled-components/"/>
    <id>http://blog.sqrtthree.com/2017/02/10/a-5-minute-intro-to-styled-components/</id>
    <published>2017-02-10T00:23:06.000Z</published>
    <updated>2017-02-10T00:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://medium.freecodecamp.com/a-5-minute-intro-to-styled-components-41f40eb7cd55#.z1nrxe1zr" target="_blank" rel="external">A 5-minute Intro to Styled Components</a></li>
<li>原文作者：<a href="https://medium.freecodecamp.com/@sachagreif" target="_blank" rel="external">Sacha Greif</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者：<a href="https://github.com/sqrthree" target="_blank" rel="external">根号三</a></li>
<li>校对者：<a href="https://github.com/Tina92" target="_blank" rel="external">Tina92</a>、<a href="https://github.com/lovelyCiTY" target="_blank" rel="external">lovelyCiTY</a></li>
</ul>
</blockquote>
<p>CSS 是一个很神奇的语言，你可以在 15 分钟之内就学会一些基础部分，但是如果你要找到一个好的方式来组织你的样式，将会花费数年时间。</p>
<p>这主要是由于语言本身很奇葩。不合常规的是， CSS 是相当有限的，没有变量、循环或者函数。与此同时，它又是相当自由的，你可以随意使用元素、Class、ID 或它们的任意组合。</p>
<a id="more"></a>
<h3 id="混乱的样式表"><a href="#混乱的样式表" class="headerlink" title="混乱的样式表"></a>混乱的样式表</h3><p>正如你自己所经历过的那样，CSS 通常是很混乱的。虽然有诸如 SASS 和 LESS 这样的预处理器添加了大量有用的特性，但是它们仍然不能阻止 CSS 的这种混乱状态。</p>
<p>组织工作留给了像 <a href="http://getbem.com/" target="_blank" rel="external">BEM</a> 这样的方法，这些方法虽然很有用但是完全是自选方案，不能在语言或工具级别强制实施。</p>
<h3 id="CSS-的新浪潮"><a href="#CSS-的新浪潮" class="headerlink" title="CSS 的新浪潮"></a>CSS 的新浪潮</h3><p>最近一两年，新一波基于 JavaScript 的工具正试图通过改变编写 CSS 的方式来从根本上解决这些问题。</p>
<p><a href="https://github.com/styled-components/styled-components" target="_blank" rel="external">Styled Components</a> 就是那些工具库之一，因为兼顾创新和传统的优势，它很快就吸引了大量的关注。因此，如果你是 React 使用者（如果你不是的话，可以看看 <a href="https://medium.freecodecamp.com/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1" target="_blank" rel="external">我的 JavaScript 学习计划</a> 和我写的 <a href="https://medium.freecodecamp.com/the-5-things-you-need-to-know-to-understand-react-a1dbd5d114a3" target="_blank" rel="external">React 简介</a>），就绝对值得看看这个新的 CSS 替代者。</p>
<p>最近我用它 <a href="http://sachagreif.com/" target="_blank" rel="external">重新设计了我的个人网站</a>，今天我想分享下我在这个过程中所学到的一些东西。</p>
<h3 id="组件-样式化"><a href="#组件-样式化" class="headerlink" title="组件, 样式化"></a>组件, 样式化</h3><p>关于 Styled Components 你需要理解的最主要的事情就是其名称应该采取字面意思。你不再根据他们的 Class 或者 HTML 元素来对 HTML 元素或组件进行样式化了。</p>
<pre><code>&lt;h1 className=&quot;title&quot;&gt;Hello World&lt;/h1&gt;

h1.title {
  font-size: 1.5em;
  color: purple;
}
</code></pre><p>相反，你可以定义一个拥有它们自己的封装风格的 styled Components。然后你就可以在你的代码中自由的使用它们了。</p>
<pre><code>import styled from &apos;styled-components&apos;;

const Title = styled.h1`
  font-size: 1.5em;
  color: purple;
`;

&lt;Title&gt;Hello World&lt;/Title&gt;
</code></pre><p>这两段代码看起来有一些细微的差别，事实上两者语法是非常相似的。但是它们的关键区别在于样式现在是这些组件的一部分啦。</p>
<p>换句话说，我们正在摆脱 CSS class 作为组件和其样式的中间步骤这种情况。</p>
<p>styled-components 的联合创造者 Max Stoiber 说：</p>
<blockquote>
<p>styled-components 的基本思想就是通过移除样式和组件之间的映射关系来达到最佳实践。</p>
</blockquote>
<h3 id="减少复杂性"><a href="#减少复杂性" class="headerlink" title="减少复杂性"></a>减少复杂性</h3><p>这首先是反直觉的，因为使用 CSS 而不是直接定义 HTML 元素的关键点（还记得 <code>&lt;font&gt;</code> 标签吗？）是引入 class 这个中间层来解耦样式和标签。</p>
<p>但是这层解耦也创造了很多复杂性。有这样一个的观点：相比于 CSS，诸如 Javascript 这类『真正』的编程语言具备了更好的处理这种复杂性的能力。</p>
<h3 id="类（Class）上的-Props"><a href="#类（Class）上的-Props" class="headerlink" title="类（Class）上的 Props"></a>类（Class）上的 Props</h3><p>为了遵循 『无类(no-class)』的理念，当涉及到自定义一个组件的行为时，styled-components 使用了类上的 props（props over classes）。所以呢，代码不是这样的：</p>
<pre><code>&lt;h1 className=&quot;title primary&quot;&gt;Hello World&lt;/h1&gt; // will be blue

h1.title{
  font-size: 1.5em;
  color: purple;

  &amp;.primary{
    color: blue;
  }
}
</code></pre><p>你需要这样写：</p>
<pre><code>const Title = styled.h1`
  font-size: 1.5em;
  color: ${props =&gt; props.primary ? &apos;blue&apos; : &apos;purple&apos;};
`;

&lt;Title primary&gt;Hello World&lt;/Title&gt; // will be blue
</code></pre><p>正如你所看到的那样，styled-components 通过将所有的 CSS 和 HTML 之间的相关实现细节（从组件中）分离出来使你的 React 组件更干净。</p>
<p>也就是说，styled-components 的 CSS 仍然还是 CSS。所以像下面这样的代码也是完全有效的（尽管略微不常用）。</p>
<pre><code>const Title = styled.h1`
  font-size: 1.5em;
  color: purple;

  &amp;.primary{
    color: blue;
  }
`;

&lt;Title className=&quot;primary&quot;&gt;Hello World&lt;/Title&gt; // will be blue
</code></pre><p>这是让 styled-components 很容易就被接受的一个特性：当存在疑惑时，你总是可以倒退回你所熟悉的领域。</p>
<h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><p>需要提到的很重要的一点是 styled-components 仍然是一个很年轻的项目。有一些特性到目前为止还没有完全支持。例如，如果你想 <a href="https://github.com/styled-components/styled-components/issues/142" target="_blank" rel="external">从父组件中样式化一个子组件</a> 时，目前你仍不得不依靠 CSS class 来实现（至少要持续到 styled-components 版本 2 发布）。</p>
<p>目前也有一个非官方的方法来实现 <a href="https://github.com/styled-components/styled-components/issues/124" target="_blank" rel="external">服务端预渲染你的 CSS</a>，虽然它是通过手动注入样式来实现的。</p>
<p>事实上，styled-components 生成它自己的随机 class 名会使你很难通过浏览器的开发工具来确定你的样式最初是在哪里定义的。</p>
<p>但是鼓舞人心的是，styled-components 核心团队已经意识到了这些问题，并且努力地一个又一个的攻克它们。<a href="(https://github.com/styled-components/styled-components/tree/v2">版本 2 很快就要来啦</a>)，我真的很期待它呢。</p>
<h3 id="了解更多一点吧"><a href="#了解更多一点吧" class="headerlink" title="了解更多一点吧"></a>了解更多一点吧</h3><p>我这篇文章的目的不是向你详细解释 styled-components 是如何生效的，更多的是给你一个小瞥。所以你可以自己决定是否值得一试。</p>
<p>如果我的文章让你感到好奇的话，这里有一些链接你可以了解更多关于 styled-components 的知识。</p>
<ul>
<li>Max Stoiber 最近给 <a href="https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/" target="_blank" rel="external">Smashing Magazine</a> 写了一篇文章有关创建 styled-components 的原因的文章。</li>
<li><a href="https://github.com/styled-components/styled-components" target="_blank" rel="external">styled-components repo</a> 它自己就有一个很丰富的文档.</li>
<li><a href="https://medium.com/@jamiedixon/styled-components-production-patterns-c22e24b1d896#.tfxr5bws2" target="_blank" rel="external">Jamie Dixon 写的这篇文章</a> 讲述了切换到 styled-components 的几个好处.</li>
<li>如果你想了解更多关于这个库实际上是如何实现的，可以阅读 Max 的 <a href="http://mxstbr.blog/2016/11/styled-components-magic-explained/" target="_blank" rel="external">这篇文章</a>。</li>
</ul>
<p>如果你想更进一步，也可以了解下 <a href="https://github.com/threepointone/glamor" target="_blank" rel="external">Glamor</a> —— 一个完全不同的 CSS 新浪潮。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文地址：&lt;a href=&quot;https://medium.freecodecamp.com/a-5-minute-intro-to-styled-components-41f40eb7cd55#.z1nrxe1zr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A 5-minute Intro to Styled Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者：&lt;a href=&quot;https://medium.freecodecamp.com/@sachagreif&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sacha Greif&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自：&lt;a href=&quot;https://github.com/xitu/gold-miner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者：&lt;a href=&quot;https://github.com/sqrthree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;根号三&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;校对者：&lt;a href=&quot;https://github.com/Tina92&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tina92&lt;/a&gt;、&lt;a href=&quot;https://github.com/lovelyCiTY&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lovelyCiTY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;CSS 是一个很神奇的语言，你可以在 15 分钟之内就学会一些基础部分，但是如果你要找到一个好的方式来组织你的样式，将会花费数年时间。&lt;/p&gt;
&lt;p&gt;这主要是由于语言本身很奇葩。不合常规的是， CSS 是相当有限的，没有变量、循环或者函数。与此同时，它又是相当自由的，你可以随意使用元素、Class、ID 或它们的任意组合。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="http://blog.sqrtthree.com/tags/CSS/"/>
    
      <category term="React" scheme="http://blog.sqrtthree.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>通过 CSS 实现六边形效果</title>
    <link href="http://blog.sqrtthree.com/2016/06/27/The-hexagon-by-CSS/"/>
    <id>http://blog.sqrtthree.com/2016/06/27/The-hexagon-by-CSS/</id>
    <published>2016-06-27T23:54:51.000Z</published>
    <updated>2016-06-27T23:54:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>故事说起那是在一个冰冷幽暗的晚上，外面下着淅淅沥沥的小雨，我正在思考一个十分重要的人生问题：这个周末哪里去？是宅在家里写程序好呢，还是宅在家里写博客好呢？还是好呢？这时，桌面右下角很少抖动的 QQ 头像竟然动了起来，我多年的直觉告诉我，一定是有人要约我，尽管这件事情从来没有发生过。我去，了不得，竟然是万年隐身的女神主动联系我，女神一定是因为看了朋友圈的照片对我的身材陷入了深深的迷恋，说不定还要包养我呢，啊，想想都觉得好激动啊~</p>
<blockquote>
<p>“哎，在干嘛呢？” (你看，果然要约我)</p>
<p>“没事啊，在思考人生呢”</p>
<p>“那个，我在写一个网站，需要用 CSS 实现一个六边形效果，你能帮我写个 Demo 么？”</p>
</blockquote>
<p>额。。。那个，好吧，跟想象中的有点不太一样，咦，万一这是女神对我的考验呢，说不定通过了之后就，哇卡卡~</p>
<p>用 CSS 实现一个六边形还不简单？</p>
<p>如下图，这就是我们要实现的六边形。</p>
<p><img src="http://7xl8me.com1.z0.glb.clouddn.com/hexagon_1.png?imageView2/1/w/256/h/256/q/100%7Cwatermark/2/text/QHNxcnR0aHJlZQ==/font/5b6u6L2v6ZuF6buR/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="六边形"></p>
<p>咋一看，这货怎么能用 CSS 来实现嘛？看官别着急，我给你画两条线你就能猜到了，请看下图：</p>
<p><img src="http://7xl8me.com1.z0.glb.clouddn.com/hexagon_2.png?imageView2/1/w/256/h/256/q/100%7Cwatermark/2/text/QHNxcnR0aHJlZQ==/font/5b6u6L2v6ZuF6buR/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="六边形"></p>
<p>咦，还没看出来？那您老再看下面这张图：</p>
<p><img src="http://7xl8me.com1.z0.glb.clouddn.com/hexagon_3.png?imageView2/1/w/256/h/256/q/100%7Cwatermark/2/text/QHNxcnR0aHJlZQ==/font/5b6u6L2v6ZuF6buR/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="六边形"></p>
<p>这下能够看出来了吧，没错，思路很简单，就是利用两个三角形和一个长方形然后拼接到一块，就能做出这么一个正六边形啦~</p>
<p>嗯？三角形怎么做？介个，等我什么时候有空了再给你娓娓道来吧（不过我想我是没空了，因为等我做完女神就要约我了~）</p>
<p>好了，废话不多说，直接上代码~ <a href="http://codepen.io/sqrtthree/pen/jrBEbj" target="_blank" rel="external">点击查看</a></p>
<p>然后痛痛快快的给女神发了过去，</p>
<blockquote>
<p>“咦，效果虽然是这个效果，但是为什么鼠标移入的触发区域不太对呢？能不能把鼠标移入的触发区域也仅限制为六边形？”</p>
</blockquote>
<p>嗯，这确实是这种方法的一个弊端，因为 CSS 中是没法直接做一个三角形的，所以我们利用了 <code>border</code> 的特点模拟了一个出来，但是元素本质上还是一个矩形。</p>
<p>那么问题来了，怎样实现一个完美的六边形效果呢？</p>
<p>哈哈，这个问题怎么能难得住我嘛，不多一会，我就做出了一个完美的六边形出来给女神发过去了，这次主要是利用了 <code>overflow: hidden</code> 和 CSS3 中的 <code>transform</code> 相关属性实现的。详细代码请 <a href="http://codepen.io/sqrtthree/pen/BzKbBb" target="_blank" rel="external">点击查看</a>。</p>
<p>嗯，这次看来女神挺满意的~</p>
<p>毕竟鼠标移入的触发区域也完美的限制在六边形里面了嘛~</p>
<p>女神表达了感激之情，我们在 QQ 上轻(gan)松(ga)的聊了起来，看起来是到了该约周末一起吃饭的时候了。</p>
<blockquote>
<p>“啊，抱歉噢，我周末要跟男朋友一起去逛街呢”</p>
</blockquote>
<p>哦。</p>
<p>呵呵哒。</p>
<p>真是一个感(lei)人(jue)肺(bu)腑(ai)的爱情故事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;故事说起那是在一个冰冷幽暗的晚上，外面下着淅淅沥沥的小雨，我正在思考一个十分重要的人生问题：这个周末哪里去？是宅在家里写程序好呢，还是宅在家里写博客好呢？还是好呢？这时，桌面右下角很少抖动的 QQ 头像竟然动了起来，我多年的直觉告诉我，一定是有人要约我，尽管这件事情从来没有
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="http://blog.sqrtthree.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 3.0 终于发布啦！</title>
    <link href="http://blog.sqrtthree.com/2016/06/13/jQuery-3-0-Final-Released/"/>
    <id>http://blog.sqrtthree.com/2016/06/13/jQuery-3-0-Final-Released/</id>
    <published>2016-06-13T23:39:09.000Z</published>
    <updated>2016-07-03T00:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery 3.0 现在发布啦！这个版本从 2014 年 10 月就已经在开始开发了。我们的目标是创建一个更轻量、更快的 jQuery（带有向后兼容的思想）。我们删除了所有的兼容旧版本 IE 浏览器的解决办法，并在一些有意义的地方利用了一些较为现代的 web APIs。它是 2.x 分支的延续，但是包含了少量我们认为早该出现的改变。在一段时间内， 1.12 和 2.2 分支仍将继续获得关键性的支持补丁，但是它们不会得到任何新功能或是重大修订。jQuery 3.0 就是 jQuery 的未来。如果你需要支持 IE6-8，你可以继续使用最新的 1.12 版。</p>
<a id="more"></a>
<p>尽管版本号是 3.0，但是我们预感在升级现有的代码时并不会造成太多的麻烦。是，是有一些 “breaking changes”，这对于主版本号跳跃来说是合理的，但是我们希望这些改变并没有真正影响到很多人。</p>
<p>为了帮助升级，我们有一个新的 <a href="https://jquery.com/upgrade-guide/3.0/" target="_blank" rel="external">3.0 升级指南</a>，并且 <a href="https://github.com/jquery/jquery-migrate#migrate-older-jquery-code-to-jquery-30" target="_blank" rel="external">jQuery Migrate 3.0</a> 将会帮助你识别代码中的兼容性问题。您在这次变化中的反馈将对我们有非常大的帮助，所以请尝试在您现有的代码和插件中使用它吧！</p>
<p>你可以在 jQuery CDN 中获取到这些文件，或者直接链接他们：</p>
<p><a href="https://code.jquery.com/jquery-3.0.0.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0.js</a></p>
<p><a href="https://code.jquery.com/jquery-3.0.0.min.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0.min.js</a></p>
<p>你也可以从 <code>npm</code> 中得到这个版本：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">jquery</span>@<span class="keyword">3</span>.<span class="keyword">0</span>.<span class="keyword">0</span></div></pre></td></tr></table></figure>
<p>附带着，我们也发布了 <code>jQuery Migrate 3.0</code>。我们强烈建议你使用它来定位 jQuery 3.0 的重大改变而带来的任何问题。你可以在这里获取这些文件：</p>
<p><a href="https://code.jquery.com/jquery-migrate-3.0.0.js" target="_blank" rel="external">https://code.jquery.com/jquery-migrate-3.0.0.js</a></p>
<p><a href="https://code.jquery.com/jquery-migrate-3.0.0.min.js" target="_blank" rel="external">https://code.jquery.com/jquery-migrate-3.0.0.min.js</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">jquery-migrate</span>@<span class="keyword">3</span>.<span class="keyword">0</span>.<span class="keyword">0</span></div></pre></td></tr></table></figure>
<p>有关借助 jQuery Migrate 将你的 jQuery 1.x 和 2.x 页面升级到 jQuery 3.0 的更多信息，请看 <a href="http://blog.jquery.com/2016/05/19/jquery-migrate-1-4-1-released-and-the-path-to-jquery-3-0/" target="_blank" rel="external"> the jQuery Migrate 1.4.1 blog post.</a></p>
<h4 id="轻量级构建"><a href="#轻量级构建" class="headerlink" title="轻量级构建"></a>轻量级构建</h4><p>最后，我们在这个版本里添加了一些新东西。有时你不需要 ajax, 或者你更喜欢使用一个专注于 ajax 请求的独立库。你往往使用CSS类作为一个简单的组合来操作的所有的网页动画。随着包含 ajax 和动画效果模块的普通版本的 jQuery，我们发布了一个排除了这些模块的 “slim” 版本。总而言之，它排除了 ajax，动画和当前过时的代码。在这关注加载性能的时代，jQuery 的大小是非常罕见的，但是 slim 版本比普通版小了近 6k （gzip压缩字节）- 23.6k 对 30k。这些文件在 CDN 和 npm 上都是可用的：</p>
<p><a href="https://code.jquery.com/jquery-3.0.0.slim.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0.slim.js</a></p>
<p><a href="https://code.jquery.com/jquery-3.0.0.slim.min.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0.slim.min.js</a></p>
<p>这个构建版本是基于我们自定义的构建 API 创建的。它允许你排除或者包含任何你喜欢的模块。查看 jQuery README 文件获取更多信息。</p>
<h4 id="和-jQuery-UI-以及-jQuery-Mobile-之间的兼容性"><a href="#和-jQuery-UI-以及-jQuery-Mobile-之间的兼容性" class="headerlink" title="和 jQuery UI 以及 jQuery Mobile 之间的兼容性"></a>和 jQuery UI 以及 jQuery Mobile 之间的兼容性</h4><p>虽然大多数的功能都能够正常工作，但是在升级的过程中 jQuery UI 和 jQuery Mobile 仍然会有一些小问题。如果你发现了一个问题，记住在下一个版本或许已经解决了，使用 jQuery Migrate 3.0 插件或许也可以修复它。期待很快发布吧。</p>
<h4 id="主要变化"><a href="#主要变化" class="headerlink" title="主要变化"></a>主要变化</h4><p>下面是这次的新版本中重要的新功能中的亮点，改进以及 bug 修复，你可以在 <a href="http://jquery.com/upgrade-guide/3.0/" target="_blank" rel="external">3.0 升级指南</a> 中找到更多的细节。你可以在我们的 <a href="https://github.com/jquery/jquery/issues?q=is%3Aissue+milestone%3A3.0.0" target="_blank" rel="external">GitHub bug tracker</a> 中获取完整的 bug 修复列表。如果你阅读过 3.0.0-rc1 的博文，你会发现下面的特性和那篇文章中是一样的。</p>
<h5 id="jQuery-Deferred-现在和-Promises-A-规范兼容"><a href="#jQuery-Deferred-现在和-Promises-A-规范兼容" class="headerlink" title="jQuery.Deferred 现在和 Promises/A+ 规范兼容"></a>jQuery.Deferred 现在和 Promises/A+ 规范兼容</h5><p>为了兼容 Promises/A+ 和 ES2015 Promises，jQuery.Deferred 对象已经更新了。<a href="https://github.com/promises-aplus/promises-tests" target="_blank" rel="external">Promises/A+ Compliance Test Suite</a> 已经检验通过了。这意味着我们需要对 .then() 方法做出一些重大改变。你可以通过使用现在不赞成使用的 .pipe() 方法来替换所有的 .then() 方法来恢复成传统的行为。</p>
<p>1、 在 .then() 方法中抛出一个错误现在变成了一个 rejection values。在以前，错误会向上冒泡传递，并终止执行回调函数。deferreds 依赖于所有的 defered 的解决状态，如果其中抛出一个错误，resolve 将不会发生。</p>
<p>例如：未捕获的异常 对比 rejection values</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> deferred = jQuery.Deferred();</div><div class="line">deferred.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"first callback"</span>);</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"error in callback"</span>);</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"second callback"</span>);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"rejection callback"</span>, err <span class="keyword">instanceof</span> <span class="built_in">Error</span>);</div><div class="line">&#125;);</div><div class="line">deferred.resolve();</div></pre></td></tr></table></figure>
<p>在以前，“first callback” 会被打印，并抛出一个错误。然后结束执行。紧挨着的  “second callback” 和 “rejection callback”  不会被打印出来。现在，符合标准的行为是  “rejection callback” 能够正确的被打印，正如你所看到的那样。err 是第一个回调函数中的 rejection values。</p>
<p>2、 现在可以通过 .then() 方法的回调来控制一个 Deferred 的解决状态，除了 rejection values 和 non-thenable 之外的返回值都会变为 fulfillment values。以前，从 rejection 处理程序中的返回值作为了 rejection values。</p>
<p>Example: returns from rejection callbacks</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> deferred = jQuery.Deferred();</div><div class="line">deferred.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"rejection callback 1"</span>, value);</div><div class="line">  <span class="keyword">return</span> <span class="string">"value2"</span>;</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"success callback 2"</span>, value);</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"exception value"</span>);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"rejection callback 2"</span>, value);</div><div class="line">&#125;)</div><div class="line">.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"rejection callback 3"</span>, value);</div><div class="line">&#125;);</div><div class="line">deferred.reject(<span class="string">"value1"</span>);</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<p>以前，这将打印 “rejection callback 1 value1”, “rejection callback 2 value2”, 和 “rejection callback 3 undefined”.</p>
<p>现在，符合标准的行为是，这将打印 “rejection callback 1 value1”, “success callback 2 value2″, 和 “rejection callback 3 [object Error]”.</p>
<p>3、 如果一个 Deferred 已经 resolved 之后，回调函数总是异步调用的。在以前，这些回调函数将会在绑定的时候同步执行。</p>
<p>Example: async vs sync</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var <span class="keyword">deferred</span> = jQuery.<span class="keyword">Deferred</span>();</div><div class="line"><span class="keyword">deferred</span>.resolve();</div><div class="line"><span class="keyword">deferred</span>.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</div><div class="line">  console.<span class="built_in">log</span>(<span class="string">"success callback"</span>);</div><div class="line">&#125;);</div><div class="line">console.<span class="built_in">log</span>(<span class="string">"after binding"</span>);</div></pre></td></tr></table></figure>
<p>在以前，这段代码会先打印 “success callback” 然后打印 “after binding”。现在，它的结果是先打印 “after binding” 然后打印 “success callback”。</p>
<p>重要：当捕获异常时有利于在浏览器中进行调试，通过拒绝回调函数来处理异常非常具有陈述性。当与promises打交道时，记住至少要增加一个拒绝回调函数。否则，任何错误都不会提示。</p>
<p>我们写了一个插件用来调试 Deferreds 的 Promises/A+ 兼容性。如果在控制台无法看到错误的详细信息和来源，可查阅这里 <a href="https://github.com/dmethvin/jquery-deferred-reporter" target="_blank" rel="external">jQuery Deferred Reporter Plugin</a>.</p>
<p><code>jQuery.when</code> 升级后可以接受所有thenable 对象，包括原生的 Promise 对象。</p>
<p><a href="https://github.com/jquery/jquery/issues/1722" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1722</a><br><a href="https://github.com/jquery/jquery/issues/2102" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2102</a></p>
<h5 id="为-Deferreds-添加-catch"><a href="#为-Deferreds-添加-catch" class="headerlink" title="为 Deferreds 添加 .catch()"></a>为 Deferreds 添加 .catch()</h5><p><code>catch()</code> 方法在promise 对象中的别名是 <code>.then(null, fn)</code>。</p>
<p><a href="https://github.com/jquery/jquery/issues/2102" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2102</a></p>
<h5 id="错误情况不静默失败"><a href="#错误情况不静默失败" class="headerlink" title="错误情况不静默失败"></a>错误情况不静默失败</h5><p>也许在夜深人静的时候，你突然会想 “window 的 offset 是多少？”，然后你意识到这是一个疯狂的问题 ——  window 哪来的 offset？</p>
<p>在过去，jQuery 也尝试过去返回某些东西而不是抛出异常。在这个 window 的 offset 问题的例子里，直到现在，答案一直是 <code>{ top: 0, left: 0 }</code>，在 jQuery 3.0 中，这种情况下，如此疯狂的问题会抛出错误而不是被默默的忽略了。请在这个版本里试试看，那些依赖于 jQuery 的代码是否因为非法输入而抛出错误。</p>
<p><a href="https://github.com/jquery/jquery/issues/1784" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1784</a></p>
<h5 id="删除弃用的事件别名"><a href="#删除弃用的事件别名" class="headerlink" title="删除弃用的事件别名"></a>删除弃用的事件别名</h5><p><code>.load</code>, <code>.unload</code>, 和 <code>.error</code>, 在 jQuery 1.8 后被废弃，使用 <code>.on()</code> 来注册监听器。</p>
<p><a href="https://github.com/jquery/jquery/issues/2286" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2286</a></p>
<h5 id="动画现在使用-requestAnimationFrame"><a href="#动画现在使用-requestAnimationFrame" class="headerlink" title="动画现在使用 requestAnimationFrame"></a>动画现在使用 <code>requestAnimationFrame</code></h5><p>在支持 <code>requestAnimationFrame</code> API 的平台上，除 IE9 和 Android 4.4 外，几乎被广泛支持。jQuery 现在也将使用这个 API 来处理动画。这将让动画更加顺滑、更少的 cpu 消耗，在移动端也将更省电。</p>
<p>jQuery在几年前曾尝试使用 <code>requestAnimationFrame</code>。但现存代码有有几个 <a href="http://blog.jquery.com/2011/09/01/jquery-1-6-3-released/" target="_blank" rel="external">严重的兼容性问题</a> 不得不推迟。我们认为通过在浏览器选显卡显示的时候暂定动画处理好了大部分问题，但是，所有依赖动画的代码想要实时执行是不切合实际的。</p>
<h5 id="jQuery自定义选择器的大提速"><a href="#jQuery自定义选择器的大提速" class="headerlink" title="jQuery自定义选择器的大提速"></a>jQuery自定义选择器的大提速</h5><p>感谢来自谷歌的 Paul Irish 的检测工作，我们发现当 <code>:visible</code> 这种的自定义选择器在同一份文件中被多次执行时，大量额外的运算可以省略跳过。现在这一类的运算速度提升了 17 倍！</p>
<p>要记住的是，尽管有了这些改进，但像 <code>:visible</code> 和 <code>:hidden</code> 这类选择器耗时代价还是很高的，因为依赖浏览器上的元素是否已经展示出来。在最坏的情况下，这可能需要在完全重算 CSS 样式和页面布局后才能执行。大部分情况我们不能阻止你去使用它，但我们建议你可以测试一下你的页面，看看这些选择器是否造成了性能问题。</p>
<p>这些改动其实在1.12/2.2就已经完成了，但是我们还是想在jQuery 3.0里重申一次。</p>
<p><a href="https://github.com/jquery/jquery/issues/2042" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2042</a></p>
<p>如上面提到的，<a href="http://jquery.com/upgrade-guide/3.0/" target="_blank" rel="external">升级指南</a> 已为各位备好，除了有助于升级，还列出了更多显著的变化。</p>
<blockquote>
<p>本文根据 <a href="http://blog.jquery.com/author/timmywil/" target="_blank" rel="external">Timmy Willison</a> 的《jQuery 3.0 Final Released!》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://blog.jquery.com/2016/06/09/jquery-3-0-final-released/" target="_blank" rel="external">http://blog.jquery.com/2016/06/09/jquery-3-0-final-released/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery 3.0 现在发布啦！这个版本从 2014 年 10 月就已经在开始开发了。我们的目标是创建一个更轻量、更快的 jQuery（带有向后兼容的思想）。我们删除了所有的兼容旧版本 IE 浏览器的解决办法，并在一些有意义的地方利用了一些较为现代的 web APIs。它是 2.x 分支的延续，但是包含了少量我们认为早该出现的改变。在一段时间内， 1.12 和 2.2 分支仍将继续获得关键性的支持补丁，但是它们不会得到任何新功能或是重大修订。jQuery 3.0 就是 jQuery 的未来。如果你需要支持 IE6-8，你可以继续使用最新的 1.12 版。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="jQuery3.0" scheme="http://blog.sqrtthree.com/tags/jQuery3-0/"/>
    
  </entry>
  
  <entry>
    <title>前端开发书籍推荐目录</title>
    <link href="http://blog.sqrtthree.com/2016/04/26/book-recommendations/"/>
    <id>http://blog.sqrtthree.com/2016/04/26/book-recommendations/</id>
    <published>2016-04-26T14:47:07.000Z</published>
    <updated>2016-04-26T14:47:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天有朋友说他们公司要做一个培训计划，让我给推荐几本关于前端方面的书籍，拖延了四五天之后，终于还是耐着性子把它写完了，这里也一并发出来，希望能够给那些在自学道路上艰难前行的人带来一点光亮和温暖。</p>
<a id="more"></a>
<p>以下是正文部分。</p>
<p>关于前端开发方面的书籍，我也看过那么几本，就简单的聊一下我看过的这些吧.</p>
<h3 id="1、Head-First-HTML与CSS"><a href="#1、Head-First-HTML与CSS" class="headerlink" title="1、Head First HTML与CSS"></a><a href="https://book.douban.com/subject/25752357/" target="_blank" rel="external">1、Head First HTML与CSS</a></h3><p>这本书最大的优点就是除了基础还是基础，非常适合完全不知道前端开发是什么的门外汉作为第一本入门书籍来学习， 整本书采用插画和故事场景的形式叙述，和那些枯燥、深奥的HTML书籍完全不同，秉持了 <code>Head First</code> 系列一贯通俗易懂的风格。你看这本书的时候会发现就像是在看漫画书一样轻松。是我看过对初学者最友好的书，没有之一。</p>
<h3 id="2、CSS-权威指南"><a href="#2、CSS-权威指南" class="headerlink" title="2、CSS 权威指南"></a><a href="https://book.douban.com/subject/2308234/" target="_blank" rel="external">2、CSS 权威指南</a></h3><p>在看了第一本书后，想必你已经对 HTML 和 CSS 的基础知识有了一定的了解，甚至你已经能够做出一些简单的网站了。但是你可能只是知道一些常见的 CSS 属性，毕竟上一本书只是讲解一些基础知识。所以如果你想要全面的、深入的了解 CSS ，那么权威指南系列是你的不二选择。</p>
<p>这是一本非常经典的 CSS 参考书，它的经典之处在于，它用普通人类可以理解的语言系统、全面地讲解了 CSS 规范。这本书会告诉你，CSS 是什么、CSS 有什么、CSS 可以做什么。</p>
<p>这本书就像是 CSS 里面的圣经一样，以神一般的地位存在。当然了，你不要被它的厚度给吓到，其实你在看这本书的时候完全不需要非要每一页都非常详细的看一遍，你只需要粗略的翻一下，了解一下内容，然后大部分情况下把它当做字典来使用。用一个知识点学一个知识点就好了。</p>
<h3 id="3、精通-CSS"><a href="#3、精通-CSS" class="headerlink" title="3、精通 CSS"></a><a href="https://book.douban.com/subject/4736167/" target="_blank" rel="external">3、精通 CSS</a></h3><p>这同样是一本非常经典的 CSS 图书，它侧重于实践，告诉你如何正确地使用 CSS。</p>
<p>这本书将最有用的 CSS 技术汇总在一起，还总结了 CSS 设计中的极具实践，讨论了解决各种实际问题的技术，填补了一直以来 CSS 图书的空白。</p>
<p>作者多年来一直在编写、设计和宣传基于标准的网页设计，我们现在有幸在本书中看到他以简洁清晰的方式讲授最重要的 CSS 技术。本书提供了一套网页设计人员不可或缺的解决方案、技巧和经验。</p>
<h3 id="4、CSS-Secrets"><a href="#4、CSS-Secrets" class="headerlink" title="4、CSS Secrets"></a><a href="https://book.douban.com/subject/26745943/" target="_blank" rel="external">4、CSS Secrets</a></h3><p>大家可能注意到了，这两本都出版于 2006 年。而今年已经是 2016 年了。如果你的书架只能放得下三本 CSS 书，除了上面的那两本之外，我向你强力推荐的一定是这一本。</p>
<p>这本书的准确出版时间为2016年04月底，也就是说截止目前为止，这本书都还没有出版，那么我为什么要向大家推荐一部还没有出版的书籍呢？github 上有试读篇，感兴趣可以先看看，不管你是什么感受，反正我看完就跪着去下单了。</p>
<p>对于中级的 CSS 开发者来说，这本书可以发挥最大的功效——它可以帮助你进阶。相信很多开发者在学习 CSS 到了一定阶段的时候，感觉自己好像什么都会了，但遇到复杂问题时往往又感觉捉襟见肘、力不从心。这就是遇到瓶颈了。如何突破瓶颈、进入下一个阶段？要做的无非是两件事——实践和思考。书并不能代替你思考，但一本好书可以向你示范，什么样的思考方式是正确的。</p>
<h3 id="5、图解-CSS3-（核心技术与案例实战）"><a href="#5、图解-CSS3-（核心技术与案例实战）" class="headerlink" title="5、图解 CSS3 （核心技术与案例实战）"></a><a href="https://book.douban.com/subject/25920727/" target="_blank" rel="external">5、图解 CSS3 （核心技术与案例实战）</a></h3><p>这本书是手淘的大漠写的，大漠作为 W3cplus 创始人，一直专注对 CSS 方面尤其是 CSS3 的研究，是国内最早研究和使用CSS3技术的一批人。这本书算是他的呕心力作，在书中有趣且易懂的来描述了 CSS3 的每一个特性。不仅内容极为全面、详实，而且富含大量的案例，实用性非常强，如果你对 CSS3 非常感兴趣，那你就有福了。</p>
<h3 id="6、Effective-Javascript-编写高质量-Javascript-代码的-68-个有效方法"><a href="#6、Effective-Javascript-编写高质量-Javascript-代码的-68-个有效方法" class="headerlink" title="6、Effective Javascript 编写高质量 Javascript 代码的 68 个有效方法"></a><a href="https://book.douban.com/subject/25786138/" target="_blank" rel="external">6、Effective Javascript 编写高质量 Javascript 代码的 68 个有效方法</a></h3><p>Effective 系列丛书经典著作，亚马逊五星级畅销书。就冲着这样的地位也值得入手。作者凭借多年标准化委员会工作和实践经验，深刻辨析JavaScript 的内部运作机制、特性、陷阱和编程最佳实践，将它们高度浓缩为极具实践指导意义的 68 条精华建议。内容很接地气，实用性很强，我表示看过之后受益颇深。无论你是刚学习 JS 的入门者，还是有着几年经验的开发者，这本书都值得你一看。</p>
<h3 id="7、编写可维护的JavaScript"><a href="#7、编写可维护的JavaScript" class="headerlink" title="7、编写可维护的JavaScript"></a><a href="https://book.douban.com/subject/21792530/" target="_blank" rel="external">7、编写可维护的JavaScript</a></h3><p>这是一本构建编码风格手册，帮助你和你的团队从“游击队”走向“正规军”的书籍。书中向开发人员阐述了如何在团队开发中编写具备高可维护性的JavaScript代码。覆盖了编码风格、编程技巧、自动化、测试等几方面。无论你是前端开发者还是团队 leader，无论你是刚入门的初学者还是有经验的开发者，都建议你阅读一下这一本书。</p>
<h3 id="8、Javascript-高级程序设计"><a href="#8、Javascript-高级程序设计" class="headerlink" title="8、Javascript 高级程序设计"></a><a href="https://book.douban.com/subject/10546125/" target="_blank" rel="external">8、Javascript 高级程序设计</a></h3><p>JavaScript 超级畅销书，技术经典名著。本书在详细讲解了JavaScript语言的核心之后，条分缕析地为读者展示了现有规范及实现为开发Web应用提供的各种支持和特性，全面深入、贴近实战的特点非常适合有一定编程经验但是想要进阶的开发者来学习。</p>
<h3 id="9、Javascript-语言精粹"><a href="#9、Javascript-语言精粹" class="headerlink" title="9、Javascript 语言精粹"></a><a href="https://book.douban.com/subject/11874748/" target="_blank" rel="external">9、Javascript 语言精粹</a></h3><p>众所周知，Javascript 之父只用 10 天时间就把 Javascript 设计出来了。由于设计时间太短，语言的一些细节考虑得不够严谨。这个曾是“世界上最被误解的语言”，担负了太多的特性，包括糟糕的交互和失败的设计，但是现在，JavaScript 俨然从 “最受误解的编程语言” 演变为了 “最流行的语言”，这说明 Javascript 有其自身独特的魅力。本书剥开了 JavaScript 沾污的外衣，抽离出一个具有更好可靠性、可读性和可维护性的JavaScript 子集，让你看到一门优雅的、轻量级的和非常富有表现力的语言。说其是每一个 Javascript 开发者都必备的一本书一点也不为过。</p>
<h3 id="10、Javascript-权威指南"><a href="#10、Javascript-权威指南" class="headerlink" title="10、Javascript 权威指南"></a><a href="https://book.douban.com/subject/1232061/" target="_blank" rel="external">10、Javascript 权威指南</a></h3><p>权威指南系列想必已经不用多说了，各个都很经典，值得入手。这本书详细的讲解了 Javascript 中的各种语法和语言核心设计，覆盖了 JS 的核心 API、遗留的客户端API和W3C标准DOM API，记述了这些API中的每一个JavaScript对象、方法、性质、构造函数、常量和事件处理程序。不过由于其内容量过于庞大，建议平时作为字典使用即可。</p>
<p>如果你的书架只能放得下三本 JS 书， 那么这三本已经凑齐了，我强烈推荐『Javascript 语言精粹』、『Javascript 高级程序设计』和这一本『Javascript 权威指南』。</p>
<h3 id="11、Javascript-设计模式"><a href="#11、Javascript-设计模式" class="headerlink" title="11、Javascript 设计模式"></a><a href="https://book.douban.com/subject/24744217/" target="_blank" rel="external">11、Javascript 设计模式</a></h3><p>这本也算是 O’REILLY 系列中的一个非常好的书籍，实际上 O’REILLY 系列基本上都没有差的。书中集中介绍了很多流行的设计模式在JavaScript中的应用以及实现方式。作为高级前端开发工程师学习设计模式的一本进阶书籍非常合适。</p>
<h3 id="12、Javascript-设计模式与开发实践"><a href="#12、Javascript-设计模式与开发实践" class="headerlink" title="12、Javascript 设计模式与开发实践"></a><a href="https://book.douban.com/subject/26382780/" target="_blank" rel="external">12、Javascript 设计模式与开发实践</a></h3><p>这本书是由国内知名前端团队腾讯 AlloyTeam 成员编写的，设计模式自古乃程序员高谈论阔之话题，许多程序员从设计模式中学到了设计软件的灵感，或者是问题的解决方案。但是有些人却认为设计模式只适合静态语言，Javascript 这种动态语言根本就没有设计模式一说。显然，本书给了你最好的答案。</p>
<p>该书全面涵盖了 JavaScript 的 16 个常用的设计模式、设计原则、编程技巧和代码重构，由浅入深的详细介绍了面向对象的设计原则以及在设计模式中的体现。让你能够将经典的设计模式应用到 JS 中，实乃高级程序设计必读之佳作。</p>
<h3 id="13、jQuery-技术内幕"><a href="#13、jQuery-技术内幕" class="headerlink" title="13、jQuery 技术内幕"></a><a href="https://book.douban.com/subject/25823709/" target="_blank" rel="external">13、jQuery 技术内幕</a></h3><p>阿里巴巴资深前端开发工程师墨智的大作，没出版之前我就一直在关注，渴望能偶早早看到。</p>
<p>jQuery 作为全球使用量最大的 JS 库，它的优秀想必我也不需要说了，如果你使用了多年的 jQuery，但一直不敢去了解它的源码实现方式，或者你觉得你的 JS 技能进入了瓶颈期，那这本书对你来说就如同雪中送炭一样。</p>
<p>本书首先通过“总体架构”梳理了各个模块的分类、功能和依赖关系，让大家对 jQuery 的工作原理有大致的印象；然后按照源码几乎逐行分析了其中各个模块的源码实现，分析的详细程度简直“令人发指”。不过这本书是基于 1.x 的版本进行分析的，阅读的时候略微注意即可，实际上即使是 1.x 版本的 jQuery，也非常值得我们学习。</p>
<h3 id="14、数据结构与算法-Javascript-描述"><a href="#14、数据结构与算法-Javascript-描述" class="headerlink" title="14、数据结构与算法 Javascript 描述"></a><a href="https://book.douban.com/subject/25945449/" target="_blank" rel="external">14、数据结构与算法 Javascript 描述</a></h3><p>这本书覆盖了常用的基本数据结构，如果你对数据结构很感兴趣，算是一本不错的入门书籍吧，推荐指数三颗星。但是本书中也有一些错误出现，建议看中文版的同时对照英文勘误表进行阅读和学习。</p>
<h3 id="15、React-引领未来的用户界面开发框架"><a href="#15、React-引领未来的用户界面开发框架" class="headerlink" title="15、React 引领未来的用户界面开发框架"></a><a href="https://book.douban.com/subject/26378583/" target="_blank" rel="external">15、React 引领未来的用户界面开发框架</a></h3><p>2014 年横空出世的由 Facebook 推出的开源框架 React.js，基于 Virtual DOM 重新定义了用户界面的开发方式，彻底革新了大家对前端框架的认识。在这个火热朝天的年代，如果你连 React 都还没听说过，那还是赶紧洗洗睡吧。如果你听说过但是没有使用过，或者是想要学习 React 但是该不知如何下手，再或者是看不懂那些晦涩难懂的英文文档，那么这本书就很适合你了。这本书介绍了 React 的一些基础知识，比较适合入门，但是前端开发的世界变化的这么快，估计这本书的生命周期也没几年吧。</p>
<h3 id="16、HTML5-游戏开发进阶指南"><a href="#16、HTML5-游戏开发进阶指南" class="headerlink" title="16、HTML5 游戏开发进阶指南"></a><a href="https://book.douban.com/subject/25710762/" target="_blank" rel="external">16、HTML5 游戏开发进阶指南</a></h3><p>这本书介绍了 HTML5 游戏开发的一般过程和技巧，如果你对 HTML5 游戏开发很感兴趣，可以看一下。并且书中也有很多的案例，作为一个学习游戏开发的入门书籍还是可以的。</p>
<h3 id="17、深入浅出-Nodejs"><a href="#17、深入浅出-Nodejs" class="headerlink" title="17、深入浅出 Nodejs"></a><a href="https://book.douban.com/subject/25768396/" target="_blank" rel="external">17、深入浅出 Nodejs</a></h3><p>开发者的大事，大快所有人心的大好事。</p>
<p>出自国内阿里大神朴灵的大作，国内最好的 Nodejs 书籍，没有之一。同时也是第一本深度讲解 Node 的图书。本书从不同的视角介绍了 Node 内在的特点和结构。非常适合想要深入了解学习 Nodejs 的高级开发者来学习。实际上，不管是否学习过 Node，只要你热爱技术，都推荐你阅读它。</p>
<h3 id="18、HTTP-权威指南"><a href="#18、HTTP-权威指南" class="headerlink" title="18、HTTP 权威指南"></a><a href="https://book.douban.com/subject/10746113/" target="_blank" rel="external">18、HTTP 权威指南</a></h3><p>谁说做前端开发不需要了解 http 相关知识？高级前端开发者永远不会仅仅满足于了解 ajax 是怎么回事之后就止步不前，如果你想要学习 http 和通信协议相关的知识，那就不要再犹豫了，一定是这本书了。</p>
<p>书中尝试着将HTTP中一些互相关联且常被误解的规则梳理清楚，并编写了一系列基于各种主题的章节，对HTTP各方面的特性进行了介绍。书中对HTTP“为什么”这样做进行了详细的解释，而不仅仅停留在它是“怎么做”的。非常适合作为高级开发者进阶学习之资料。</p>
<h3 id="19、黑客与画家"><a href="#19、黑客与画家" class="headerlink" title="19、黑客与画家"></a><a href="https://book.douban.com/subject/6021440/" target="_blank" rel="external">19、黑客与画家</a></h3><p>这本书就比较特殊了，这本是硅谷创业之父Paul Graham 的文集，注意，是文集，而不是像上面那些那样是技术书籍。</p>
<p>这本书主要介绍黑客的爱好和动机，讨论黑客成长、黑客对世界的贡献以及编程语言和黑客工作方法等所有对计算机时代感兴趣的人的一些话题。书中的内容不但有助于了解计算机编程的本质、互联网行业的规则，还会帮助读者了解我们这个时代，迫使读者独立思考。</p>
<p>简单的来说，这是一本谈论编程哲学的书籍，而不是针对某种语言进行解释的技术书籍。</p>
<p>本书适合所有的程序员和互联网工作者，以及一切对计算机感兴趣的人阅读。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天有朋友说他们公司要做一个培训计划，让我给推荐几本关于前端方面的书籍，拖延了四五天之后，终于还是耐着性子把它写完了，这里也一并发出来，希望能够给那些在自学道路上艰难前行的人带来一点光亮和温暖。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="资源" scheme="http://blog.sqrtthree.com/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>在 Chrome 开发者工具中调试 node.js</title>
    <link href="http://blog.sqrtthree.com/2016/02/29/debugging-nodejs-in-chrome-devtools/"/>
    <id>http://blog.sqrtthree.com/2016/02/29/debugging-nodejs-in-chrome-devtools/</id>
    <published>2016-02-29T11:52:37.000Z</published>
    <updated>2016-02-29T11:52:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools" target="_blank" rel="external">Debugging Node.js in Chrome DevTools</a></li>
<li>原文作者 : <a href="http://mattdesl.svbtle.com/" target="_blank" rel="external">MATT DESLAURIERS</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/sqrthree" target="_blank" rel="external">sqrthree (根号三)</a></li>
<li>校对者: <a href="https://github.com/shenxn" target="_blank" rel="external">shenxn</a>、<a href="https://github.com/CoderBOBO" target="_blank" rel="external">CoderBOBO</a></li>
</ul>
</blockquote>
<p>这篇文章介绍了一种在 Chrome 开发者工具里面开发、调试和分析 Node.js 应用程序的新方法。</p>
<a id="more"></a>
<h2 id="devtool"><a href="#devtool" class="headerlink" title=" devtool"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#devtool" target="_blank" rel="external"> </a>devtool</h2><p>最近我一直在开发一个命令行工具 <a href="https://github.com/Jam3/devtool" target="_blank" rel="external">devtool</a>，它可以在 Chrome 的开发者工具中运行 Node.js 程序。</p>
<p>下面的记录显示了在一个 HTTP 服务器中设置断点的情况。</p>
<p><img src="http://i.imgur.com/V4RQSZ2.gif" alt="movie"></p>
<p>该工具基于 <a href="https://github.com/atom/electron/" target="_blank" rel="external">Electron</a> 将 Node.js 和 Chromium 的功能融合在了一起。它的目的在于为调试、分析和开发 Node.js 应用程序提供一个简单的界面。</p>
<p>你可以使用 <a href="http://npmjs.com/" target="_blank" rel="external">npm</a> 来安装它:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g devtool</div></pre></td></tr></table></figure>
<h2 id="REPL"><a href="#REPL" class="headerlink" title=" REPL"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#repl" target="_blank" rel="external"> </a>REPL</h2><p>在某种程度上，我们可以用它来作为 <code>node</code> shell 命令的替代品。例如，我们可以这样打开一个 REPL (译者注: REPL 全称为”Read-Eval-Print Loop”，是一个简单的、交互式的编程环境)。</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">devtool</span></div></pre></td></tr></table></figure>
<p>这将启动一个带有 Node.js 特性支持的 Chrome 开发者工具实例。</p>
<p><img src="http://i.imgur.com/bnInBHA.png" alt="console"></p>
<p>我们可以引用 Node 模块、本地 npm 模块和像 <code>process.cwd()</code> 这样的内置模块。也可以获取像 <code>copy()</code> 和 <code>table()</code> 这样的 Chrome 开发者工具中的函数。</p>
<p>其他的例子就一目了然了:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> run a Node script</span></div><div class="line">devtool app.js</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> pipe <span class="keyword">in</span> content to process.stdin</span></div><div class="line">devtool &lt; audio.mp3</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> pipe <span class="keyword">in</span> JavaScript to <span class="built_in">eval</span> it</span></div><div class="line">browserify index.js | devtool</div></pre></td></tr></table></figure>
<h1 id="run-a-Node-script"><a href="#run-a-Node-script" class="headerlink" title="run a Node script"></a>run a Node script</h1><h2 id="开发"><a href="#开发" class="headerlink" title="  开发"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#development" target="_blank" rel="external"> </a> 开发</h2><p>我们可以在通用模块和应用程序的开发中使用 <code>devtool</code>，来代替像 <a href="https://www.npmjs.com/package/nodemon" target="_blank" rel="external">nodemon</a> 这样目前已经存在的工具。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool app<span class="selector-class">.js</span> --watch</div></pre></td></tr></table></figure>
<p>这行命令将会在 Chrome 开发者工具中的控制台中启动我们的 <code>app.js</code>， 通过 <code>--watch</code> 参数，我们保存的文件将(自动)重新载入到控制台。</p>
<p><img src="http://i.imgur.com/NuoYkJK.png" alt="console"></p>
<p>点击 <a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools" target="_blank" rel="external"><code>app.js:1</code></a> 链接，程序将会在 <code>Sources</code> 标签中把我们带到与之相关的那一行。</p>
<p><img src="http://i.imgur.com/mH5jWT9.png" alt="line"></p>
<p>在 <code>Sources</code> 标签中，你也可以敲击 <code>Cmd/Ctrl + P</code> 按键在所有依赖的模块中进行快速搜索。你甚至可以审查和调试内置模块，比如 Node.js 中的那些。你也可以使用左手边的面板来浏览模块。</p>
<p><img src="http://i.imgur.com/jn3RmnV.png" alt="Sources"></p>
<h2 id="调试"><a href="#调试" class="headerlink" title="  调试"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#debugging" target="_blank" rel="external"> </a> 调试</h2><p>因为我们能够访问 <code>Sources</code> 标签，所以我们可以用它来调试我们的应用程序。你可以设置一个断点，然后重新加载调试器(<code>Cmd/Ctrl + R</code>)，或者你也可以通过 <code>--break</code> 标记来设置一个初始断点。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool app.js --<span class="keyword">break</span></div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/hJ2pLW1.png" alt="break"></p>
<p>下面是一些对于那些学习 Chrome 开发者工具的人来说可能不是特别常用的功能:</p>
<ul>
<li><a href="http://blittle.github.io/chrome-dev-tools/sources/conditional-breakpoints.html" target="_blank" rel="external">条件断点</a></li>
<li><a href="http://blittle.github.io/chrome-dev-tools/sources/uncaught-exceptions.html" target="_blank" rel="external">有未捕获的异常时暂停</a></li>
<li><a href="http://blittle.github.io/chrome-dev-tools/sources/restart-frame.html" target="_blank" rel="external">重启帧</a></li>
<li><a href="http://albertlee.azurewebsites.net/using-watch-tools-in-chrome-dev-tools-to-improve-your-debugging/" target="_blank" rel="external">监听表达式</a></li>
</ul>
<blockquote>
<p>提示 - 当调试器暂停时，你可以敲击 <code>Escape</code> 按键打开一个执行在当前作用域内的控制台。你可以修改一些变量然后继续执行。</p>
</blockquote>
<p><img src="http://i.imgur.com/nG9ellE.gif" alt="Imgur"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="  分析"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#profiling" target="_blank" rel="external"> </a> 分析</h2><p><code>devtool</code> 的另一个功能是分析像 <a href="https://github.com/substack/node-browserify" target="_blank" rel="external">browserify</a>, <a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">gulp</a> 和 <a href="https://github.com/babel/babel" target="_blank" rel="external">babel</a> 这样的程序。</p>
<p>这里我们使用 <a href="https://developer.chrome.com/devtools/docs/console-api" target="_blank" rel="external"><code>console.profile()</code></a> (Chrome 的一个功能)来分析一个打包工具的 CPU 使用情况。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Start DevTools profiling...</span></div><div class="line"><span class="built_in">console</span>.profile(<span class="string">'build'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Bundle some browser application</span></div><div class="line">browserify(<span class="string">'client.js'</span>).bundle(<span class="function"><span class="keyword">function</span> (<span class="params">err, src</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line"></div><div class="line">    <span class="comment">// Finish DevTools profiling...</span></div><div class="line">    <span class="built_in">console</span>.profileEnd(<span class="string">'build'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>现在我们在这个文件上运行 <code>devtool</code> :</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">devtool</span> <span class="selector-tag">app</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure>
<p>执行之后，我们可以在 <code>Profiles</code> 标签中看到结果。</p>
<p><img src="http://i.imgur.com/vSu7Lcz.png" alt="profile"></p>
<p>我们可以使用右边的链接来查看和调试执行频率较高的代码路径。</p>
<p><img src="http://i.imgur.com/O4DZHyv.png" alt="debug"></p>
<h2 id="高级选项"><a href="#高级选项" class="headerlink" title="  高级选项"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#advanced-options" target="_blank" rel="external"> </a> 高级选项</h2><h4 id="实验"><a href="#实验" class="headerlink" title="  实验"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#experiments" target="_blank" rel="external"> </a> 实验</h4><p>Chrome 会不断的向他们的开发者工具中推送新功能和实验，例如 <strong>Promise Inspector</strong>。你可以通过点击右上角的三个点，然后选择 <code>Settings -&gt; Experiments</code> 来开启他们。</p>
<p><img src="http://i.imgur.com/dNuIMw0.png" alt="experiments"></p>
<p>一旦启用，你就可以通过敲击 <code>Escape</code> 按键来调出一个带有 <em>Promises</em> 监视器的面板。</p>
<p><img src="https://i.imgur.com/xKkTEeg.png" alt=""></p>
<blockquote>
<p>提示: 在 <em>Experiments</em> 界面，如果你敲击 <code>Shift</code> 键 6 次，你会接触到一些甚至更多的实验性（不稳定）的功能。</p>
</blockquote>
<h4 id="console"><a href="#console" class="headerlink" title=" --console"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#codeconsolecode" target="_blank" rel="external"> </a><code>--console</code></h4><p>你可以重定向控制台输出到终端中(<code>process.stdout</code> 和 <code>process.stderr</code>)。也允许你通过使用管道将它导入到其他进程中，例如 TAP prettifiers。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool test.js --console <span class="string">| tap-spec</span></div></pre></td></tr></table></figure>
<h4 id="和-process-argv"><a href="#和-process-argv" class="headerlink" title=" -- 和 process.argv"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#codecode-and-codeprocessargvcode" target="_blank" rel="external"> </a><code>--</code> 和 <code>process.argv</code></h4><p>你的脚本可以像一个普通的 Node.js 应用那样解析 <code>process.argv</code>。如果你在 <code>devtool</code> 命令中传递一个句号(<code>--</code>)，它后面的所有内容都会被当做一个新的 <code>process.argv</code> 。例如:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool script<span class="selector-class">.js</span> --console -- <span class="selector-tag">input</span>.txt</div></pre></td></tr></table></figure>
<p>现在，你的脚本看起来像这样:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">file</span> = process.argv[2];</div><div class="line">console.<span class="built_in">log</span>('<span class="keyword">File</span>: %s', <span class="keyword">file</span>);</div></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">File</span>: <span class="keyword">input</span>.txt</div></pre></td></tr></table></figure>
<h4 id="quit-和-headless"><a href="#quit-和-headless" class="headerlink" title=" --quit 和 --headless"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#codequitcode-and-codeheadlesscode" target="_blank" rel="external"> </a><code>--quit</code> 和 <code>--headless</code></h4><p>使用 <code>--quit</code>，当遇到了一个错误(如语法错误或者未捕获的异常)时，进程将会安静的退出，并返回结束码<code>1</code> 。</p>
<p>使用 <code>--headless</code>，开发工具将不会被打开。</p>
<p>这可以用于命令行脚本：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">devtool</span> <span class="comment">render</span><span class="string">.</span><span class="comment">js</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">quit</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">headless</span> &gt; <span class="comment">result</span><span class="string">.</span><span class="comment">png</span></div></pre></td></tr></table></figure>
<h4 id="browser-field"><a href="#browser-field" class="headerlink" title=" --browser-field"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#codebrowserfieldcode" target="_blank" rel="external"> </a><code>--browser-field</code></h4><p>一些模块为了更好的在浏览器中运行或许会提供一个入口点。当你需要这些模块时，你可以使用 <code>--browser-field</code> 来支持 <a href="https://github.com/defunctzombie/package-browser-field-spec" target="_blank" rel="external">package.json flag</a></p>
<p>例如，我们可以使用 <a href="https://github.com/Jam3/xhr-request" target="_blank" rel="external">xhr-request</a> ，当带有 <code>&quot;browser&quot;</code> 字段被引用时，这个模块会使用 XHR。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const request = require('xhr-request')<span class="comment">;</span></div><div class="line"></div><div class="line">request('https<span class="symbol">://api</span>.github.com/users/mattdesl/repos', &#123;</div><div class="line">    json: true</div><div class="line">&#125;, (<span class="name">err</span>, data) =&gt; &#123;</div><div class="line">    if (<span class="name">err</span>) throw err<span class="comment">;</span></div><div class="line"></div><div class="line">    console.log(<span class="name">data</span>)<span class="comment">;</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>在 shell 中执行:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> xhr-request <span class="comment">--save</span></div><div class="line">devtool app.js <span class="comment">--browser-field</span></div></pre></td></tr></table></figure>
<p>现在，我们可以在 <code>Network</code> 选项卡中审查请求:</p>
<p><img src="http://i.imgur.com/BWciXuh.png" alt="requests"></p>
<h4 id="no-node-timers"><a href="#no-node-timers" class="headerlink" title=" --no-node-timers"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#codenonodetimerscode" target="_blank" rel="external"> </a><code>--no-node-timers</code></h4><p>默认情况下，我们提供全局的 <code>setTimeout</code> and <code>setInterval</code>，因此他们表现的像 Node.js 一样(返回一个带有 <code>unref()</code> and <code>ref()</code> 函数的对象)。</p>
<p>但是，你可以禁用这个方法来改善对异步堆栈跟踪的支持。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool app.js --no-<span class="keyword">node</span><span class="title">-timers</span></div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/dmfOfMx.png" alt="async"></p>
<h4 id="V8-Flags"><a href="#V8-Flags" class="headerlink" title=" V8 Flags"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#v8-flags" target="_blank" rel="external"> </a>V8 Flags</h4><p>在当前目录，你可以创建一个 <code>.devtoolrc</code> 文件来进行诸如 V8 flags 这样的高级设置。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"v8"</span>: &#123;</div><div class="line">    <span class="attr">"flags"</span>: [</div><div class="line">      <span class="string">"--harmony-destructuring"</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>访问<a href="https://github.com/Jam3/devtool/blob/master/docs/rc-config.md" target="_blank" rel="external">这里</a>获取更多细节</p>
<h2 id="陷阱"><a href="#陷阱" class="headerlink" title=" 陷阱"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#gotchas" target="_blank" rel="external"> </a>陷阱</h2><p>由于程序是在一个 Browser/Electron 环境中运行，而不是在一个真正的 Node.js 环境中。因此这里有<a href="https://github.com/Jam3/devtool#gotchas" target="_blank" rel="external">一些陷阱</a>你需要注意。</p>
<h2 id="对比"><a href="#对比" class="headerlink" title=" 对比"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#comparisons" target="_blank" rel="external"> </a>对比</h2><p>目前已经存在了一些 Node.js 调试器，所以你或许想知道他们之间的区别在哪。</p>
<h3 id="WebStorm-调试器"><a href="#WebStorm-调试器" class="headerlink" title=" WebStorm 调试器"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#webstorm-debugger" target="_blank" rel="external"> </a>WebStorm 调试器</h3><p><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="external">WebStorm</a> 编辑器里面包含了一个非常强大的 Node.js 调试器。如果你已经使用 WebStorm 作为你的代码编辑器，那对你来说很棒。</p>
<blockquote>
<p><img src="https://i.imgur.com/cfwG6qY.png" alt=""></p>
</blockquote>
<p>但是，它缺少一些 Chrome 开发者工具中的功能，例如:</p>
<ul>
<li>一个丰富的互动的控制台</li>
<li>异常时暂停</li>
<li>异步堆栈跟踪</li>
<li>Promise 检查</li>
<li>分析</li>
</ul>
<p>但因为你和你的 WebStorm 工作空间集成，所以你可以在调试时修改和编辑你的文件。它也是运行在一个真正的 Node/V8 环境中，而不像 <code>devtool</code> 一样。因此对于大部分的 Node.js 应用程序来说它更稳健。</p>
<h3 id="iron-node"><a href="#iron-node" class="headerlink" title=" iron-node"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#ironnode" target="_blank" rel="external"> </a>iron-node</h3><p><img src="https://i.imgur.com/fkbLvoS.png" alt=""></p>
<p>一个同样基于 Electron 的调试器是<a href="https://github.com/s-a/iron-node" target="_blank" rel="external">iron-node</a>。<code>iron-node</code> 包含了一个内置的命令来重新编译原生插件，还有一个复杂的图形界面显示您的<code>package.json</code> 和 <code>README.md</code>。</p>
<p>而 <code>devtool</code> 更侧重于把命令行、Unix 风格的管道和重定向和 Electron/Browser 的 API 当作有趣的用例。</p>
<p><code>devtool</code> 提供各种各样的功能来表现的更像 Node.js (例如 <code>require.main</code>, <code>setTimeout</code> 和 <code>process.exit</code>)，并且覆盖了内部的 <code>require</code> 机制作为 source maps，还有改进过的错误处理、断点注入、以及 <code>&quot;browser&quot;</code> 字段的解决方案。</p>
<h3 id="node-inspector"><a href="#node-inspector" class="headerlink" title=" node-inspector"></a><a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#nodeinspector" target="_blank" rel="external"> </a>node-inspector</h3><p><img src="https://i.imgur.com/T4fpxjU.png" alt=""></p>
<p>你或许也喜欢 <a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="external">node-inspector</a>，一个使用远程调试而不是构建在 Electron 之上的工具。</p>
<p>这意味着你的代码将运行在一个真正的 Node 环境中，没有任何 <code>window</code> 或其他的 Browser/Electron API 来污染作用域并导致某些模块出现问题。对于大型 Node.js 应用(即本地插件)来说它有一个强有力的支持，并且在开发者工具实例中拥有更多的控制权(即可以注入断点和支持网络请求)。</p>
<p>然而，由于它重新实现了大量的调试技巧，因此对于开发来说感觉可能比最新版的 Chrome 开发者工具要慢、笨拙和脆弱。它经常会崩溃，往往导致 Node.js 开发人员很无奈。</p>
<p>而 <code>devtool</code> 的目的是让那些从 Chrome 开发者工具中转过来的人觉得比较亲切，而且也增加了像 Browser/Electron APIs 这样的功能。</p>
<blockquote>
<p>本文根据 <a href="http://mattdesl.svbtle.com/" target="_blank" rel="external">MATT DESLAURIERS</a> 的《<a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools" target="_blank" rel="external">Debugging Node.js in Chrome DevTools</a>》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools" target="_blank" rel="external">Debugging Node.js in Chrome DevTools</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 : &lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debugging Node.js in Chrome DevTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者 : &lt;a href=&quot;http://mattdesl.svbtle.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MATT DESLAURIERS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自 : &lt;a href=&quot;https://github.com/xitu/gold-miner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者 : &lt;a href=&quot;https://github.com/sqrthree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sqrthree (根号三)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;校对者: &lt;a href=&quot;https://github.com/shenxn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shenxn&lt;/a&gt;、&lt;a href=&quot;https://github.com/CoderBOBO&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoderBOBO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章介绍了一种在 Chrome 开发者工具里面开发、调试和分析 Node.js 应用程序的新方法。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>GitBook 简明教程</title>
    <link href="http://blog.sqrtthree.com/2016/02/23/gitbook/"/>
    <id>http://blog.sqrtthree.com/2016/02/23/gitbook/</id>
    <published>2016-02-23T22:40:01.000Z</published>
    <updated>2016-02-23T22:40:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Modern book format and toolchain using Git and Markdown</p>
</blockquote>
<p>这是 GitBook 项目主页上对 GitBook 的定义。</p>
<p>GitBook 是一个命令行工具。通过它，你能够使用 Git 和 Markdown 来编排书本。并且通过工具可以自动生成相应的 HTML、PDF 和 epub 格式的文件。</p>
<p>总之，就是好用，好使，加好看。</p>
<a id="more"></a>
<p>刚好近日准备通过 GitBook 来写一些教程，这里就先简明介绍一下它的使用。嗯？我写的什么教程？ 哈哈，就不告诉你，等写好了再说 &lt;(￣▽￣)&gt; 哇哈哈…</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为 GitBook 是一个基于 <a href="http://nodejs.org/" target="_blank" rel="external">Node</a> 开发的命令行工具。因此需要您自行配置 <a href="http://nodejs.org/" target="_blank" rel="external">Node</a> 和 <a href="https://www.npmjs.com/package/npm" target="_blank" rel="external">npm</a> 环境。如果你已经安装好这些环境之后，GitBook 的安装只需要一步就能完成！</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install -g gitbook-cli</span></div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>GitBook 的用法非常简单，老规矩，先看一下我们都有哪些命令可以使用:</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ gitbook help</div><div class="line"></div><div class="line">  build [book] [output] 	 build a book</div><div class="line">    --format 	 Format <span class="keyword">to</span> build <span class="keyword">to</span> (Default is website; Values are website, json, ebook)</div><div class="line">    --log 	 Minimum log level <span class="keyword">to</span> display (Default is info; Values are debug, info, warn, error, disabled)</div><div class="line"></div><div class="line">  pdf [book] [output] 	 build a book <span class="keyword">to</span> pdf</div><div class="line">    --log 	 Minimum log level <span class="keyword">to</span> display (Default is info; Values are debug, info, warn, error, disabled)</div><div class="line"></div><div class="line">  epub [book] [output] 	 build a book <span class="keyword">to</span> epub</div><div class="line">    --log 	 Minimum log level <span class="keyword">to</span> display (Default is info; Values are debug, info, warn, error, disabled)</div><div class="line"></div><div class="line">  mobi [book] [output] 	 build a book <span class="keyword">to</span> mobi</div><div class="line">    --log 	 Minimum log level <span class="keyword">to</span> display (Default is info; Values are debug, info, warn, error, disabled)</div><div class="line"></div><div class="line">  serve [book] 	 Build then serve a gitbook <span class="keyword">from</span> a directory</div><div class="line">    --port 	<span class="built_in"> Port </span><span class="keyword">for</span><span class="built_in"> server </span><span class="keyword">to</span> listen on (Default is 4000)</div><div class="line">    --lrport 	<span class="built_in"> Port </span><span class="keyword">for</span> livereload<span class="built_in"> server </span><span class="keyword">to</span> listen on (Default is 35729)</div><div class="line">    --watch 	 Enable/<span class="builtin-name">disable</span> file watcher (Default is <span class="literal">true</span>)</div><div class="line">    --format 	 Format <span class="keyword">to</span> build <span class="keyword">to</span> (Default is website; Values are website, json, ebook)</div><div class="line">    --log 	 Minimum log level <span class="keyword">to</span> display (Default is info; Values are debug, info, warn, error, disabled)</div><div class="line"></div><div class="line">  install [book] 	 install plugins dependencies</div><div class="line"></div><div class="line">  init [directory] 	 create files <span class="keyword">and</span> folders based on contents of SUMMARY.md</div></pre></td></tr></table></figure>
<p>实际上我们最常用的命令只有两个:</p>
<ul>
<li><code>gitbook init</code>: 初始化书籍目录</li>
<li><code>gitbook serve</code>: 在编写书籍时启动一个服务器，自动编译&amp;更新内容，并在浏览器中预览</li>
</ul>
<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h4 id="gitbook-init"><a href="#gitbook-init" class="headerlink" title="gitbook init"></a>gitbook init</h4><p>首先，通过终端(PC 下可使用命令提示符)进入到你想要书写内容的目录，然后执行 <code>gitbook init</code> 命令，之后目录中会自动生成 <code>README.md</code> 和 <code>SUMMARY.md</code> 两个文件。</p>
<p>这两个文件在 GitBook 项目中是必须存在的，其中 <code>README.md</code> 是对书籍的简单介绍，<code>SUMMARY.md</code> 是对书籍目录的描述，并且 GitBook 会通过该文件中的目录描述自动生成对应的目录和文件。</p>
<p>其中，<code>SUMMARY.md</code> 文件中内容的格式是这样的:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>[<span class="string">Chapter1</span>](<span class="link">chapter1/README.md</span>)</div><div class="line">  * [<span class="string">Section1.1</span>](<span class="link">chapter1/section1.1.md</span>)</div><div class="line">  * [<span class="string">Section1.2</span>](<span class="link">chapter1/section1.2.md</span>)</div><div class="line"><span class="bullet">* </span>[<span class="string">Chapter2</span>](<span class="link">chapter2/README.md</span>)</div></pre></td></tr></table></figure>
<p>当你修改了 <code>SUMMARY.md</code> 文件中的内容后，你可以再次使用 <code>gitbook init</code> 来自动生成对应的目录和文件。</p>
<h4 id="Multi-Languages"><a href="#Multi-Languages" class="headerlink" title="Multi-Languages"></a>Multi-Languages</h4><p>如果你要写的书籍是多语言版，你只需要创建一个 <code>LANGS.md</code> 文件，然后编写配置内容即可:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>[<span class="string">English</span>](<span class="link">en/</span>)</div><div class="line"><span class="bullet">* </span>[<span class="string">French</span>](<span class="link">fr/</span>)</div><div class="line"><span class="bullet">* </span>[<span class="string">Español</span>](<span class="link">es/</span>)</div></pre></td></tr></table></figure>
<h4 id="gitbook-serve"><a href="#gitbook-serve" class="headerlink" title="gitbook serve"></a>gitbook serve</h4><p>书籍目录结构创建完成以后，我们就可以使用 <code>gitbook serve</code> 来编译和预览书籍了：</p>
<p><code>gitbook serve</code> 命令实际上会首先调用 <code>gitbook build</code> 编译书籍，完成以后会打开一个 web 服务器，监听在本地的 <code>4000</code> 端口。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ gitbook serve</div><div class="line"></div><div class="line">Live reload server started on port: 35729</div><div class="line">Press CTRL+C to quit ...</div><div class="line"></div><div class="line">info: loading book configuration....OK</div><div class="line">info: <span class="keyword">load</span> <span class="keyword">plugin</span> gitbook-<span class="keyword">plugin</span>-highlight ....OK</div><div class="line">info: <span class="keyword">load</span> <span class="keyword">plugin</span> gitbook-<span class="keyword">plugin</span>-<span class="keyword">search</span> ....OK</div><div class="line">info: <span class="keyword">load</span> <span class="keyword">plugin</span> gitbook-<span class="keyword">plugin</span>-sharing ....OK</div><div class="line">info: <span class="keyword">load</span> <span class="keyword">plugin</span> gitbook-<span class="keyword">plugin</span>-fontsettings ....OK</div><div class="line">info: <span class="keyword">load</span> <span class="keyword">plugin</span> gitbook-<span class="keyword">plugin</span>-livereload ....OK</div><div class="line">info: &gt;&gt; <span class="number">5</span> plugins loaded</div><div class="line">info: <span class="keyword">start</span> generation <span class="keyword">with</span> website generator</div><div class="line">info: clean website generator</div><div class="line">info: OK</div><div class="line">info: generation <span class="keyword">is</span> finished</div><div class="line"></div><div class="line"><span class="keyword">Starting</span> <span class="keyword">server</span> ...</div><div class="line">Serving book <span class="keyword">on</span> <span class="keyword">http</span>://localhost:<span class="number">4000</span></div></pre></td></tr></table></figure>
<p>之后，你就可以使用浏览器打开 <code>http://127.0.0.1:4000</code> 查看效果了。就是这么简单。</p>
<p>页面效果如下:</p>
<p><img src="https://camo.githubusercontent.com/c1b6c55fca8e171120ce1fd73afcee699cc2a98f/68747470733a2f2f7261772e6769746875622e636f6d2f476974626f6f6b494f2f676974626f6f6b2f6d61737465722f707265766965772e706e67" alt="https://camo.githubusercontent.com/c1b6c55fca8e171120ce1fd73afcee699cc2a98f/68747470733a2f2f7261772e6769746875622e636f6d2f476974626f6f6b494f2f676974626f6f6b2f6d61737465722f707265766965772e706e67"></p>
<p>你可以尽情的使用 <code>Markdown</code> 来编写文章了，完全不需要关心样式和排版呢。</p>
<h2 id="GitBook-编辑器"><a href="#GitBook-编辑器" class="headerlink" title="GitBook 编辑器"></a>GitBook 编辑器</h2><p>如果你不喜欢使用命令行，这里也有 GitBook 可视化编辑器，<a href="https://www.gitbook.com/editor/" target="_blank" rel="external">https://www.gitbook.com/editor/</a></p>
<h2 id="GitBook-com"><a href="#GitBook-com" class="headerlink" title="GitBook.com"></a>GitBook.com</h2><p><a href="https://www.gitbook.com/" target="_blank" rel="external">GitBook.com</a> 是一个围绕 GitBook 发行书籍的社区，于 2014 年初创，GitBook.com 提供免费和付费的服务，而且免费账户就可以享受诸多服务，包括：</p>
<ul>
<li>1 本私有书籍</li>
<li>托管不限数量的公开书籍</li>
<li>售卖不限数量的书籍，并分享 80% 的书籍收入</li>
<li>不限数量的协作者</li>
<li>免费的在线书籍编辑器</li>
</ul>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ul>
<li><code>gitbook build</code>: 会生成相应的 HTML 文件供分发。</li>
<li><code>gitbook pdf</code>: 生成 PDF 文件</li>
<li><code>gitbook epub</code>: 生成 epub 文件</li>
<li><code>gitbook mobi</code>: 生成 mobi 文件</li>
</ul>
<h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h3><p>我们通过配置 <code>book.json</code> 文件来修改 <code>GitBook</code> 在编译书籍时的行为，例如：修改书籍的名称，显示效果等等。</p>
<p><code>GitBook</code> 在编译书籍的时候会读取书籍源码顶层目录中的 <code>book.json</code>，<code>book.json</code> 支持的具体配置请参考<a href="http://help.gitbook.com/format/configuration.html" target="_blank" rel="external">官方文档</a></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>你可以通过 <code>gitbook install</code> 命令来安装一些诸如 <a href="https://github.com/GitbookIO/plugin-disqus" target="_blank" rel="external">disqus</a>、<a href="https://github.com/citizenmatt/gitbook-plugin-multipart" target="_blank" rel="external">multipart</a> 这些实用的第三方插件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Modern book format and toolchain using Git and Markdown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是 GitBook 项目主页上对 GitBook 的定义。&lt;/p&gt;
&lt;p&gt;GitBook 是一个命令行工具。通过它，你能够使用 Git 和 Markdown 来编排书本。并且通过工具可以自动生成相应的 HTML、PDF 和 epub 格式的文件。&lt;/p&gt;
&lt;p&gt;总之，就是好用，好使，加好看。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具" scheme="http://blog.sqrtthree.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊 JS 中的『隐式类型转换』</title>
    <link href="http://blog.sqrtthree.com/2016/01/23/implicit-type-conversion/"/>
    <id>http://blog.sqrtthree.com/2016/01/23/implicit-type-conversion/</id>
    <published>2016-01-23T01:53:21.000Z</published>
    <updated>2016-01-23T01:53:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>类型转换还不行？还非得隐式？这是什么高级玩意？</p>
<p>废话不多说，我们先上一盘🌰，额，不对，先看一个例子吧。</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">3 </span>+ true</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>实际上在大多数编程语言中，都会认为上面这个表达式是错误的。因为布尔表达式与算术运算是不兼容的。尤其是在静态语言中，甚至不会被运行运行。即使是动态语言中，通常虽然可以让程序运行，但是会抛出一个异常。</p>
<p>然而，然而， Javascript 不仅运行程序能够正常运行，而且还会顺利地产生结果 4。Javascript 真的是对类型错误出奇的宽容啊。看起来很像是一件好事对不对？</p>
<p>基本上，在 Javascript 中，只有在一些极少数情况下才会因为类型错误而抛出一个异常。诸如: 调用非函数对象或者获取 null / undefined 的属性时。</p>
<p>但是在大多数情况下，Javascript 都是不会抛出异常的。这个『小婊砸』反而按照多种多样的转换协议偷偷的强制转换为她期望的值。诺，你看，还花样转换呢，真会玩嘛。这就是所谓的『隐式类型转换』。</p>
<p>那么，上面那个例子中，究竟是发生了什么样的转换方式呢？</p>
<p>首先，Javascript 这个『小婊砸』在遇到算数运算符(<code>-</code> 、<code>*</code> 、<code>/</code> 和 <code>%</code>)的时候会在运算之前将参与运算的双方转换成数字。</p>
<p>那么问题又来了，<code>true</code> 怎么就转换成数字了呢？实际上我们通过 <code>Number(true)</code> 就可以看到， <code>true</code> 转换为数字之后就是为 1，相反，<code>false</code> 转换为数字之后就对应为 0。</p>
<p>细心的你可能发现我在上面并没有提到 <code>+</code> 运算符，那是因为它更复杂。因为它既承担着数字相加，又肩负着字符串连接操作的重任。具体的行为取决于参数的类型。</p>
<p>但是，如果一个数字和一个字符串相加，会碰撞出什么样的火花呢？</p>
<p>显然 Javascript 这个『小婊砸』更偏爱字符串多一点，她会将数字(<code>toString()</code>)转换为字符串，然后执行字符串连接操作。</p>
<p>例如:</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"1"</span> + <span class="number">2</span>;    // <span class="string">"12"</span></div><div class="line"><span class="symbol">1 </span>+ <span class="string">"2"</span>;    // <span class="string">"12"</span></div></pre></td></tr></table></figure>
<p>但是，注意，Javascript 对操作顺序非常敏感，以至于会发生这样的事情:</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span>+ <span class="number">2</span> + <span class="string">"3"</span>;    // <span class="string">"33"</span></div></pre></td></tr></table></figure>
<p>因为加法运算是自左向右的，因此它等同于下面的表达式:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span> + <span class="number">2</span>) + <span class="string">"3"</span>;    <span class="comment">// "33"</span></div></pre></td></tr></table></figure>
<p>再来看这一个例子:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="number">1</span> == <span class="literal">true</span>) &#123;</div><div class="line">    alert(<span class="string">"true"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">"false"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相信你一定轻松的猜到了结果对不对？</p>
<p>但是，哼，你以为我的问题会这么简单么？那岂不是太小看你了。</p>
<p>我们都知道，Javascript 中，数字 <code>0</code> 为假，<code>非0</code> 均为真, 那么我想问的是，在上面的条件语句中，到底是 <code>1</code> 被隐式类型转换了呢还是 <code>true</code> 被隐式类型转换了呢？</p>
<p>实际上在条件判断运算 <code>==</code> 中的转换规则是这样的:</p>
<ol>
<li>如果比较的两者中有布尔值(Boolean)，会把 <code>Boolean</code> 先转换为对应的 Number，即 0 和 1，然后进行比较。</li>
<li>如果比较的双方中有一方为 <code>Number</code>，一方为 <code>String</code>时，会把 <code>String</code> 通过 <code>Number()</code> 方法转换为数字，然后进行比较。</li>
<li>如果比较的双方中有一方为 <code>Boolean</code>，一方为 <code>String</code>时，则会先将双方转换为数字，然后进行比较。</li>
<li>如果比较的双方中有一方为 <code>Number</code>，一方为<code>Object</code>时，则会调用 <code>valueOf</code> 方法将<code>Object</code>转换为数字，然后进行比较。</li>
</ol>
<p>例如:</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span>== &#123; valueOf: function() &#123;<span class="keyword">return</span> <span class="number">1</span>;&#125; &#125;    // true</div><div class="line"><span class="symbol">1 </span>+ &#123; valueOf: function() &#123;<span class="keyword">return</span> <span class="number">1</span>;&#125; &#125;    // <span class="number">2</span></div></pre></td></tr></table></figure>
<p>需要强调的是，在 Javascript 中，只有 <code>空字符串</code>、<code>数字0</code>、<code>false</code>、<code>null</code>、<code>undefined</code> 和 <code>NaN</code> 这 6 个值为假之外，其他所有的值均为真值。</p>
<p>说到 <code>NaN</code>，就不得不提一下 <code>isNaN()</code> 方法，<code>isNaN()</code> 方法自带隐式类型转换，该方法在测试其参数之前，会先调用 <code>Number()</code> 方法将其转换为数字。所以 <code>isNaN(&#39;1&#39;)</code> 这个语句中明明用一个字符串去测试，返回值仍然为 <code>false</code> 也就不足为怪了。</p>
<p>在 <code>+</code> 号运算中还有一种更复杂的情况，那就是数字/字符串和对象进行运算的时候，上面已经举例说明了数字和对象运算的情况，我们再来说一下字符串和对象运算的情况。</p>
<p>当字符串和对象进行 <code>+</code> 运算的时候，Javascript 会通过对象的 <code>toString()</code> 方法将其自身转换为字符串，然后进行连接操作。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"1"</span> + &#123; toString: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125; &#125;    <span class="comment">// "11"</span></div></pre></td></tr></table></figure>
<p>之所以说它特殊，是因为当一个对象同时包含 <code>toString()</code> 和 <code>valueOf()</code> 方法的时候，运算符 <code>+</code> 应该调用哪个方法并不明显(做字符串连接还是加法应该根据其参数类型，但是由于隐式类型转换的存在，类型并不显而易见。)，Javascript 会盲目的选择 <code>valueOf()</code> 方法而不是 <code>toString()</code> 来解决这个问题。这就意味着如果你打算对一个对象做字符串连接的操作，但结果却是……</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"Object CustomObj"</span>; &#125;,</div><div class="line">    valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Object: "</span> + obj);    <span class="comment">// "Object: 1"</span></div></pre></td></tr></table></figure>
<p>隐式类型转换会给我们造成很多麻烦，那么该怎么避免呢？</p>
<p>建议在所有使用条件判断的时候都使用全等运算符 <code>===</code> 来进行条件判断。全等运算符会先进行数据类型判断，并且不会发生隐式类型转换。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类型转换还不行？还非得隐式？这是什么高级玩意？&lt;/p&gt;
&lt;p&gt;废话不多说，我们先上一盘🌰，额，不对，先看一个例子吧。&lt;/p&gt;
&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;3 &lt;/span&gt;+ true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 开发者年度调查报告</title>
    <link href="http://blog.sqrtthree.com/2015/12/26/javascript-developer-survey-results/"/>
    <id>http://blog.sqrtthree.com/2015/12/26/javascript-developer-survey-results/</id>
    <published>2015-12-26T18:41:10.000Z</published>
    <updated>2015-12-26T18:41:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://ponyfoo.com/articles/javascript-developer-survey-results" target="_blank" rel="external">JavaScript Developer Survey Results</a></li>
<li>原文作者 : <a href="https://ponyfoo.com/" target="_blank" rel="external">ponyfoo</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/sqrthree" target="_blank" rel="external">sqrthree(根号三)</a></li>
<li>校对者: <a href="https://github.com/Zhangdroid" target="_blank" rel="external">Zhangdroid</a></li>
</ul>
</blockquote>
<p>截止目前有超过了 5000 人参与了(该次调查)，准确的说是 5350 人。我迫不及待的想要和大家分享一下这次调查的细节。在分享之前我想要感谢参与调查的每一个人。这是 Javascript 社区一个伟大的时刻，我对未来的事情感到无比激动。</p>
<a id="more"></a>
<p>我没有想到大家如此积极，下一次我一定会对版式做一些改进。换句话说，就是我会先将问卷调查放到 <a href="https://github.com/" target="_blank" rel="external">Github</a> 上，以便于在开始调查之前，社区有一到两周的时间来收集改进问题和选项。这样，我就可以得到更精确的结果，也可以避免出现诸如 “我很震惊你竟然没有包含 Emacs” 这样的抱怨。</p>
<p>现在，基于调查结果。我将保持中立的态度发表一下调查结果，这样你就可以得出自己的公正的结论。</p>
<h2 id="你写什么类型的-Javascript？"><a href="#你写什么类型的-Javascript？" class="headerlink" title="你写什么类型的 Javascript？"></a>你写什么类型的 Javascript？</h2><p>有高达 97.4% 的受访者用 Javascript 写 web 浏览器程序，其中有 37% 的受访者写移动端 web 程序。超过 3000 人(56.6%) 也写服务端的 Javascript。在这些参与调查者的人中间，有 5.5% 的人还在一些嵌入式环境中使用 Javascript，例如 Tessel 或 a Raspberry Pi (树莓派).</p>
<p>少数参与者表示他们也在其他一些地方使用 Javascript，尤其是在开发 CLI 和桌面应用方面。还有少数提到了 Pebble 和 Apple TV. 这些都归类在 <strong>Other</strong> 一类中，占总票数的 2.2%.</p>
<p><img src="https://i.imgur.com/c0q4LvI.png" alt="An screenshot of the percentages for the first question"></p>
<h2 id="你在哪里使用-Javascript？"><a href="#你在哪里使用-Javascript？" class="headerlink" title="你在哪里使用 Javascript？"></a>你在哪里使用 Javascript？</h2><p>不出所料地，有 94.9% 的参与者在工作中使用 Javascript，但是，统计中也有很大一部分(占总票数的 82.3%) 参与者也在其他项目中使用。其他的回复则包括了教学，好玩，和非盈利目的的使用。</p>
<p><img src="https://i.imgur.com/K5nSsyr.png" alt="An screenshot of the percentages for the second question"></p>
<h2 id="你写-Javascript-多长时间了？"><a href="#你写-Javascript-多长时间了？" class="headerlink" title="你写 Javascript 多长时间了？"></a>你写 Javascript 多长时间了？</h2><p>超过 33% 的受访者表示他们写 Javascript 代码已经超过了 6 年时间。除了这些人之外，有 5.2% 的人一年前开始写 Javascript 代码，12.4% 的人是两年前，还有 15.1% 的人是三年前。这说明在 5350 个投票者中，有 32.7% 的人是在近几年才开始写 Javascript 的。</p>
<p><img src="https://i.imgur.com/P5ev9fL.png" alt="An screenshot of the percentages for the third question"></p>
<h2 id="如果可以的话，你使用哪种-compile-to-JavaScript-编译为-JavaScript-的-语言？"><a href="#如果可以的话，你使用哪种-compile-to-JavaScript-编译为-JavaScript-的-语言？" class="headerlink" title="如果可以的话，你使用哪种 compile-to-JavaScript(编译为 JavaScript 的) 语言？"></a>如果可以的话，你使用哪种 compile-to-JavaScript(编译为 JavaScript 的) 语言？</h2><p>有高达 <strong>85%</strong> 的受访者表示他们使用 ES6 编译成 ES5。与此同时，有 15% 的人仍然使用 <code>CoffeeScript</code>，15.2% 的人使用 <code>TypeScript</code>，只有区区 1.1% 的人使用 <code>Dart</code>.</p>
<p>这是我想进一步探讨的问题之一，因为有 13.8% 的人选择了 <em>“Other”</em>，选择 <em>“Other”</em> 的绝大部分的回答是 <code>ClojureScript</code>, <code>elm</code>, <code>Flow</code>, 和 <code>JSX</code>.</p>
<p><img src="https://i.imgur.com/12mL6u6.png" alt="An screenshot of the percentages for the fourth question"></p>
<h2 id="你更喜欢哪一种-Javascript-编程风格？"><a href="#你更喜欢哪一种-Javascript-编程风格？" class="headerlink" title="你更喜欢哪一种 Javascript 编程风格？"></a>你更喜欢哪一种 Javascript 编程风格？</h2><p>回答这个问题的绝大多数开发者(79.9%)都选择了分号。相反，有 11% 的开发者指出更喜欢不使用分号。</p>
<p>逗号方面，44.9% 的开发者喜欢将逗号放在表达式的末尾，然而有 4.9% 的开发者喜欢先写逗号。</p>
<p>缩进方面，65.5% 的开发者更喜欢使用空格，然而有 29.1% 的开发者则更喜欢使用制表符(Tab)。</p>
<p><img src="https://i.imgur.com/xwFVmS1.png" alt="An screenshot of the percentages for the fifth question"></p>
<h2 id="你使用过-ES5-的哪些特性？"><a href="#你使用过-ES5-的哪些特性？" class="headerlink" title="你使用过 ES5 的哪些特性？"></a>你使用过 ES5 的哪些特性？</h2><p>79.2% 的受访者都使用过 <code>Array(数组)</code> 的一些实用的方法，76.3% 的开发者使用严格模式。30% 的开发者使用 <code>Object.create</code>，而使用过 getters 和 setters 的开发者仅占了 28%.</p>
<p><img src="https://i.imgur.com/W9pUOua.png" alt="An screenshot of the percentages for the sixth question"></p>
<h2 id="你使用过-ES6-的哪些特性？"><a href="#你使用过-ES6-的哪些特性？" class="headerlink" title="你使用过 ES6 的哪些特性？"></a>你使用过 ES6 的哪些特性？</h2><p>显然，在这些投票中，箭头函数是使用最多的 ES6 特性，占了 79.6%。在所有调查者中，Let 和 const 加在一起一共占了 77.8% 。promises 也有 74.4% 的开发者采用。不出所料，只有 4% 的参与者使用 proxies，只有 13.1% 的用户表示他们使用 symbols，同时有超过 30% 的人说他们使用 iterators.</p>
<p><img src="https://i.imgur.com/okcvuos.png" alt="An screenshot of the percentages for the seventh question"></p>
<h2 id="你写测试么？"><a href="#你写测试么？" class="headerlink" title="你写测试么？"></a>你写测试么？</h2><p>有 21.7% 的开发者表示他们从不写任何测试。大部分人偶尔写一些测试。34.8% 的人总是写测试。</p>
<p><img src="https://i.imgur.com/0C944YL.png" alt="An screenshot of the percentages for the eighth question"></p>
<h2 id="你运行持续集成测试吗？"><a href="#你运行持续集成测试吗？" class="headerlink" title="你运行持续集成测试吗？"></a>你运行持续集成测试吗？</h2><p>和 CI 类似，尽管许多人(超过40%)不使用 CI 服务器，但是差不多有 60% 的人表示在少数时间会使用 CI，其中有 32% 的人总是在 CI 服务器上运行测试代码。</p>
<p><img src="https://i.imgur.com/P04bJHG.png" alt="An screenshot of the percentages for the ninth question"></p>
<h2 id="你怎么运行测试代码？"><a href="#你怎么运行测试代码？" class="headerlink" title="你怎么运行测试代码？"></a>你怎么运行测试代码？</h2><p>59% 的开发者喜欢使用 PhantomJS 或是类似的工具来运行自动化浏览器测试。也有 51.3% 的开发者喜欢在 web 浏览器上手动运行测试。有 53.5% 的投票者会在服务器端进行自动化测试。</p>
<p><img src="https://i.imgur.com/v09gVdQ.png" alt="An screenshot of the percentages for the tenth question"></p>
<h2 id="你使用过哪个单元测试库？"><a href="#你使用过哪个单元测试库？" class="headerlink" title="你使用过哪个单元测试库？"></a>你使用过哪个单元测试库？</h2><p>似乎大部分投票者都使用 Mocha 或是 Jasmine 来运行他们的 Javascript 测试用例。而 Tape 收到了 9.8% 的选票。</p>
<p><img src="https://i.imgur.com/20nUzJu.png" alt="An screenshot of the percentages for the eleventh question"></p>
<h2 id="你使用过哪个代码质量检测工具？"><a href="#你使用过哪个代码质量检测工具？" class="headerlink" title="你使用过哪个代码质量检测工具？"></a>你使用过哪个代码质量检测工具？</h2><p>看起来受访者在 ESLint 和 JSHint之间分成了两派，但是 JSLint 还是有差不多 30% 的投票率，在这么多年之后势头还是惊人的强劲。</p>
<p><img src="https://i.imgur.com/RC8ePwr.png" alt="An screenshot of the percentages for the 12th question"></p>
<h2 id="你通过哪种方式来处理客户端依赖关系？"><a href="#你通过哪种方式来处理客户端依赖关系？" class="headerlink" title="你通过哪种方式来处理客户端依赖关系？"></a>你通过哪种方式来处理客户端依赖关系？</h2><p>npm 接管了客户端依赖管理系统的天下，有超过 60% 的投票就是证明它的方式。Bower 仍然有 20% 的观众，而通过下载和插入 <code>&lt;script&gt;</code> 标签来管理的普通旧式方法则获得了 13.7% 的选票。</p>
<p><img src="https://i.imgur.com/TOQiSZP.png" alt="An screenshot of the percentages for the 13th question"></p>
<h2 id="你首选的脚本构建方案是什么？"><a href="#你首选的脚本构建方案是什么？" class="headerlink" title="你首选的脚本构建方案是什么？"></a>你首选的脚本构建方案是什么？</h2><p>构建工具的选择很分散，部分原因是有太多的不同的选项可供选择。Gulp 最流行，有着超过 40% 的选票，紧接着的是使用 <code>npm run</code>，有 27.8%。Grunt 得到了 18.5% 的支持者。</p>
<p><img src="https://i.imgur.com/xXlEE3E.png" alt="An screenshot of the percentages for the 14th question"></p>
<h2 id="你首选的-JavaScript-模块加载工具是什么？"><a href="#你首选的-JavaScript-模块加载工具是什么？" class="headerlink" title="你首选的 JavaScript 模块加载工具是什么？"></a>你首选的 JavaScript 模块加载工具是什么？</h2><p>目前，看起来大部分开发者都在 Browserify 和 Webpack 之间徘徊，而后者高出了 7 个百分点。29% 的用户表示他们在使用前面提到的这两个工具打包他们的模块之前会先使用 Babel 进行转换。</p>
<p><img src="https://i.imgur.com/pQPMC7V.png" alt="An screenshot of the percentages for the 15th question"></p>
<h2 id="你使用过哪些库？"><a href="#你使用过哪些库？" class="headerlink" title="你使用过哪些库？"></a>你使用过哪些库？</h2><p>现在回顾起来，这是一个受益于协同编辑的问题之一。jQuery 获得了超过 50% 的选票证明了它的势头依然很强劲。在参与投票的 JavaScript 使用者中，Lodash 与 Underscore 也被很大一部分开发者使用。 <code>xhr</code> 微型库只获得了 8% 的票数。</p>
<p><img src="https://i.imgur.com/7jAwy05.png" alt="An screenshot of the percentages for the 16th question"></p>
<h2 id="你使用过哪些框架？"><a href="#你使用过哪些框架？" class="headerlink" title="你使用过哪些框架？"></a>你使用过哪些框架？</h2><p>毫无意外的，React 和 Angular 遥遥领先于其他框架，有着 22.8% 的 Backbone 仍然处在一个安全的位置。</p>
<p><img src="https://i.imgur.com/zpSAISK.png" alt="An screenshot of the percentages for the 17th question"></p>
<h2 id="你使用-ES6-吗？"><a href="#你使用-ES6-吗？" class="headerlink" title="你使用 ES6 吗？"></a>你使用 ES6 吗？</h2><p>受访者在这个问题上的反应相当分歧，有近 20% 的人几乎从不使用 ES6，超过 10% 的人只写 ES6，接近 30% 的人广泛使用 ES6，近 40% 的人偶尔使用。</p>
<p><img src="https://i.imgur.com/hAnbtfN.png" alt="An screenshot of the percentages for the 18th question"></p>
<h2 id="你知道在即将到来的-ES2016-中会有什么特性吗？"><a href="#你知道在即将到来的-ES2016-中会有什么特性吗？" class="headerlink" title="你知道在即将到来的 ES2016 中会有什么特性吗？"></a>你知道在即将到来的 ES2016 中会有什么特性吗？</h2><p>粗略地说，有超过一半的投票者表示不知道即将到来的 ES2016 中会有什么特性。另一半则对接下来的版本有所了解。</p>
<p><img src="https://i.imgur.com/DxxOnco.png" alt="An screenshot of the percentages for the 19th question"></p>
<h2 id="你了解-ES6-吗？"><a href="#你了解-ES6-吗？" class="headerlink" title="你了解 ES6 吗？"></a>你了解 ES6 吗？</h2><p>超过 60% 的受访者似乎了解基本的概念。10% 的人对 ES6 毫不了解，有 25% 的受访者认为他们非常了解 ES6。</p>
<p><img src="https://i.imgur.com/w6obK3X.png" alt="An screenshot of the percentages for the 20th question"></p>
<h2 id="你认为-ES6-是一个进步吗？"><a href="#你认为-ES6-是一个进步吗？" class="headerlink" title="你认为 ES6 是一个进步吗？"></a>你认为 ES6 是一个进步吗？</h2><p>超过 95% 的受访者认为 ES6 是对于 JavaScript 语言来说是一个进步，下一次碰到 TC39 的会员我得祝贺他们。</p>
<p><img src="https://i.imgur.com/c0RtfVK.png" alt="An screenshot of the percentages for the 21th question"></p>
<h2 id="你更喜欢什么文本编辑器？"><a href="#你更喜欢什么文本编辑器？" class="headerlink" title="你更喜欢什么文本编辑器？"></a>你更喜欢什么文本编辑器？</h2><p>再一次，由于存在各种各样的选择导致结果非常分散。超过一半的受访者喜欢 <a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a>，超过 30% 的受访者喜欢使用 <a href="https://atom.io/" target="_blank" rel="external">atom</a> 和 它的开源克隆版。超过 25% 的选票投给了 WebStorm，也有 25% 的选票投给了 vi/vim.</p>
<p><img src="https://i.imgur.com/Vt8ve7s.png" alt="An screenshot of the percentages for the 22th question"></p>
<h2 id="你更喜欢使用什么操作系统作为开发环境"><a href="#你更喜欢使用什么操作系统作为开发环境" class="headerlink" title="你更喜欢使用什么操作系统作为开发环境?"></a>你更喜欢使用什么操作系统作为开发环境?</h2><p>超过 60% 的投票者使用 Mac，使用 Linux 和 Windows 的用户都接近 20%。</p>
<p><img src="https://i.imgur.com/PmLbtAo.png" alt="An screenshot of the percentages for the 23th question"></p>
<h2 id="你是通过哪种方式搜索到可重用的代码、库和工具的？"><a href="#你是通过哪种方式搜索到可重用的代码、库和工具的？" class="headerlink" title="你是通过哪种方式搜索到可重用的代码、库和工具的？"></a>你是通过哪种方式搜索到可重用的代码、库和工具的？</h2><p>受访者似乎更青睐于 <a href="https://github.com" target="_blank" rel="external">GitHub</a> 和搜索引擎，但是也有一部分人使用博客，Twitter 和 npm 网站。</p>
<p><img src="https://i.imgur.com/HpmV9yz.png" alt="An screenshot of the percentages for the 24th question"></p>
<h2 id="你参加过-Javascript-的社交活动吗？"><a href="#你参加过-Javascript-的社交活动吗？" class="headerlink" title="你参加过 Javascript 的社交活动吗？"></a>你参加过 Javascript 的社交活动吗？</h2><p>有近 60% 的人参加过至少一次，74% 的人表示他们喜欢参加聚会。</p>
<p><img src="https://i.imgur.com/EnQWGzf.png" alt="An screenshot of the percentages for the 25th question"></p>
<h2 id="在你的-Javascript-应用中，你都支持哪些浏览器？"><a href="#在你的-Javascript-应用中，你都支持哪些浏览器？" class="headerlink" title="在你的 Javascript 应用中，你都支持哪些浏览器？"></a>在你的 Javascript 应用中，你都支持哪些浏览器？</h2><p>回答相当分散，但是好在大多数受访者表示他们不再处理使用 IE6 的客户(的问题)了。</p>
<p><img src="https://i.imgur.com/BV3eU0X.png" alt="An screenshot of the percentages for the 26th question"></p>
<h2 id="你会定期了解有关-Javascript-的最新特性吗？"><a href="#你会定期了解有关-Javascript-的最新特性吗？" class="headerlink" title="你会定期了解有关 Javascript 的最新特性吗？"></a>你会定期了解有关 Javascript 的最新特性吗？</h2><p>有 80% 的受访者会尝试实时了解并持续学习 Javascript 的最新特性。</p>
<p><img src="https://i.imgur.com/5TZUW2i.png" alt="An screenshot of the percentages for the 27th question"></p>
<h2 id="你在哪了解最新的-JavaScript-特性？"><a href="#你在哪了解最新的-JavaScript-特性？" class="headerlink" title="你在哪了解最新的 JavaScript 特性？"></a>你在哪了解最新的 JavaScript 特性？</h2><p>不出所料地，<a href="https://developer.mozilla.org/" target="_blank" rel="external">Mozilla 开发者网络</a> 在 Javascript 文档和新闻方面处于领先地位。<a href="http://javascriptweekly.com/" target="_blank" rel="external">JavaScript 周刊</a> 也是一个非常受欢迎的新闻和文章的直接来源，它有着超过 40% 的投票。</p>
<p><img src="https://i.imgur.com/7Jlg7zh.png" alt="An screenshot of the percentages for the 28th question"></p>
<h2 id="你听说过下面哪些新特性？"><a href="#你听说过下面哪些新特性？" class="headerlink" title="你听说过下面哪些新特性？"></a>你听说过下面哪些新特性？</h2><p>超过 85% 的人听说过 ServiceWorker，我很想知道这些人中有多少人使用过它。</p>
<p><img src="https://i.imgur.com/8o3Jq2R.png" alt="An screenshot of the percentages for the 29th question"></p>
<h2 id="除了-JavaScript，你还主要使用哪些语言？"><a href="#除了-JavaScript，你还主要使用哪些语言？" class="headerlink" title="除了 JavaScript，你还主要使用哪些语言？"></a>除了 JavaScript，你还主要使用哪些语言？</h2><p>这有太多的语言可供选择，我肯定会漏掉一些。但是结果不言自明。</p>
<p><img src="https://i.imgur.com/Tv9NciV.png" alt="An screenshot of the percentages for the 30th question"></p>
<h2 id="谢谢"><a href="#谢谢" class="headerlink" title="谢谢"></a>谢谢</h2><p>最后，我想感谢参与此次调查的每一个人。这次调查的受欢迎程度超出了我的预期，我很期待明年再进行一次类似的调查。我希望，那将会是一个更多样性的，也许会再少一点倾向性的调查。</p>
<p>你从这次调查中获得了什么呢？</p>
<blockquote>
<p>本文根据 <a href="https://ponyfoo.com/" target="_blank" rel="external">ponyfoo</a> 的《<a href="https://ponyfoo.com/articles/javascript-developer-survey-results" target="_blank" rel="external">JavaScript Developer Survey Results</a>》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="https://ponyfoo.com/articles/javascript-developer-survey-results" target="_blank" rel="external">https://ponyfoo.com/articles/javascript-developer-survey-results</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 : &lt;a href=&quot;https://ponyfoo.com/articles/javascript-developer-survey-results&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Developer Survey Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者 : &lt;a href=&quot;https://ponyfoo.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ponyfoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自 : &lt;a href=&quot;https://github.com/xitu/gold-miner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者 : &lt;a href=&quot;https://github.com/sqrthree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sqrthree(根号三)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;校对者: &lt;a href=&quot;https://github.com/Zhangdroid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zhangdroid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;截止目前有超过了 5000 人参与了(该次调查)，准确的说是 5350 人。我迫不及待的想要和大家分享一下这次调查的细节。在分享之前我想要感谢参与调查的每一个人。这是 Javascript 社区一个伟大的时刻，我对未来的事情感到无比激动。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>前端代码风格检查套件 FECS</title>
    <link href="http://blog.sqrtthree.com/2015/12/25/fecs/"/>
    <id>http://blog.sqrtthree.com/2015/12/25/fecs/</id>
    <published>2015-12-25T15:33:04.000Z</published>
    <updated>2015-12-25T15:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>All code in any code-base should look like a single person typed it, no matter how many people contributed. — idiomatic.js<br>在任一个代码库中，不管是多少人协同开发，所有的代码都应该看起来像是一个人写的。- idiomatic.js</p>
</blockquote>
<p>This means strictly enforcing these agreed upon guidelines at all times.</p>
<a id="more"></a>
<p>今天要讲的不是代码规范，关于代码规范网上已经有了非常好的实践和各大公司公开的实践指南，大家可自行查询。 例如: <a href="http://zoomzhao.github.io/code-guide/" target="_blank" rel="external">code-guide chinese</a>.</p>
<p>然而，有了规范是一回事，执行起来又是一回事。今天要介绍的就是一款按照指定风格检测代码是否符合规范的工具，通过工具的自动检测，以确保每一行代码都符合规范。</p>
<h2 id="FECS-是什么？"><a href="#FECS-是什么？" class="headerlink" title="FECS 是什么？"></a>FECS 是什么？</h2><p><a href="http://fecs.baidu.com/" target="_blank" rel="external">fecs</a> 是以百度前端代码规范为目标的基于 Node.js 的前端代码风格检测工具，套件内包括了 <code>htmlcs、csshint、lesslint</code> 和 <code>jformatter</code> 等工具。</p>
<p>因此，<code>fecs</code> 不仅能检查 <code>HTML/CSS/LESS/JavaScript</code> 代码的规范问题，而且还能修复代码的规范问题。</p>
<h2 id="FECS-能干什么？"><a href="#FECS-能干什么？" class="headerlink" title="FECS 能干什么？"></a>FECS 能干什么？</h2><h3 id="fecs-check"><a href="#fecs-check" class="headerlink" title="fecs check"></a>fecs check</h3><p>首先，主要功能就是代码格式的检查，当然了呢，因为是最初是供于百度内部使用的工具，自然就是以 <a href="https://github.com/ecomfe/spec/" target="_blank" rel="external">百度前端代码规范</a> 为首要目标，好在该规范第一开源，第二还不错，因此可以直接使用。</p>
<p>当然了，如果你不喜欢其中的某些规则，<code>FECS</code> 也是支持配置文件设置规则的方式的，具体的在下文说明。</p>
<p>需要说明的是，<code>FECS</code> 目前只支持 <code>HTML/CSS/LESS/JavaScript</code> 四种文件和语法的检测。</p>
<h4 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h4><p><code>Javascript</code> 方面 <code>FECS</code> 采用了 <code>eslint</code> 检测引擎，因此你在自定义规则的时候可以参考 <a href="http://esling.org/" target="_blank" rel="external">esling</a> 的文档进行相关配置。<code>FECS</code> 只是在 <code>eslint</code> 基础之上针对百度的代码规范作了新的规则实现或调整。详细内容见 <a href="https://github.com/ecomfe/fecs/wiki/FECSRules" target="_blank" rel="external">FECS 自有规则</a></p>
<h4 id="CSS-LESS-HTML"><a href="#CSS-LESS-HTML" class="headerlink" title="CSS/LESS/HTML"></a>CSS/LESS/HTML</h4><p>CSS 的 linter 是使用了内部优化过的 <code>csshint</code>。LESS 和 HTML 方面则分别使用了 <code>lesslint</code> 和 <code>htmlcs</code>。</p>
<h2 id="FECS-的安装及其使用"><a href="#FECS-的安装及其使用" class="headerlink" title="FECS 的安装及其使用"></a>FECS 的安装及其使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装 <code>FECS</code> 需要依赖 <code>node</code> <code>npm</code> 环境支持，执行以下命令即可安装:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> [sudo] npm install fecs -g</span></div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用方式可使用以下命令查看:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ fecs --help</div><div class="line">$ fecs<span class="built_in"> check </span>--help</div><div class="line">$ fecs format --help</div></pre></td></tr></table></figure>
<p>具体的命令参数？哎呀，官方已经写的够详细的了，还是看官方文档吧: <a href="https://github.com/ecomfe/fecs/wiki/CLI" target="_blank" rel="external">FECS 命令参数</a></p>
<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p><code>FECS</code> 支持通过配置文件的方式指定特定的规则。</p>
<p>配置文件的支持来自 <code>manis</code>，支持使用 <code>.fecsrc</code> 或 <code>package.json</code>，但以第一个找到的为准。配置文件 <code>.fecsrc</code> 大体是这个样子的:</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"files"</span>: [],</div><div class="line"></div><div class="line">    <span class="string">"eslint"</span>: <span class="meta">&#123;...&#125;</span>,</div><div class="line"></div><div class="line">    <span class="string">"csshint"</span>: <span class="meta">&#123;...&#125;</span>,</div><div class="line"></div><div class="line">    <span class="string">"htmlcs"</span>: <span class="meta">&#123;...&#125;</span>,</div><div class="line"></div><div class="line">    <span class="string">"csscomb"</span>: <span class="meta">&#123;...&#125;</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>比如说他们的<a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md" target="_blank" rel="external">JavaScript编码规范</a> 中关于换行中有这样一条 <a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#建议-对于-ifelsetrycatchfinally-等语句推荐使用在--号后添加一个换行-的风格使代码层次结构更清晰阅读性更好" target="_blank" rel="external">对于if…else…try…catch…finally 等语句，推荐使用在 } 号后添加一个换行的风格，使代码层次结构更清晰，阅读性更好</a>，这一条我就很不喜欢嘛，那我可以这样配置:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"eslint"</span>: &#123;</div><div class="line">        <span class="attr">"rules"</span>: &#123;</div><div class="line">            <span class="attr">"brace-style"</span>: [<span class="number">2</span>, <span class="string">"1tbs"</span>, &#123;&#125;]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样配置之后再进行检测，就能愉快的按照下面这种写法愉快的 coding 了。</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">condition</span>) &#123;</div><div class="line">    <span class="comment">// some statements;</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// some statements;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多工具支持"><a href="#多工具支持" class="headerlink" title="多工具支持"></a>多工具支持</h2><p>详情支持列表请参考官方文档 <a href="https://github.com/ecomfe/fecs#工具支持" target="_blank" rel="external">工具支持</a>。</p>
<p>嗯。文档依旧写的很完善，基本上已经没什么好补充的了。</p>
<p>在这里我有一个小提示，就是工具对 <code>atom</code> 编辑器的支持相对于对 <code>sublime</code> 的支持来说要优秀很多， 包括检测速度呀，错误提示呀，<code>atom</code> 都略称一筹，这取决于 <code>atom</code> 优秀的插件机制。并且我在 <code>sublime</code>下面使用的时候发现了一个 bug，就是错误提示会显示为特殊编码导致无法以中文显示。解决方案呢，在这里<a href="https://github.com/leeight/Baidu-FE-Code-Style/issues/6" target="_blank" rel="external">https://github.com/leeight/Baidu-FE-Code-Style/issues/6</a>，不过感觉略麻烦的样子。</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><p><code>FECS</code> 的错误报告默认为英文格式，由各 linter 直接提供。<code>FECS</code> 根据百度前端代码规范，作了一次影射转换，通过指定 reporter 为 baidu 可以看到中文的报告输出效果，对于某些比较抽象的描述，会同时在括号内提供英文原文补充说明。</p>
<p>例如，你可以这样用:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fecs<span class="built_in"> check </span>--reporter=baidu</div></pre></td></tr></table></figure>
<p>或者，更直接一点，直接添加一个 <code>alias</code>，使其在执行 <code>fecs check</code> 命令时默认为中文输出。</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> fecs=<span class="symbol">'fecs</span> <span class="comment">--reporter=baidu'</span></div></pre></td></tr></table></figure>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接:"></a>相关链接:</h2><ul>
<li><a href="http://fecs.baidu.com/" target="_blank" rel="external">FECS 官网</a></li>
<li><a href="http://github.com/ecomfe/fecs/wiki" target="_blank" rel="external">FECS WIKI</a></li>
<li><a href="http://github.com/ecomfe/fecs" target="_blank" rel="external">FECS Github</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;All code in any code-base should look like a single person typed it, no matter how many people contributed. — idiomatic.js&lt;br&gt;在任一个代码库中，不管是多少人协同开发，所有的代码都应该看起来像是一个人写的。- idiomatic.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means strictly enforcing these agreed upon guidelines at all times.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>jQuery 3.0 以及兼容版的 Alpha 版本发布</title>
    <link href="http://blog.sqrtthree.com/2015/11/12/jQuery3-0-Alpha-Versions-Released/"/>
    <id>http://blog.sqrtthree.com/2015/11/12/jQuery3-0-Alpha-Versions-Released/</id>
    <published>2015-11-12T00:14:23.000Z</published>
    <updated>2015-11-12T00:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>从我们做出上一个重大的版本发布已经过去很长时间了，所以你理应再得到一个新版本。因此我们非常高兴的宣布 <code>jQuery 3.0</code> 的第一个 <code>alpha</code> 版本的发布。</p>
<a id="more"></a>
<p>尽管版本号已经到了 3.0，但是在升级目前已经存在的代码时，可以预期这些发布不会造成太多的麻烦。确实，只是一些用来调整重要版本冲突的零碎改变，但是我们希望这些改变不会实际影响到很多人。<code>jQuery Migrate</code> 插件可以很好的帮助你在你的代码中识别出兼容性问题。在这个 <code>alpha</code> 版本中，你针对于这些变化的反馈将会极大的帮助我们，所以请在你目前已有的代码和插件中尝试一下。</p>
<p>实际上，这里有两个版本。第一个版本是 <code>jQuery 3.0</code>, 这个版本支持现代浏览器和 <code>IE9</code> 以后的浏览器环境。第二个版本是 <code>jQuery Compat 3.0</code>，这个支持 <code>IE8</code>。作为一个额外的福利，就是 <code>jQuery</code> 和 <code>jQuery Compat</code> 这两个版本都支持 Yandex 浏览器(一个2012年发布的免费软件)。你可以从 jQuery CDN 或者直接通过下面这些链接获取这两个文件。</p>
<p><a href="https://code.jquery.com/jquery-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0-alpha1.js</a></p>
<p><a href="https://code.jquery.com/jquery-compat-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-compat-3.0.0-alpha1.js</a></p>
<p>你也可以从 <code>npm</code> 中获取 alpha 版:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">jquery</span>@<span class="keyword">3</span>.<span class="keyword">0</span>.<span class="keyword">0</span>-<span class="keyword">alpha1</span></div><div class="line"></div><div class="line"><span class="keyword">npm</span> install jquery-compat@<span class="number">3.0</span>.<span class="number">0</span>-alpha1</div></pre></td></tr></table></figure>
<h4 id="Major-changes-主要的变化"><a href="#Major-changes-主要的变化" class="headerlink" title="Major changes (主要的变化)"></a>Major changes (主要的变化)</h4><p>下面的这些内容只是高亮了这个版本中一些重要的新特性，代码的改进，还有一些 bug 的修复。在这篇文章下面和我们的 GitHub issue tracker 板块你可以看到一个完整的改变清单。在 Github 上，你还可以看到我们期待在下个 beta 版本和暂时还没发布的最终版中添加的新特性。</p>
<h5 id="Simplified-show-and-hide-methods-简化的-show-和-hide-方法"><a href="#Simplified-show-and-hide-methods-简化的-show-和-hide-方法" class="headerlink" title="Simplified .show() and .hide() methods: 简化的 show 和 hide 方法"></a>Simplified <code>.show()</code> and <code>.hide()</code> methods: 简化的 show 和 hide 方法</h5><p>每个人的心中都认为 <code>jQuery</code> 中的 <code>.hide()</code> 方法就是把元素设置为 <code>display:none</code>，相反的，<code>.show()</code> 方法就是清除 <code>display</code> 因此元素会重新显示(假设父级元素没有被隐藏)。很简单，对么？</p>
<p>不，这么多年来，实际上有很多复杂特殊的例子，人们要求我们去修正一下，这些例子使得这些方法陷入一个复杂的原理集合之中。例如，如果一个元素在样式表中设置为 <code>display: none</code> 将会怎样？<code>jQuery</code> 会试着在元素上强制设置 <code>display: block</code> 去覆盖它。这是可以的。但是像 <code>&lt;li&gt;</code> 这样的一个正常的块元素通过不同的样式规则被设置为 <code>display: inline</code> 会怎么样呢？在一个元素被添加到 <code>document</code> 之前你调用了这个方法并且我们不知道这个元素拥有的 <code>display</code> 值的话又会怎样？确定这些事情需要花费额外的工作。有时仅仅是一个最后被证明是错误的猜想。</p>
<p>这些方法在元素上添加一个样式属性之后，在像是响应式设计中(元素的可见性需要通过媒体查询来设置)这样的技术上往往不能很好的表现。这个导致需要 <code>jQuery</code> 处理器去监听 <code>orientationchange</code> 或 <code>resize</code> 事件人工隐藏或显示部分页面；jQuery 打败了媒体查询正尝试实现的优雅的解决方案。</p>
<p>你可以看到 <code>jQuery</code> 已经完成了疯狂旅途中的一半路程了，但是完成整个旅程是行不通的。这个特殊的情况以及检查不仅复杂且难以完成，而且在大的页面中会造成具有重大意义的性能问题。</p>
<p>因此，代替的是，我们实验性的反抗这些方法的演变，重新回归到一个简洁的，原始的模型。这将会分解一些代码。如果一个元素在样式表中被设置为 <code>display: none</code>，<code>.show()</code> 方法将不会再覆盖它。因此，转移到 jQuery 3.0 中有一个最重要的规则就是: 不要使用样式去设置 <code>display: none</code> 作为默认值，然后使用 <code>.show()</code> 或者其他方法来显示元素，例如使用 <code>.slideDown()</code> 和 <code>.fadeIn()</code> 方法来使它可见。</p>
<p>如果你需要让一个元素默认是隐藏状态，最好的方法是给元素添加一个像 <code>hidden</code> 这样的类名，然后在样式中去定义这个类为 <code>display: none</code>，然后你可以使用 <code>jQuery</code> 的 <code>.addClass()</code> 和 <code>.removeClass()</code> 方法来添加或删除这个类来控制其可见性。另外一种方法是，你可以在元素显示到页面中之前，使用 <code>.ready()</code> 处理器并在其中调用 <code>.hide()</code> 方法。或者，如果你一定要在样式中保留默认值，你可以使用 <code>.css(&quot;display&quot;, &quot;block&quot;)</code> (或其他合适的值)去覆盖样式。</p>
<p>我们知道这可能是 <code>jQuery 3.0</code> 中最受争议和最困难的改变，所以我们想把它放到这个早期版本中观察一下所造成的影响。请让我们知道这些改变如何影响了你的代码，以及你为了使用这个新版本所作出的改变。</p>
<p><a href="https://github.com/jquery/jquery/issues/1767" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1767</a><br><a href="https://github.com/jquery/jquery/issues/2057" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2057</a><br><a href="https://github.com/jquery/jquery/issues/2308" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2308</a></p>
<h5 id="Special-case-with-data-names-含有-data-名字的特殊事例"><a href="#Special-case-with-data-names-含有-data-名字的特殊事例" class="headerlink" title="Special case with .data() names: 含有.data()名字的特殊事例"></a>Special case with .data() names: 含有.data()名字的特殊事例</h5><p><a href="https://github.com/jquery/jquery/issues/1751" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1751</a></p>
<p>我们也更新了我们的 <code>.data()</code> 方法来更有效的匹配 HTML5 dataset specification. 所有的键值现在都从 kebab-case 转换成驼峰命名法，不再理会访问方式，数字也不再参与转换。例如: 我们不再区分 <code>foo-bar</code> 和 <code>fooBar</code>，但是仍然区分 <code>foo-42</code> 和 <code>foo42</code>。当通过调用无参数的 <code>.data()</code> 来取得所有的数据方法，或者尝试通过转换的键名(.data(“foo42”))而不是原始的(.data(“foo-42”))来获取数据时，这些改变将会发挥主要作用。</p>
<h5 id="jQuery-Deferred-is-now-Promises-A-compatible-jQuery-Deferred现在兼容Promises-A"><a href="#jQuery-Deferred-is-now-Promises-A-compatible-jQuery-Deferred现在兼容Promises-A" class="headerlink" title="jQuery.Deferred is now Promises/A+ compatible: jQuery.Deferred现在兼容Promises/A+"></a>jQuery.Deferred is now Promises/A+ compatible: jQuery.Deferred现在兼容Promises/A+</h5><p><code>jQuery.Deferred</code> 对象为了兼容 <code>Promises/A+</code> 和 <code>ES2015 Promises</code> 已经做出了更新，Promises/A+ Compliance Test Suite 检验。这意味着 引入一个 <code>.catch()</code> 方法，<code>.then()</code>方法也有一些重要的改变。</p>
<ul>
<li><code>.then()</code> 方法的回调函数中抛出的异常现在变成了一个可注入的值。以前，异常会一直往上冒泡，直至终止回调函数的执行，然后不可撤销的锁定 parent and child Deferred 对象。</li>
<li>通过 <code>.then()</code> 方法创建的 Deferred 对象的 resolution 状态现在被它的回调函数控制——异常成为了注入值，并且 non-thenable 返回的结果成为了 fulfillment 值。以前，从注入处理器返回变成了注入值。</li>
<li>回调函数总是被异步调用。以前，它们根据绑定或是 resolution 被立即调用，无论哪个更晚一些。</li>
<li>Progress 回调函数不再解决受约束的 Deferred 对象。</li>
</ul>
<p>考虑一下下面的代码，哪个parent Deferred 被注入以及 child 回调函数产生异常:</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">parent</span> = jQuery.Deferred();</div><div class="line"><span class="keyword">var</span> child = <span class="built_in">parent</span>.then( <span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"bar"</span>;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params"> state </span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( state, value );</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"baz"</span> );</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> grandchildren = [</div><div class="line">  child.then( callback( <span class="string">"fulfilled"</span> ), callback( <span class="string">"rejected"</span> ) ),</div><div class="line">  child.then( callback( <span class="string">"fulfilled"</span> ), callback( <span class="string">"rejected"</span> ) )</div><div class="line">];</div><div class="line"><span class="built_in">parent</span>.reject( <span class="string">"foo"</span> );</div><div class="line"><span class="built_in">console</span>.log( <span class="string">"parent resolved"</span> );</div></pre></td></tr></table></figure>
<p>在 jQuery 3.0 中，在调用任何回调之前会先记录 “parent resolved”，每一个子回调将会记录 “fulfilled bar”， 然后 grandchildren 将会和错误 “baz” 一起注入。在之前的版本中，会记录一次 “rejected bar” (child Deferred 已经注入而不是fulfilled)然后通过未捕获到的错误 “baz” 中断(“parent resolved” 不会被记录并且 grandchildren 会保持 unresolved 状态)。</p>
<p>当捕获异常时有利于在浏览器中进行 debug, 使用注入回调来处理异常非常具有描述性(即显式的)。记住这个地方，你有责任在使用 promises 时总是添加至少一个注入回调，否则，任何错误都不会提示。</p>
<p>Legacy 行为可以通过使用现在还不宜用的 <code>.pipe()</code> 方法替换 <code>.then()</code> 方法来重新获取，</p>
<p><code>jQuery.when</code> 方法也为了接受任何 thenable 对象而更新了，包括了原生的Promise对象。</p>
<p><a href="https://github.com/jquery/jquery/issues/1722" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1722</a><br><a href="https://github.com/jquery/jquery/issues/2102" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2102</a></p>
<h5 id="Removed-special-case-Deferred-methods-in-jQuery-ajax-移除了jQuery-ajax中Deferred方法的一些特殊情况"><a href="#Removed-special-case-Deferred-methods-in-jQuery-ajax-移除了jQuery-ajax中Deferred方法的一些特殊情况" class="headerlink" title="Removed special-case Deferred methods in jQuery.ajax: 移除了jQuery.ajax中Deferred方法的一些特殊情况"></a>Removed special-case Deferred methods in jQuery.ajax: 移除了jQuery.ajax中Deferred方法的一些特殊情况</h5><p>jqXHR 对象是一个Promise，但是也有像 <code>.abort()</code> 这样的额外的方法。因此你可以在创建之后停止一个请求。</p>
<p>随着用户越来越拥护类似像 AJAX 这样异步执行的 Promise 模式，通过 jQuery.ajax 进行 Promise 返回特殊事例的想法是越来越坏的主意。</p>
<p>success, error, complete<br>done, fail, always</p>
<p>注意，这些对于相同名字的回调函数没有任何影响，它们将会继续存在，而且不会被弃用。这个只会影响Promise 方法！</p>
<p><a href="https://github.com/jquery/jquery/issues/2084" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2084</a></p>
<h5 id="Error-cases-don’t-silently-fail-错误事例不会默默地失败"><a href="#Error-cases-don’t-silently-fail-错误事例不会默默地失败" class="headerlink" title="Error cases don’t silently fail: 错误事例不会默默地失败"></a>Error cases don’t silently fail: 错误事例不会默默地失败</h5><p>也许在一个重要的时刻你会想知道，“窗口的偏移量是多少？” 然后你可能会意识到这是一个疯狂的问题 - 窗口怎么会有偏移量？</p>
<p>在过去，jQuery 有时会尝试去创建类似返回一些东西的事例而不是抛出一个错误。在这个询问窗口的偏移量的特殊事例中，到目前为止答案已经变成了 <code>{ top: 0, left: 0 }</code>，在 <code>jQuery 3.0</code> 的 <code>alpha</code> 版本中，我们正在尝试抛出一个错误来让这些疯狂的请求不至于被默默地忽略掉这样的想法。请尝试使用 <code>alpha</code> 版本看一下是否存在一些依赖 <code>jQuery</code> 的代码出现无效输入的问题。</p>
<p><a href="https://github.com/jquery/jquery/issues/1784" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1784</a></p>
<p><code>.width()</code>, <code>.height()</code>, <code>.css(“width”)</code>, 和 <code>.css(“height”)</code> 方法将返回带有小数点的数值(不论何时浏览器都会这样做)。</p>
<p>以前，当你获取  width 和 height 的时候 <code>jQuery</code> 会对其进行取整。有一些浏览器会返回亚像素值 - 例如 IE 和 Firefox，并且有时当布局依赖这些值时用户需要这种精确度的值。我们不希望这些改变会对你的代码产生很大的影响，但是如果确实影响到了，请让我们知道。</p>
<p><a href="https://github.com/jquery/jquery/issues/1724" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1724</a></p>
<h5 id="Removed-deprecated-event-aliases-移除不赞成使用的事件别名"><a href="#Removed-deprecated-event-aliases-移除不赞成使用的事件别名" class="headerlink" title="Removed deprecated event aliases: 移除不赞成使用的事件别名"></a>Removed deprecated event aliases: 移除不赞成使用的事件别名</h5><p><code>.load</code>, <code>.unload</code>, 和 <code>.error</code>, 这些方法自从 <code>jQuery 1.8</code> 就已经弃用，而且永不使用。使用 <code>.on()</code> 注册监听器</p>
<p><a href="https://github.com/jquery/jquery/issues/2286" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2286</a></p>
<p><code>jQuery.swap</code>, <code>jQuery.buildFragment</code>, 和 <code>jQuery.domManip</code> 不再从 <code>jQuery</code> 对象上获取。</p>
<p>这些方法常常仅在内部使用，而且也从来没有文档说明。为了避免疑惑，我们最终决定将他们私有化。</p>
<p><a href="https://github.com/jquery/jquery/issues/2224" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2224</a><br><a href="https://github.com/jquery/jquery/issues/2225" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2225</a></p>
<h5 id="Animations-now-use-requestAnimationFrame-动画现在使用requestAnimationFrame"><a href="#Animations-now-use-requestAnimationFrame-动画现在使用requestAnimationFrame" class="headerlink" title="Animations now use requestAnimationFrame:动画现在使用requestAnimationFrame"></a>Animations now use requestAnimationFrame:动画现在使用requestAnimationFrame</h5><p>除了 <code>IE8</code> 和 <code>IE9</code> 之外，越来越多的平台都支持 <code>requestAnimationFrame</code> API，<code>jQuery</code> 现在在执行动画的时候也使用了此 API。这样的结果是会让动画越来平滑流畅，并且使用更少的 CPU 时间，在移动设备上也尽可能好的保存电量。</p>
<p><code>jQuery</code> 尝试使用 <code>requestAnimationFrame</code> 了一些年头，但是在目前的代码中有一些很严重的兼容性问题，因此我们又把它撤销回去了。我们认为我们通过当浏览器标签页移出视野时暂停动画这种方式已经解决了这些问题中的大多数。然而，在真实的运行时环境中，任何依赖于动画的代码一直运行是一个不切实际的假想。</p>
<h5 id="unwrap-selector"><a href="#unwrap-selector" class="headerlink" title=".unwrap( selector )"></a>.unwrap( selector )</h5><p>在 <code>jQuery 3.0</code> 之前，<code>.unwrap()</code> 方法不接收任何参数。selector 参数提供了一个确定哪个包装器该被移出的方式。</p>
<p><a href="https://github.com/jquery/jquery/issues/1744" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1744</a></p>
<h5 id="Massive-speedups-for-some-jQuery-custom-selectors"><a href="#Massive-speedups-for-some-jQuery-custom-selectors" class="headerlink" title="Massive speedups for some jQuery custom selectors"></a>Massive speedups for some jQuery custom selectors</h5><p>感谢来自 Google 的 Paul Irish 所做出的一些排查工作，我们才可以识别出我们可以跳过的一些额外工作，像是 <code>:visible</code> 这样的常规的选择器在一个文档中使用好多次。特定的事例中现在在性能上能比以前快 17 倍。</p>
<p>记住，即使这些事情改善了，像是 <code>:visible</code> 和 <code>:hidden</code> 这样的选择器也是很昂贵的，因为它们依赖于浏览器来决定什么时候元素确实显示在页面上。可能需要的是，在最差的情况中，CSS 样式和页面布局需要完整的重绘。尽管在大多数情况下我们不阻止使用他们，但是我们推荐你在你的页面上测试一下来确定这些选择器是否会造成一些性能问题。</p>
<p><a href="https://github.com/jquery/jquery/issues/2042" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2042</a></p>
<h5 id="译者注"><a href="#译者注" class="headerlink" title="译者注:"></a>译者注:</h5><p>具体的更新内容列表没有在此翻译，如果想具体了解请自行查看英文原文。</p>
<blockquote>
<p>本文根据 <a href="http://blog.jquery.com/author/timmywil/" target="_blank" rel="external">Timmy Willison</a> 的《jQuery 3.0 and jQuery Compat 3.0 Alpha Versions Released》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://blog.jquery.com/2015/07/13/jquery-3-0-and-jquery-compat-3-0-alpha-versions-released/" target="_blank" rel="external">http://blog.jquery.com/2015/07/13/jquery-3-0-and-jquery-compat-3-0-alpha-versions-released/</a></p>
</blockquote>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li>jQuery 3.0.0-alpha1: <a href="https://code.jquery.com/jquery-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0-alpha1.js</a></li>
<li>jQuery compat 3.0.0-alpha1: <a href="https://code.jquery.com/jquery-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0-alpha1.js</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从我们做出上一个重大的版本发布已经过去很长时间了，所以你理应再得到一个新版本。因此我们非常高兴的宣布 &lt;code&gt;jQuery 3.0&lt;/code&gt; 的第一个 &lt;code&gt;alpha&lt;/code&gt; 版本的发布。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="jQuery3.0" scheme="http://blog.sqrtthree.com/tags/jQuery3-0/"/>
    
  </entry>
  
  <entry>
    <title>My Code Wars v0.1</title>
    <link href="http://blog.sqrtthree.com/2015/11/06/myCodeWars-01/"/>
    <id>http://blog.sqrtthree.com/2015/11/06/myCodeWars-01/</id>
    <published>2015-11-06T10:04:46.000Z</published>
    <updated>2015-11-06T10:04:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这里讲述的是一个8级（kyu）菜鸟立志成为8段（dan）大神的故事。故事的起因是这样的。菜鸟有幸发现了<a href="http://www.codewars.com/" title="codewars" target="_blank" rel="external">codewars</a>这个网站，从此沉迷于内一发不可收拾，他在代码战争中一次次遭遇挫败，又一次次爬起来继续跌倒下去。欲知详情，且看『迈向7级的第一个脚印』。</p>
<p>遥想当年自高自大，而今终知天外有天。</p>
</blockquote>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p>The numberOfOccurrences function must return the number of occurrences of an element in an array.</p>
<a id="more"></a>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">arr.numberOfOccurrences(<span class="number">0</span>) === <span class="number">1</span>;</div><div class="line">arr.numberOfOccurrences(<span class="number">4</span>) === <span class="number">0</span>;</div><div class="line">arr.numberOfOccurrences(<span class="number">2</span>) === <span class="number">2</span>;</div><div class="line">arr.numberOfOccurrences(<span class="string">"a"</span>) === <span class="number">0</span>;</div></pre></td></tr></table></figure>
<h3 id="菜鸟出招"><a href="#菜鸟出招" class="headerlink" title="菜鸟出招"></a>菜鸟出招</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.numberOfOccurrences = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>[i] == num) &#123;</div><div class="line">            total++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> total;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="菜鸟思维"><a href="#菜鸟思维" class="headerlink" title="菜鸟思维"></a>菜鸟思维</h3><ol>
<li>利用数组遍历</li>
<li>如果数值相等则加1</li>
<li>返回标记总数的变量</li>
</ol>
<h3 id="偷师学艺"><a href="#偷师学艺" class="headerlink" title="偷师学艺"></a>偷师学艺</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.numberOfOccurrences = <span class="function"><span class="keyword">function</span>(<span class="params">search</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> search === num</div><div class="line">    &#125;).length;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="关键字积累"><a href="#关键字积累" class="headerlink" title="关键字积累"></a>关键字积累</h3><ul>
<li>prototype</li>
<li>filter</li>
</ul>
<h3 id="菜鸟总结"><a href="#菜鸟总结" class="headerlink" title="菜鸟总结"></a>菜鸟总结</h3><p><code>filter()</code>是 <code>ECMAScirpt 5</code> 中规定的数组方法，返回的数组元素是调用的数组的一个子集。传递的函数是用来逻辑判定的：该函数返回 <code>true</code> 或是 <code>false</code>。如果返回值为 <code>true</code> 或是能转化为 <code>true</code> 的值，那么传递给判定函数的元素就是这个子集的成员，它将被添加到一个作为返回值的的数组中。</p>
<p><code>filter()</code> 会跳过稀疏数组中缺少的元素，它的返回值总是稠密的。为了压缩稀疏数组的空缺，代码如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dense = sparse.filter(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果压缩空缺并删除 <code>undefined</code> 和<code>null</code>元素，代码如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = a.filter(<span class="function"><span class="keyword">function</span><span class="params">(x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x !== <span class="literal">undefined</span> &amp;&amp; x !== <span class="literal">null</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      这里记录了我在 codewars 网站上的一些收获。
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="myCodeWars" scheme="http://blog.sqrtthree.com/tags/myCodeWars/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 3.0——下一代的jQuery</title>
    <link href="http://blog.sqrtthree.com/2015/11/05/jquery3-the-next-generations/"/>
    <id>http://blog.sqrtthree.com/2015/11/05/jquery3-the-next-generations/</id>
    <published>2015-11-05T11:42:00.000Z</published>
    <updated>2015-11-05T11:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>2014年10月29日，jQuery 官方博客上更新了一篇博文，描述了关于下一代 jQuery 的一些信息。实际上这篇博文至今都已经一年时间了，jQuery 官方团队也早在2015年7月13日发布了 <code>jQuery 3.0.0-alpha1</code> 版本。我之前也只是匆匆的看过一遍，今日闲着无事，就尝试翻译了一下并发布了这篇迟到了一年的译版，想要了解 <code>3.0</code> 中的新特性的话可以关注我后续的更新。</p>
<a id="more"></a>
<h3 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h3><p>很难相信从 <code>jQuery</code> 发布以来已经过去八年了，过去的这些年 Web 开发已经改变了很多， <code>jQuery</code> 也随之变化着。在这个过程中，团队一直在保持对旧代码的兼容性和支持目前最好的 Web 开发实践之间努力平衡着。</p>
<p>其中最好的做法就是语义化版本，或者简单的称之为 <a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">semver</a>，从实践的角度看，<a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">semver</a> 给了开发者(以及构建工具) 一个避免由于切换软件版本导致的风险的方法。版本号为 <code>MAJOR.MINOR.PATCH</code> 的格式，并且其三个组成部分均为整数。在<a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">semver</a> 中，如果 <code>MAJOR</code> 改变了，就意味着在 API 中出现了不兼容的改变，因此开发者们需要当心。</p>
<p>在 <code>jQuery</code> 中版本控制变得更加微妙，(对 jQuery 来说) 浏览器的兼容性和 API 的兼容性同等重要。为了创造一个 “苗条” 的 <code>jQuery</code> ，团队在2013年开始放出了两个版本。第一个版本保持着 1.x 的编号，当前(截止到原文发布时)最新版本为 1.11.1，其保持了最大数量的浏览器兼容性。第二个版本从 2.0.0 开始，目前是 2.1.1，为了精简代码，放弃了对 IE8及其以下版本浏览器的支持。1.x 和 2.x 版本的  <code>jQuery</code> 都有着相同的公开 API，尽管他们在内部实现上有一些不同。</p>
<p>我们的下一个版本将会使用一种全新的命名方式。像之前一样，仍然会有两个不同的发布文件。现在的 <code>1.11.1</code> 版本的继任者将被称之为 <code>jQuery Compat 3.0</code>。<code>jQuery 2.1.1</code> 则将由 <code>jQuery 3.0</code>来接替。在 <code>npm</code> 和 <code>Bower</code> 上(译者注: 这是目前非常流行的前端包管理工具)，它们会是两个不同的包，但它们会共享同一个版本号，来说明它们在API层面上的行为是一致的。</p>
<p>这次版本发布之后，我们也将调整对浏览器的支持策略。主 <code>jQuery</code> 包将继续保持短小精悍，并且只支持在发布之时广泛使用的常青浏览器(evergreen browsers 指的是特定浏览器的当前和此前的若干版本)。我们也会根据市场份额在这个包的基础上支持更多的浏览器。而 <code>jQuery Compat</code> 包则提供更广泛的浏览器支持，但是付出的代价就是文件变得很大，执行效率也会低一些。</p>
<p>尽管这一次版本号跳跃很大，但是对于大多数 <code>jQuery</code> 代码来说，我们不期望造成很多的代码迁移问题。我们在这次版本升级中可是符合 <code>semver</code> 中的好公民的标准的。诸如像移除已废弃的方法这样的改变会被新版本的 <code>jQuery Migrate</code> 插件检测出来，这样一来，发现并且修复他们就变得容易多了。我们也会在将来的博客文章中讨论这些变化中的更多细节。</p>
<p>下面就是一些 <code>jQuery API</code> 3.0 版本要说的内容：</p>
<ul>
<li>如果你需要支持更多更广泛的浏览器，包括诸如 <code>IE8, Opera 12, Safari 5</code> 等，请使用 <code>jQuery-Compat 3.0.0</code> 版本。我们建议大多数网站都使用这一版本，因为它为网站的来访者提供了最好的兼容性支持。</li>
<li>如果你的网站仅仅是为了那些最先进的浏览器而建，或者仅仅是一个基于 <code>HTML</code> 的应用以嵌入一个 <code>web</code> 视图(例如: PhoneGap，Cordova)，你预先知道其使用的是哪一个浏览器解析引擎， 那就使用 <code>jQuery 3.0.0</code> 吧。</li>
<li>除非我们宣布，否则对应的主、次版本号相同的两个包都会有相同的公开 API。这样开发者就能够很容易的在两个包之间切换，并且在第三方 <code>jQuery</code> 插件中拥有最好的兼容性。</li>
</ul>
<p>未来每一个版本发布的时候，我们都会同时放到 <code>npm</code> 和 <code>bower</code> 上。两个包也会以单个文件的形式在 <code>jQuery CDN</code> 上提供。在那里使用他们和根据你自己的需要去包含 <code>jquery-compat-3.0.0.js</code> 或<code>jquery-3.0.0.js</code> 一样简便。我们也和 Google’s CDN 的运营人员谈过，他们也会为这两个包提供支持。</p>
<p>随着我们在3.0版本方面工作的推进，我们会向所有人告知代码变更、浏览器支持等一切细节的更新。敬请期待吧！</p>
<blockquote>
<p>本文根据 <a href="http://blog.jquery.com/author/dmethvin/" target="_blank" rel="external">Dave Methvin</a> 的《jQuery 3.0: The Next Generations》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://blog.jquery.com/2014/10/29/jquery-3-0-the-next-generations/" target="_blank" rel="external">http://blog.jquery.com/2014/10/29/jquery-3-0-the-next-generations/</a></p>
</blockquote>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li>jQuery 3.0.0-alpha1: <a href="https://code.jquery.com/jquery-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0-alpha1.js</a></li>
<li>jQuery compat 3.0.0-alpha1: <a href="https://code.jquery.com/jquery-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0-alpha1.js</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2014年10月29日，jQuery 官方博客上更新了一篇博文，描述了关于下一代 jQuery 的一些信息。实际上这篇博文至今都已经一年时间了，jQuery 官方团队也早在2015年7月13日发布了 &lt;code&gt;jQuery 3.0.0-alpha1&lt;/code&gt; 版本。我之前也只是匆匆的看过一遍，今日闲着无事，就尝试翻译了一下并发布了这篇迟到了一年的译版，想要了解 &lt;code&gt;3.0&lt;/code&gt; 中的新特性的话可以关注我后续的更新。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="jQuery3.0" scheme="http://blog.sqrtthree.com/tags/jQuery3-0/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 JS 中的严格模式</title>
    <link href="http://blog.sqrtthree.com/2015/10/09/strict-mode/"/>
    <id>http://blog.sqrtthree.com/2015/10/09/strict-mode/</id>
    <published>2015-10-09T12:05:12.000Z</published>
    <updated>2015-10-09T12:05:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是严格模式？"><a href="#什么是严格模式？" class="headerlink" title="什么是严格模式？"></a>什么是严格模式？</h2><blockquote>
<p><code>严格模式</code> 是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法, 现在已经被大多浏览器实现. 顾名思义，这种模式使得Javascript在更严格的条件下运行.</p>
</blockquote>
<a id="more"></a>
<p>因此, 在严格模式下, 我们的一些不严谨的写法将会导致程序抛出错误. 例如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">param</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">arguments</span> = []; <span class="comment">// 在严格模式下该行将会抛出错误: error: redefinition of arguments</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中, 由于 <code>arguments</code> 在 js 中是一个特殊对象, 在严格模式下是不允许被重新定义的. 但是没有实现严格模式检查的环境中会接受这段代码.</p>
<h2 id="为什么会出现严格模式？"><a href="#为什么会出现严格模式？" class="headerlink" title="为什么会出现严格模式？"></a>为什么会出现严格模式？</h2><p>总所周知, 从 ECMAscript 从1997年正式成为国际标准以来, 已经发布了6个版本. 除此之外, 还存在一些 Javascript 实现支持非标准特性, 而其他的 Javascript 实现却并不支持这些特性的情况. 由于 Javascript 的实现多样化, 我们很难确定哪些特性在哪些平台上是支持的, 再加上 Web 浏览器的复杂性, 并且它并不能让开发者指定某一个特定的 Javascript 版本来执行我们的程序. 因此我们需要精心的编写程序, 以确保在所有的平台上都能够正常运行.</p>
<p>因此在 ES5 中引入了一种版本控制的考量: <code>严格模式</code>. 此特性允许开发者选择在受限制的 Javascript 版本中禁止使用一些 Javascript 语言中问题较多或是易于出错的特性.</p>
<p>由于其语法强大的向后兼容特性, 所以即使在没有实现严格模式检查的环境中, 你的严格代码仍然可以正常执行.</p>
<h2 id="如何使用严格模式"><a href="#如何使用严格模式" class="headerlink" title="如何使用严格模式?"></a>如何使用严格模式?</h2><p>在程序中使用严格模式的方式是在程序中的最开始增加一个特定的字符串字面量.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span></div></pre></td></tr></table></figure>
<p>如果你在一个文件的顶部加入这个特定的字符串, 则表示该文件的所有内容将始终使用严格模式执行.</p>
<p>如果你只想在一个函数体内使用严格模式, 则在该函数体内的最开始处(顶部)加入这句指令.</p>
<h2 id="为什么要使用字符串字面量来实现严格模式"><a href="#为什么要使用字符串字面量来实现严格模式" class="headerlink" title="为什么要使用字符串字面量来实现严格模式?"></a>为什么要使用字符串字面量来实现严格模式?</h2><p>单独使用一个特定的字符串字面量来作为指令语法在语言里看起来确实相当怪异, 但是他有一个最大的好处是向后兼容. 我们来看一下它为什么能够向后兼容. 我们都知道在js 中解释执行一个字符串字面量是没有任何副作用的, 这句话什么意思呢？ 比如说你在 chrome 浏览器控制台里面输入一个字符串字面量, 解释器只会返回一个同样的字符串, 除此之外不会发生任何事情, 这就使得即使ES3引擎不支持<code>严格模式</code>, 但依然能够无伤大雅的解释和执行这条指令. ES3 引擎在解析完改字符串之后, 会立即将该值丢弃. 因此, 尽管旧的引擎不支持严格模式, 但依然能够正常运行.</p>
<p>但需要注意的是: 尽管不会抛出错误, 但是旧的引擎不会进行任何的严格检查模式, 因此如果要使用严格模式, 你应该总是在完全兼容ES5的环境中测试严格代码.</p>
<h2 id="使用严格模式需要注意哪些问题"><a href="#使用严格模式需要注意哪些问题" class="headerlink" title="使用严格模式需要注意哪些问题?"></a>使用严格模式需要注意哪些问题?</h2><p>我们在上面已经说过, <code>use strict</code> 指令需要写在脚本或者函数的顶部, 因为该指令只有在写在顶部才能生效. 这就使得我们在使用的时候需要注意一下这里有个小坑. 这个坑是什么呢？</p>
<p>举个例子, 我们在开发大型功能的时候, 开发过程中会使用多个独立的脚本文件, 但是在部署到生产环境的时候出于性能优化的目的, 需要将多个脚本连接成一个单一的文件. 比如说, 脚本1 运行于严格模式下,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// file1.js</span></div><div class="line"><span class="meta">"use strict"</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是有另外一个同事写了一个脚本2运行于非严格模式下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// file2.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doOtherSth</span>(<span class="params">param</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">arguments</span> = [];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么, 我们该怎么连接这两个文件呢？ 如果我们以 file1.js 开始, 那么连接后的代码将运行于严格模式下, 但是由于 file2 中的一些操作会在严格模式下抛出错误, 导致我们的程序无法正常运行.如果我们以 file2.js 开始, 那么连接后的代码将运行于非严格模式下, 因为我们前面已经讲过该指令只有在写在顶部才能生效. 似乎怎样都不太合适.</p>
<p>那么如何解决这个问题呢？</p>
<ol>
<li>在项目中坚持只使用<code>严格模式</code>或者只使用<code>非严格模式</code>, 并且不要将使用<code>严格模式</code>和不使用<code>严格模式</code>的文件进行打包构建. O(∩_∩)O哈哈~这样就不会有问题了嘛.</li>
<li>我们上面说过, 如果你只想在一个函数体内使用严格模式, 则在该函数体内的最开始处(顶部)加入这句指令. 我们可以利用这个特性, 将每一个脚本文件里面的代码包裹在一个立即执行的函数表达式内, 这样即使两种模式的文件打包在一起, 依然能够按照我们的期望进行工作. 例如:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// file1.js</span></div><div class="line"><span class="meta">    "use strict"</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// file2.js</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doOtherSth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>当然了, 上面这样的做法会导致这些文件的内容不会在全局作用域内解释, 这就导致我们通过 <code>var</code> 和 <code>function</code> 声明的变量不会视为全局变量. 不过这刚好对我们来说也是一个很好的特性. 因此就放心大胆的使用吧, 去吧, 皮卡丘.</p>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>上面的方法2看起来是极好的, 并且我们可以通过<code>自动化构建工具</code>为我们的脚本文件上添加如上代码. 但是如果我们想要编写一个通用的库, 使其可以在尽可能多的环境中正常工作, 我们不能假设脚本文件一定会被构建工具置于一个立即执行的函数中, 也不能假设客户端代码一定处于严格模式或是非严格模式中. 所以为了获得最佳效果, 我们应该总是在严格模式下编写代码, 并显式的将其包裹在启用了严格模式的立即执行函数中, 而不是依靠构建工具来实现.</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>“严格模式”体现了Javascript更合理、更安全、更严谨的发展方向. 为了达到更为普遍的兼容性, 我们应该总是在严格模式下编写代码.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是严格模式？&quot;&gt;&lt;a href=&quot;#什么是严格模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是严格模式？&quot;&gt;&lt;/a&gt;什么是严格模式？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;严格模式&lt;/code&gt; 是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法, 现在已经被大多浏览器实现. 顾名思义，这种模式使得Javascript在更严格的条件下运行.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>谈谈我理解的API接口设计</title>
    <link href="http://blog.sqrtthree.com/2015/09/08/api/"/>
    <id>http://blog.sqrtthree.com/2015/09/08/api/</id>
    <published>2015-09-08T13:03:43.000Z</published>
    <updated>2015-09-08T13:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着web 技术的发展, 前端技术在 web 开发中占着越来越重的比重. 尤其是最近出现的 AngularJS/React 等框架的出现, 让开发 SPA 应用类的开发方式产生了巨大的革新. 在开发过程中, 前后端的数据交互也变得越来越密切. 再加上层出不穷的各种终端设备, 我们迫切需要一个统一的 api 接口规范设计. 主要参考了Github 的 API 设计规范, 我按照自己的理解总结了一下.</p>
<a id="more"></a>
<h2 id="关于协议"><a href="#关于协议" class="headerlink" title="关于协议"></a>关于协议</h2><p>为了确保通信安全, 建议API与用户的通信协议，总是使用HTTPS协议.</p>
<h2 id="关于域名"><a href="#关于域名" class="headerlink" title="关于域名"></a>关于域名</h2><p>为了提高可维护性, 建议尽量将API部署在专用域名之下. 如 <code>https://api.github.com</code></p>
<h2 id="关于版本号"><a href="#关于版本号" class="headerlink" title="关于版本号"></a>关于版本号</h2><p>建议将 API 的版本号放入 URL 中, 如<code>https://api.github.com/v1/</code>. 但是 Github 似乎采用了另外一种方案, 就是将版本号放在了HTTP头信息中, <a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="external">看这里看这里</a>. 但个人感觉不是太直观. 但前端在请求中可以省略3个字符. <em>(:з」∠)</em></p>
<h2 id="关于请求路径"><a href="#关于请求路径" class="headerlink" title="关于请求路径"></a>关于请求路径</h2><p>RESTful API是目前比较成熟的一套互联网应用程序的API设计理论. 在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词. 并且建议所用的名词和数据库中的集合名相对应. 并且在获取一组数据/集合的时候, 应统一使用复数形式.</p>
<p>比如, 需要请求所有的用户信息. 可以设计为这样: <code>https://api.example.com/v1/users</code>.</p>
<h2 id="关于请求方法"><a href="#关于请求方法" class="headerlink" title="关于请求方法"></a>关于请求方法</h2><p>常用的 HTTP请求方法有5个. 分别如下:</p>
<table>
<thead>
<tr>
<th>Method</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td style="text-align:center">从服务器取出资源</td>
</tr>
<tr>
<td>POST</td>
<td style="text-align:center">在服务器新建一个资源</td>
</tr>
<tr>
<td>PUT</td>
<td style="text-align:center">用于完整的替换资源或者创建指定身份的资源(更新资源)</td>
</tr>
<tr>
<td>PATCH</td>
<td style="text-align:center">用于局部更新资源</td>
</tr>
<tr>
<td>DELETE</td>
<td style="text-align:center">用于删除某个资源</td>
</tr>
</tbody>
</table>
<p>比如:</p>
<ul>
<li>GET <code>/users</code> 列出所有的用户</li>
<li>GET <code>/users/:ID</code> 列出指定用户的信息</li>
<li>POST <code>/users</code> 新建一个用户</li>
<li>DELETE <code>/users/:ID</code> 删除指定的用户</li>
</ul>
<p>也可以使用语义化的路径方式进行分类, 如:</p>
<ul>
<li>GET <code>/users</code> 列出所有的用户</li>
<li>POST <code>/users/create</code> 创建一个新用户</li>
<li>POST <code>/users/update</code> 更新信息</li>
</ul>
<h2 id="关于常见的请求参数"><a href="#关于常见的请求参数" class="headerlink" title="关于常见的请求参数"></a>关于常见的请求参数</h2><p>比如在数据过多, 需要对数据进行分页请求的时候, 我们应该统一 API 请求参数. 常见的有这些.</p>
<ul>
<li><code>limit=10</code> 指定返回记录的数量</li>
<li><code>offset=10</code> 指定返回记录的开始位置。</li>
<li><code>page=2&amp;per_page=100</code> 指定第几页，以及每页的记录数。</li>
<li><code>sortby=name&amp;order=asc</code> 指定返回结果按照哪个属性排序，以及排序顺序。</li>
<li><code>animal_type_id=1</code> 指定筛选条件</li>
</ul>
<h2 id="关于返回值"><a href="#关于返回值" class="headerlink" title="关于返回值"></a>关于返回值</h2><p>返回值的数据格式应严格按照 JSON 规范.JSON（JavaScript Object Notation）是一种轻量级，基于文本，语言无关的数据交换格式。其包括了基本数据类型4种和复合数据类型2种，共6种数据类型.</p>
<p>首先. 基本数据类型有:</p>
<ul>
<li>Number可以表示整数和浮点数。</li>
<li>Boolean可以表示真假，值为true或false。</li>
<li>String表示一个字符串。</li>
<li>Null通常用于表示空对象. 输出的数据结构中空字段的值一律为 null.</li>
</ul>
<p>复合数据类型Object是无序的集合，以键值对的方式保持数据。</p>
<ol>
<li><p>必须根据操作和状态设置相应的 HTTP 响应状态码. 具体可参考<a href="http://tools.ietf.org/html/rfc7231#page-49" target="_blank" rel="external">http://tools.ietf.org/html/rfc7231#page-49</a>、<a href="http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="external">http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81</a></p>
</li>
<li><p>Content-Type字段定义了响应体的类型. 一般情况下，浏览器会根据该类型对内容进行正确的处理。推荐设置为”text/javascript”或”text/plain”. 并且通常需要指定一个字符集, 如果字符编码为UTF-8时，可以不指定字符集</p>
</li>
<li><p>返回的数据包含在http响应体中。数据 必须(MUST) 是一个JSON Object。该Object可能包含3个字段：status，statusInfo，data。</p>
</li>
<li><p>status字段必须是一个不小于0的JSON Number整数，表示请求的状态. 0：表示server端理解了请求，成功处理并返回. 非0：表示发生错误, 可以根据错误类型扩展错误码.</p>
</li>
<li><p>statusInfo字段通常是一个JSON String或JSON Object，表示除了请求状态外server端想要对status做出的说明，使client端能够获取更多信息进行后续处理. 这个字段属于可选字段.</p>
</li>
<li><p>data 字段可以是任意 JSON 类型, 表示请求返回的数据主体. 数据主体data包含了在请求成功时有意义的数据.</p>
</li>
</ol>
<p>例如:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 请求成功</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">status</span>: <span class="number">0</span>,</div><div class="line">    <span class="attribute">statusInfo</span>: <span class="string">'请求成功'</span>,</div><div class="line">    <span class="attribute">data</span>: &#123;</div><div class="line">        <span class="attribute">name</span>: <span class="string">'Tom'</span>,</div><div class="line">        <span class="attribute">ag</span>: <span class="number">12</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 请求失败</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">status</span>: <span class="number">1</span>,</div><div class="line">    <span class="attribute">statusInfo</span>: <span class="string">'权限不足'</span></div><div class="line">    <span class="comment">// 或者是复杂类型</span></div><div class="line">    <span class="attribute">statusInfo</span>: &#123;</div><div class="line">        <span class="string">'text'</span>: <span class="string">'参数错误'</span>,</div><div class="line">        <span class="string">'parameters'</span>: &#123;</div><div class="line">            <span class="string">"email"</span>: <span class="string">"电子邮件格式不正确"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关于文档规范"><a href="#关于文档规范" class="headerlink" title="关于文档规范"></a>关于文档规范</h2><p>可参考 github 的文档写作形式.</p>
<p>1、 请求信息<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET '/users' 获取用户列表 <span class="comment">// 请求方式, 请求路径, 方法描述</span></div></pre></td></tr></table></figure></p>
<p>2、 请求参数</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>参数一</td>
<td>参数类型</td>
<td>参数描述</td>
</tr>
</tbody>
</table>
<p>3、 Response 响应结果示例<br>给出不同状态的响应结果示例, 便于接口对接和调试.<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">status</span>: <span class="number">0</span>,</div><div class="line">    <span class="attribute">statusInfo</span>: <span class="string">'请求成功'</span>,</div><div class="line">    <span class="attribute">data</span>: [&#123;</div><div class="line">        <span class="attribute">id</span>: <span class="number">1</span>,</div><div class="line">        <span class="attribute">name</span>: <span class="string">'Tom'</span></div><div class="line">    &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着web 技术的发展, 前端技术在 web 开发中占着越来越重的比重. 尤其是最近出现的 AngularJS/React 等框架的出现, 让开发 SPA 应用类的开发方式产生了巨大的革新. 在开发过程中, 前后端的数据交互也变得越来越密切. 再加上层出不穷的各种终端设备, 我们迫切需要一个统一的 api 接口规范设计. 主要参考了Github 的 API 设计规范, 我按照自己的理解总结了一下.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="api" scheme="http://blog.sqrtthree.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>解决 Javascript 中 atob 方法解码中文字符乱码问题</title>
    <link href="http://blog.sqrtthree.com/2015/08/29/utf8-to-b64/"/>
    <id>http://blog.sqrtthree.com/2015/08/29/utf8-to-b64/</id>
    <published>2015-08-29T19:46:53.000Z</published>
    <updated>2015-08-29T19:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天在写一个通过 GitHub API 获取README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-8 的时候发现中文会导致乱码. 在这里总结一下相关的知识点吧.</p>
</blockquote>
<h2 id="首先-为什么要编码？"><a href="#首先-为什么要编码？" class="headerlink" title="首先, 为什么要编码？"></a>首先, 为什么要编码？</h2><p>由于一些网络通讯协议的限制, 又或者是出于信息加密的目的, 我们就需要将原信息转换为 base64 编码,然后才能进行传输.例如，发送某些含有 ASCII 码表中 0 到 31 之间的控制字符的数据。</p>
<p>通常的方法是通过 <code>window.btoa()</code> 方法对源数据进行编码, 然后接收方使用 <code>window.atob()</code> 方法对其进行解码, 从而得到原数据.</p>
<a id="more"></a>
<h2 id="window-btoa-与-window-atob-不支持中文"><a href="#window-btoa-与-window-atob-不支持中文" class="headerlink" title="window.btoa 与 window.atob 不支持中文"></a>window.btoa 与 window.atob 不支持中文</h2><p>但是这种方法存在的问题是:<code>window.btoa()</code> 不支持中文, <code>window.atob()</code>转换含有中文的 base64编码的时候中文部分会变为乱码.详情如下:</p>
<p>我们在 bash 终端下先得到『中文』这两个字的 base64 编码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 中文 | base64</span></div><div class="line">5Lit5paHCg==</div></pre></td></tr></table></figure>
<p>然后我们在 Chrome console 里面通过 <code>window.atob</code> 进行解码, 结果如下</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; window.atob('5Lit5paHCg==')</div><div class="line">&lt; <span class="string">"ä¸­æ</span></div><div class="line"><span class="string">"</span></div></pre></td></tr></table></figure>
<p>继续在 Chrome console 里面执行 <code>window.btoa</code> 编码, 结果报错.</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; window.btoa('中文');</div><div class="line">&lt; Uncaught DOMException: Failed to<span class="built_in"> execute </span>'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.</div></pre></td></tr></table></figure>
<p>经查资料发现, <code>btoa</code> 方法仅支持 ASCII 编码.</p>
<h2 id="借助-encodeURIComponent-和-decodeURIComponent-转义中文字符"><a href="#借助-encodeURIComponent-和-decodeURIComponent-转义中文字符" class="headerlink" title="借助 encodeURIComponent 和 decodeURIComponent 转义中文字符"></a>借助 encodeURIComponent 和 decodeURIComponent 转义中文字符</h2><p>由于<code>btoa</code> 方法仅支持 ASCII 编码, 我们在转换中文的时候就需要先将中文转换为ASCII字符序列，再通过 btoa 进行 base64 编码, 从而实现『曲线救国』。</p>
<p>转换ASCII字符序列的方法我们可以借助于 <code>encodeURIComponent</code> 和 <code>decodeURIComponent</code> 这两个方法完成.</p>
<p>编码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">window</span>.btoa(<span class="built_in">encodeURIComponent</span>(<span class="string">'中文'</span>))</div><div class="line">&lt; <span class="string">"JUU0JUI4JUFEJUU2JTk2JTg3"</span></div></pre></td></tr></table></figure></p>
<p>解码:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; decodeURIComponent(<span class="name">window</span>.atob('JUU0JUI4JUFEJUU2JTk2JTg3'))</div><div class="line">&lt; <span class="string">"中文"</span></div></pre></td></tr></table></figure></p>
<h2 id="GitHub-API-获取-README-的中文乱码问题"><a href="#GitHub-API-获取-README-的中文乱码问题" class="headerlink" title="GitHub API 获取 README 的中文乱码问题"></a>GitHub API 获取 README 的中文乱码问题</h2><p>但是通过上面的解码方式解码 github 的 readme 数据的时候仍旧是乱码, 经过查找相关资料发现了Base64的编码与解码转的最优方案是下面这种:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_to_b64</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(str)));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_to_utf8</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="built_in">window</span>.atob(str)));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Usage:</span></div><div class="line">utf8_to_b64(<span class="string">'✓ à la mode'</span>); <span class="comment">// JTI1dTI3MTMlMjUyMCUyNUUwJTI1MjBsYSUyNTIwbW9kZQ==</span></div><div class="line">b64_to_utf8(<span class="string">'JTI1dTI3MTMlMjUyMCUyNUUwJTI1MjBsYSUyNTIwbW9kZQ=='</span>); <span class="comment">// "✓ à la mode"</span></div><div class="line"></div><div class="line">utf8_to_b64(<span class="string">'I \u2661 Unicode!'</span>); <span class="comment">// SSUyNTIwJTI1dTI2NjElMjUyMFVuaWNvZGUlMjUyMQ==</span></div><div class="line">b64_to_utf8(<span class="string">'SSUyNTIwJTI1dTI2NjElMjUyMFVuaWNvZGUlMjUyMQ=='</span>); <span class="comment">// "I ♡ Unicode!"</span></div></pre></td></tr></table></figure>
<p>通过上面的这种方法去解析 github 的数据的时候, 发现中文能够正常显示了. 显然 github 也是采用了这种方案.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding" target="_blank" rel="external">https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天在写一个通过 GitHub API 获取README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-8 的时候发现中文会导致乱码. 在这里总结一下相关的知识点吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;首先-为什么要编码？&quot;&gt;&lt;a href=&quot;#首先-为什么要编码？&quot; class=&quot;headerlink&quot; title=&quot;首先, 为什么要编码？&quot;&gt;&lt;/a&gt;首先, 为什么要编码？&lt;/h2&gt;&lt;p&gt;由于一些网络通讯协议的限制, 又或者是出于信息加密的目的, 我们就需要将原信息转换为 base64 编码,然后才能进行传输.例如，发送某些含有 ASCII 码表中 0 到 31 之间的控制字符的数据。&lt;/p&gt;
&lt;p&gt;通常的方法是通过 &lt;code&gt;window.btoa()&lt;/code&gt; 方法对源数据进行编码, 然后接收方使用 &lt;code&gt;window.atob()&lt;/code&gt; 方法对其进行解码, 从而得到原数据.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>前端开发模板引擎 -- Jade之神奇的 mixins 和模板继承</title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-04/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-04/</id>
    <published>2015-08-20T16:04:18.000Z</published>
    <updated>2015-08-20T16:04:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2596" target="_blank" rel="external">http://www.html-js.com/article/2596</a></p>
</blockquote>
<h2 id="1、神奇的-mixins"><a href="#1、神奇的-mixins" class="headerlink" title="1、神奇的 mixins"></a>1、神奇的 <code>mixins</code></h2><p>想必有 <code>less</code> &amp; <code>sass</code> 经验的同学对 <code>mixins</code> 一定都不陌生了，<code>mixins</code> 呢，其实就是方便对一堆代码块的重复利用。在 <code>Jade</code> 里面当然也少不了代码块的复用咯~~</p>
<a id="more"></a>
<p><code>mixins</code> 的定义很简单，就只需要 <code>mixin 代码块名字</code> 即可<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mixin demo</div><div class="line">  <span class="selector-tag">p</span> this is <span class="selector-tag">a</span> demo</div></pre></td></tr></table></figure><br>调用方式就更简单了，我们需要这样 <code>+代码块名字</code><br><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+demo</span></div></pre></td></tr></table></figure><br>输出结果非常理想<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>什么？你说这都是只能用于内容固定的代码块？没关系，我们来看看内容不固定的时候应该怎么办<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mixin info(name, skills)</div><div class="line">  <span class="selector-tag">p</span> my name is #&#123;name&#125;</div><div class="line">  <span class="selector-tag">ul</span>.skills-box</div><div class="line">    each skill <span class="keyword">in</span> skills</div><div class="line">      <span class="selector-tag">li</span> #&#123;skill&#125;</div><div class="line"></div><div class="line">+info(<span class="string">'sqrtthree'</span>,[<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>,<span class="string">'nodejs'</span>])</div></pre></td></tr></table></figure><br>编译结果如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>my name is sqrtthree<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"skills-box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>什么？你还想要嵌套的 <code>mixins</code>，╮(╯▽╰)╭  怎么这么多事。。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mixin info(name, skills)</div><div class="line">  <span class="selector-tag">p</span> my name is #&#123;name&#125;</div><div class="line">  <span class="selector-tag">ul</span>.skills-box</div><div class="line">    each skill <span class="keyword">in</span> skills</div><div class="line">      <span class="selector-tag">li</span> #&#123;skill&#125;</div><div class="line"></div><div class="line">mixin developersInfo(developer)</div><div class="line">  <span class="selector-tag">h2</span> #&#123;developer.name&#125;</div><div class="line">  +info(developer<span class="selector-class">.name</span>, developer.skills)</div><div class="line"></div><div class="line">+developersInfo(&#123;<span class="string">"name"</span>: <span class="string">"sqrtthree"</span>, <span class="string">"skills"</span>: [<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>,<span class="string">'nodejs'</span>]&#125;)</div></pre></td></tr></table></figure><br>编译结果是这个样子的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>sqrtthree<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>my name is sqrtthree<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"skills-box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><br>那如果我们遇到不定参的问题呢<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mixin info(className, ...skills)</div><div class="line">  ul(<span class="keyword">class</span>=<span class="string">'#&#123;className&#125;'</span>)</div><div class="line">    each skill <span class="keyword">in</span> skills</div><div class="line">      li #&#123;skill&#125;</div><div class="line"></div><div class="line">+info(<span class="string">'list'</span>,<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>,<span class="string">'nodejs'</span>)</div></pre></td></tr></table></figure><br>我们来看编译结果<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>变量都能传递了，那属性能传递么？<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mixin attr(<span class="built_in">text</span>)</div><div class="line">  p(<span class="built_in">class</span>=attributes.<span class="built_in">class</span>) <span class="comment">#&#123;text&#125;</span></div><div class="line"></div><div class="line">+attr('<span class="built_in">text</span>')(<span class="built_in">class</span>=<span class="string">"tips"</span>)</div></pre></td></tr></table></figure><br>结果如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p <span class="built_in">class</span>=<span class="string">"tips"</span>&gt;<span class="built_in">text</span>&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>属性传递的时候还有一个语法糖呢。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mixin attr(<span class="built_in">text</span>)</div><div class="line">  p&amp;attributes(attributes) <span class="comment">#&#123;text&#125;</span></div><div class="line"></div><div class="line">+attr('demo')(<span class="built_in">class</span>=<span class="string">"tips"</span>, <span class="built_in">id</span>=<span class="string">"j-tips"</span>, data-<span class="built_in">id</span>=<span class="string">"18"</span>)</div></pre></td></tr></table></figure><br>我们来看编译结果是什么样的<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p <span class="built_in">id</span>=<span class="string">"j-tips"</span> data-<span class="built_in">id</span>=<span class="string">"18"</span> <span class="built_in">class</span>=<span class="string">"tips"</span>&gt;<span class="built_in">text</span>&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p><code>mixins</code> 还有一个高级用法，那就是内联代码块。先上例子<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mixin code(text)</div><div class="line"> <span class="selector-tag">p</span> #&#123;text&#125;</div><div class="line"> <span class="keyword">if</span> block</div><div class="line">  block</div><div class="line"> <span class="keyword">else</span></div><div class="line">  <span class="selector-tag">p</span> no block.</div><div class="line"></div><div class="line">+code(<span class="string">'this is a demo'</span>)</div><div class="line">  <span class="selector-tag">p</span> this is <span class="selector-tag">a</span> block.</div></pre></td></tr></table></figure><br>编译结果如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo&lt;/p&gt;</div><div class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a block.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>从上面的代码中，我们可以看出，我们在调用<code>+code</code>的时候给他设置一个代码块 <code>p this is a block</code>，那么在 <code>mixins</code> 里面，程序会自动把这个代码块的内容传递给 <code>block</code> 变量。然后我们可以通过判断进行相应的操作。</p>
<h2 id="2、模板的继承"><a href="#2、模板的继承" class="headerlink" title="2、模板的继承"></a>2、模板的继承</h2><p>我们在做整站开发时，通常每一个页面的头部和底部都是一样的，之前我们的做法可能是写完一个之后然后不断的复制粘贴，但是现在我们有了 <code>Jade</code>之后，来看看我们可以怎么做？<br>在 <code>Jade</code> 里面，我们通过 <code>block</code> 和 <code>extends</code> 这两个关键字实现模板之间的继承，一个代码块可以看成是 <code>Jade</code> 中的一个 <code>block</code>，我们将在子模板中实现<br>我们先看一个小例子，定义一个简单的代码块<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">block</span> <span class="built_in">demo</span></div><div class="line">  p this <span class="built_in">is</span> a <span class="built_in">demo</span>.</div></pre></td></tr></table></figure><br>默认情况下，代码块的内容是会被输出的<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</div></pre></td></tr></table></figure><br>在同一个文件中，我们可以直接通过这种方式进行调用<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">block</span> <span class="built_in">demo</span></div><div class="line">  p this <span class="built_in">is</span> a <span class="built_in">demo</span>.</div><div class="line"><span class="built_in">block</span> <span class="built_in">demo</span></div><div class="line"><span class="built_in">block</span> <span class="built_in">demo</span></div><div class="line"><span class="built_in">block</span> <span class="built_in">demo</span></div></pre></td></tr></table></figure><br>结果是这样的<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</div><div class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</div><div class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</div><div class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>那么如果是不同文件之间，如何进行调用呢？<br>比如我们有一个 <code>layout.jade</code> 文件，内容是这样的。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  head</div><div class="line">    title this is <span class="selector-tag">a</span> demo.</div><div class="line">  body</div><div class="line">    <span class="selector-tag">h1</span> demo.</div><div class="line"></div><div class="line">    block cont</div></pre></td></tr></table></figure><br>然后呢，我们有一个 <code>demo.jade</code>文件是这样的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">extends layout	<span class="comment">// 这里的 layout 指的是需要继承的模板文件</span></div><div class="line"></div><div class="line">block cont</div><div class="line">  <span class="selector-tag">h2</span> Look, this is <span class="selector-tag">a</span> demo.</div><div class="line">  <span class="selector-tag">p</span> this is <span class="selector-tag">a</span> paragraph.</div></pre></td></tr></table></figure><br>然后我们通过命令行工具编译 <code>demo.jade</code> 文件，结果是神奇的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>this is a demo.<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>demo.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Look, this is a demo.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><br>怎么样？是不是觉得很方便呢？</p>
<p>模板的继承解决了多个文件之间代码复用的问题，其实上面我们提到的页头和页脚我们用模板包含的方式可能更合适一些，下面我们来看一看模板的包含.</p>
<p><code>includes</code> 允许你静态包含一段 <code>Jade</code>, 或者别的存放在单个文件中的东西比如 <code>css</code> <code>html</code>。<br>比如我们有一个 <code>footer.jade</code> 文件，他里面有着这样的内容<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">div#footer</div><div class="line">  <span class="selector-tag">p</span> copyright.</div></pre></td></tr></table></figure><br>然后我们在我们的 <code>demo.jade</code> 文件中这样使用<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  head</div><div class="line">    title this is <span class="selector-tag">a</span> demo.</div><div class="line">  body</div><div class="line">    <span class="selector-tag">h1</span> Hello, World.</div><div class="line"></div><div class="line">    include footer</div></pre></td></tr></table></figure><br>编译结果是这个样子的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">DOCTYPE</span> <span class="attr">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>this is a demo.<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>copyright.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><br>当然，通过 <code>includes</code> 引入 <code>css</code> 代码也是一样的。大家可以尝试一下，我这里就不举例子了。</p>
]]></content>
    
    <summary type="html">
    
      写一些我所知道的 jade 语法
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
  </entry>
  
  <entry>
    <title>前端开发模板引擎 -- Jade之数据的动态传递和流程控制</title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-03/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-03/</id>
    <published>2015-08-20T15:58:08.000Z</published>
    <updated>2015-08-20T15:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2585" target="_blank" rel="external">http://www.html-js.com/article/2585</a></p>
</blockquote>
<p>前面介绍了一些 <code>Jade</code> 的简单用法，这篇文章为大家讲一下 <code>Jade</code> 中如何进行数据的动态传递和流程控制，干货来咯~</p>
<h2 id="1、Jade-中简单的变量定义和使用"><a href="#1、Jade-中简单的变量定义和使用" class="headerlink" title="1、Jade 中简单的变量定义和使用"></a>1、<code>Jade</code> 中简单的变量定义和使用</h2><p>我们在写 <code>html</code> 静态页面的过程中，免不了会碰到一些需要动态注入的地方，一般的写法就略显麻烦，那么我们有了 <code>Jade</code> 之后呢，不啰嗦了，我们从最简单的例子开始：</p>
<a id="more"></a>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  head</div><div class="line">    title Hello,World.</div><div class="line">  body</div><div class="line">    -<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span></div><div class="line"><span class="ruby">    p welcome to <span class="comment">#&#123;title&#125;</span></span></div></pre></td></tr></table></figure>
<p>我想我们大概能够想象出编译结果：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello,World.<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>welcome to sqrtthree.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div></pre></td></tr></table></figure><br>从上面的代码中我们可以看出，在 <code>Jade</code> 中进行数据传递非常简单：</p>
<ol>
<li>通过<code>-</code> + <code>空格</code>开始，作为标记在 <code>Jade</code> 中定义变量</li>
<li>通过 <code>#{变量名}</code> 进行输出和调用即可.</li>
</ol>
<p>那要是我们就只是想输出 <code>#{}</code>的时候该怎么办呢？转义咯~<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml">p welcome to \#</span><span class="template-variable">&#123;title&#125;</span><span class="xml">	// =&gt; <span class="tag">&lt;<span class="name">p</span>&gt;</span>welcome to #</span><span class="template-variable">&#123;title&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>另外，在 <code>Jade</code> 里面我们就可以通过这种方式使用 <code>js</code>的语法了，比如这样：(为了看着方便，我就直接在后面写出关键行的编译结果了)<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span></div><div class="line"><span class="ruby">p welcome to <span class="comment">#&#123;title.toUpperCase()&#125;		// =&gt; &lt;p&gt;welcome to SQRTTHREE.COM&lt;/p&gt;</span></span></div></pre></td></tr></table></figure><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span></div><div class="line"><span class="ruby">p welcome to <span class="comment">#&#123;title.charAt(0)&#125;		// =&gt; &lt;p&gt;welcome to s&lt;/p&gt;</span></span></div></pre></td></tr></table></figure><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span></div><div class="line"><span class="ruby">p welcome to <span class="comment">#&#123;title.substring(0,4)&#125;	// =&gt; &lt;p&gt;welcome to sqrt&lt;/p&gt;</span></span></div></pre></td></tr></table></figure><br>怎么样？有没有觉得很简单呢。</p>
<p>但是呢，我们在工作中是很少直接在文件中这样直接定义变量值的，通常都是在后台读取到值然后设置到页面中，那我们现在没有后台该怎么办呢？还记得第一篇文章中我们说过的 <code>Jade</code> 命令行工具么？我们可以在 <code>Jade</code> 为我们提供的命令行工具中直接传递数据，话不多说，继续上代码：</p>
<p>我们通过如下的命令编译下面的 <code>Jade</code> 文件，为了方便查看，就只显示部分的编译结果<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jade test.jade  -P <span class="params">--obj</span> '&#123;<span class="string">"title"</span>: <span class="string">"sqrtthree"</span>&#125;'</div></pre></td></tr></table></figure><br><code>Jade</code> 文件如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  head</div><div class="line">    title welcome</div><div class="line">  body</div><div class="line">    <span class="selector-tag">p</span> welcome to #&#123;title&#125;		<span class="comment">// =&gt; &lt;p&gt;welcome to sqrtthree&lt;/p&gt;</span></div></pre></td></tr></table></figure></p>
<p>那么问题就来了，如果我们在命令行中和文件中定义了相同名字的变量，那究竟是显示哪一个变量的值呢？<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  head</div><div class="line">    title welcome</div><div class="line">  body</div><div class="line">    - <span class="selector-tag">var</span> title = <span class="string">'sqrtthree.com'</span></div><div class="line">    <span class="selector-tag">p</span> welcome to #&#123;title&#125;		<span class="comment">// =&gt; &lt;p&gt;welcome to sqrtthree.com&lt;/p&gt;</span></div></pre></td></tr></table></figure><br>根据编译结果显示，在文件中定义的值把之前外部传入的值替换掉了。</p>
<p>其实上面的方式中有一个坑不知道大家发现没有，就是通常我们传入数据的时候都不会只传一个的，那如果需要传入很多的数据的话，怎么还能够这么写呢？反正换我我是绝逼会崩溃的。</p>
<p><code>Jade</code> 也支持传入 <code>json</code> 文件的方式进行数据传递的, 例如我们在项目里新建一个 <code>data.json</code> 文件，格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"根号三的博客"</span>,</div><div class="line">  <span class="attr">"href"</span>: <span class="string">"sqrtthree.com"</span>,</div><div class="line">  <span class="attr">"cont"</span>: <span class="string">"我可耻，我打了个硬广。^_^"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这里我们就要在命令行里执行另一个参数的命令了<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jade test<span class="selector-class">.jade</span>  -P -O data<span class="selector-class">.json</span>		<span class="comment">// 注意，O 为英文大写</span></div></pre></td></tr></table></figure><br>页面和编译结果分别为:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  head</div><div class="line">    title welcome #&#123;title&#125;	<span class="comment">// =&gt; &lt;title&gt;welcome 根号三的博客&lt;/title&gt;</span></div><div class="line">  body</div><div class="line">    a(href=<span class="string">'#&#123;href&#125;'</span>, title=<span class="string">'#&#123;title&#125;'</span>) #&#123;href&#125;		<span class="comment">// =&gt; &lt;a href="sqrtthree.com" title="根号三的博客"&gt;sqrtthree.com&lt;/a&gt;</span></div><div class="line">    <span class="selector-tag">p</span> #&#123;cont&#125;		<span class="comment">// =&gt; &lt;p&gt;我可耻，我打了个硬广。^_^&lt;/p&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="2、Jade-中的注释"><a href="#2、Jade-中的注释" class="headerlink" title="2、Jade 中的注释"></a>2、<code>Jade</code> 中的注释</h2><p>变量一多，我们就难免会忘记他们的含义，为了便于后期维护，我们的好习惯是给他们都加上注释方便理解。</p>
<p>单行注释和 JavaScript 里是一样的，通过 <code>//</code> 来开始，并且必须为单独一行哟~<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// just some example		// =&gt; <span class="comment">&lt;!-- just some example--&gt;</span></div><div class="line">p just some example		// =&gt; <span class="tag">&lt;<span class="name">p</span>&gt;</span>just some example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>Jade</code> 同样支持不输出的注释，只需要加一个横线 <code>-</code> 就好了<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//- just <span class="built_in">some</span> <span class="built_in">example</span></div><div class="line">p just <span class="built_in">some</span> <span class="built_in">example</span>		// =&gt; &lt;p&gt;just <span class="built_in">some</span> <span class="built_in">example</span>&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>如果我们需要多行注释的话，使用下面的块注释也是极好的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box</div><div class="line">  <span class="comment">//</span></div><div class="line">    <span class="selector-tag">h1</span> this is <span class="selector-tag">a</span> demo.</div><div class="line">    <span class="selector-tag">p</span> this is <span class="selector-tag">a</span> paragraph.</div></pre></td></tr></table></figure><br>编译结果是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;</div><div class="line">  &lt;!--</div><div class="line">  h1 <span class="keyword">this</span> is a demo.</div><div class="line">  p <span class="keyword">this</span> is a paragraph.</div><div class="line">  --&gt;</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="3、流程控制"><a href="#3、流程控制" class="headerlink" title="3、流程控制"></a>3、流程控制</h2><p>有了变量，我们就可以做很多事情。比如像下面这样：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- <span class="keyword">var</span> <span class="keyword">data</span> = &#123;<span class="string">"name"</span>: <span class="string">"sqrtthree"</span>,<span class="string">"age"</span>: <span class="number">20</span>&#125;;</div><div class="line"></div><div class="line">- <span class="keyword">for</span> ( <span class="keyword">var</span> attr <span class="keyword">in</span> <span class="keyword">data</span>)</div><div class="line">  p= <span class="string">'my '</span> + attr + <span class="string">' is '</span> + <span class="keyword">data</span>[attr]ighlight html %&#125;</div></pre></td></tr></table></figure><br>那么结果是什么样的呢？<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> sqrtthree&lt;/p&gt;</div><div class="line">&lt;p&gt;<span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">20</span>&lt;/p&gt;</div></pre></td></tr></table></figure><br>咦，看着怎么这么熟悉呢？没错，就是 <code>js</code> 中遍历 <code>json</code>对象的操作。当然了，下面这种方式也是可以的，结果和上面是一样的<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> var data = &#123;<span class="string">"name"</span>: <span class="string">"sqrtthree"</span>,<span class="string">"age"</span>: <span class="number">20</span>&#125;;</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">- <span class="keyword">for</span> ( var attr <span class="keyword">in</span> data)</span></div><div class="line"><span class="ruby">  /<span class="regexp">/- p= 'my ' + attr + ' is ' + data[attr]</span></span></div><div class="line"><span class="ruby">  p my <span class="comment">#&#123;attr&#125; is #&#123;data[attr]&#125;</span></span></div></pre></td></tr></table></figure></p>
<p>当然了，除了 <code>for</code> 之外，<code>Jade</code> 还提供了另外一种语法糖<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> var data = &#123;<span class="string">"name"</span>: <span class="string">"sqrtthree"</span>,<span class="string">"age"</span>: <span class="number">20</span>&#125;;</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">- each value, keys <span class="keyword">in</span> data</span></div><div class="line"><span class="ruby">  /<span class="regexp">/- p=keys + ' : ' + value</span></span></div><div class="line"><span class="ruby">  p <span class="comment">#&#123;keys&#125; : #&#123;value&#125;</span></span></div></pre></td></tr></table></figure></p>
<p>说完了 <code>json</code> 对象，我们来说一说他的好搭档 - 数组<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> var skills = [<span class="string">'html'</span>, <span class="string">'css'</span>, <span class="string">'javascript'</span>, <span class="string">'nodejs'</span>];</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">ul</span></div><div class="line"><span class="ruby">  - each skill <span class="keyword">in</span> skills</span></div><div class="line"><span class="ruby">    li <span class="comment">#&#123;skill&#125;</span></span></div></pre></td></tr></table></figure><br>编译结果是这个样子的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><br>什么？太简单了？那我们来点复杂的<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> var data = [&#123;<span class="symbol">id:</span> <span class="number">1</span>,<span class="symbol">skills:</span> [<span class="string">'html'</span>, <span class="string">'css'</span>]&#125;,&#123;<span class="symbol">id:</span> <span class="number">2</span>,<span class="symbol">skills:</span> [<span class="string">'javascript'</span>,<span class="string">'nodejs'</span>]&#125;];</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">dl</span></div><div class="line"><span class="ruby">  - each list <span class="keyword">in</span> data</span></div><div class="line"><span class="ruby">    dt <span class="comment">#&#123;list.id&#125;</span></span></div><div class="line"><span class="ruby">    - each item <span class="keyword">in</span> list.skills</span></div><div class="line"><span class="ruby">      dd <span class="comment">#&#123;item&#125;</span></span></div></pre></td></tr></table></figure><br>结果是这样的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>html<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>css<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>说完了 <code>for</code> &amp; <code>each</code> 语句，我们还有 <code>while</code> 语句呢，比如我们要输出5个 <code>li</code>，我们可以这么写：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- <span class="built_in">var</span> <span class="built_in">n</span> = <span class="number">0</span>;</div><div class="line"></div><div class="line">ul</div><div class="line">  while <span class="built_in">n</span> &lt; <span class="number">5</span></div><div class="line">    li=<span class="built_in">n</span>++</div></pre></td></tr></table></figure><br>结果很明显：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="4、条件判断"><a href="#4、条件判断" class="headerlink" title="4、条件判断"></a>4、条件判断</h2><p>关于<code>if else</code>，我们可以这样用<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> var onOff = <span class="literal">true</span>;</span></div><div class="line"><span class="ruby">- var data = [<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>]</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">ul</span></div><div class="line"><span class="ruby">  <span class="keyword">if</span> onOff</span></div><div class="line"><span class="ruby">    -each skills <span class="keyword">in</span> data</span></div><div class="line"><span class="ruby">      li=skills</span></div><div class="line"><span class="ruby">  <span class="keyword">else</span></span></div><div class="line"><span class="ruby">    li none</span></div></pre></td></tr></table></figure><br>当 <code>onOff</code> 变量为真时，结果为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><br>当 <code>onOff</code> 变量为假时，结果为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>none<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><br>又见语法糖，<code>Jade</code> 默认是支持 <code>unless</code> 的，那么问题来了，<code>unless</code> 究竟是个什么东东呢？<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> var onOff = <span class="literal">true</span>;</span></div><div class="line"><span class="ruby">- var data = [<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>]</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">ul</span></div><div class="line"><span class="ruby">  <span class="keyword">unless</span> !onOff</span></div><div class="line"><span class="ruby">    -each skills <span class="keyword">in</span> data</span></div><div class="line"><span class="ruby">      li=skills</span></div><div class="line"><span class="ruby">  <span class="keyword">else</span></span></div><div class="line"><span class="ruby">    li none</span></div></pre></td></tr></table></figure><br>从上面的代码中，我们可以看出，<code>unless</code> 实际上就是 <code>if ( !(expr) )</code> 的等价方式.</p>
<p>下面我们谈谈 <code>case</code> &amp; <code>when</code> 的用法，编译结果我就不写了，大家可以自行测试。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- <span class="keyword">var</span> <span class="keyword">data</span> = <span class="string">'jser'</span>;</div><div class="line"></div><div class="line">case <span class="keyword">data</span></div><div class="line">  <span class="keyword">when</span> <span class="string">'jser'</span></div><div class="line">    p Hello, jser.</div><div class="line">  <span class="keyword">when</span> <span class="string">'weber'</span></div><div class="line">    p Hello, weber.</div><div class="line">  <span class="keyword">default</span></div><div class="line">    p Hello, #&#123;<span class="keyword">data</span>&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章首发于前端乱炖社区, 现在搬迁过来了. &lt;a href=&quot;http://www.html-js.com/article/2585&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html-js.com/article/2585&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前面介绍了一些 &lt;code&gt;Jade&lt;/code&gt; 的简单用法，这篇文章为大家讲一下 &lt;code&gt;Jade&lt;/code&gt; 中如何进行数据的动态传递和流程控制，干货来咯~&lt;/p&gt;
&lt;h2 id=&quot;1、Jade-中简单的变量定义和使用&quot;&gt;&lt;a href=&quot;#1、Jade-中简单的变量定义和使用&quot; class=&quot;headerlink&quot; title=&quot;1、Jade 中简单的变量定义和使用&quot;&gt;&lt;/a&gt;1、&lt;code&gt;Jade&lt;/code&gt; 中简单的变量定义和使用&lt;/h2&gt;&lt;p&gt;我们在写 &lt;code&gt;html&lt;/code&gt; 静态页面的过程中，免不了会碰到一些需要动态注入的地方，一般的写法就略显麻烦，那么我们有了 &lt;code&gt;Jade&lt;/code&gt; 之后呢，不啰嗦了，我们从最简单的例子开始：&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
  </entry>
  
  <entry>
    <title>前端开发模板引擎 -- Jade之标签的基本写法</title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-02/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-02/</id>
    <published>2015-08-20T15:52:51.000Z</published>
    <updated>2015-08-20T15:52:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2575" target="_blank" rel="external">http://www.html-js.com/article/2575</a></p>
</blockquote>
<h2 id="1、文档声明"><a href="#1、文档声明" class="headerlink" title="1、文档声明"></a>1、文档声明</h2><p>我们在开始写一个 <code>html</code> 页面的时候，首先要写上 <code>DOCTYPE</code> 文档声明的，现在通常情况下我们都是采用 <code>HTML5</code> 的文档声明方式，那么在 <code>jade</code> 里面我们应该怎么写呢？</p>
<p>在 <code>jade</code> 里面编写文档声明有2种方式：</p>
<ol>
<li>我们可以直接在 <code>jade</code> 文件里面写 <code>doctype html</code> 即可</li>
<li><code>jade</code> 为我们提供了一个简单的写法，<code>!!! 5</code> (不过好像 <code>jade</code> 在升级之后的新版本中不推荐使用此方法了 -_-)</li>
</ol>
<a id="more"></a>
<p>当然，<code>jade</code> 还默认支持其他类型的文档声明，只需要使用 <code>doctype</code> 跟上下面的选项即可。<code>jade</code> 默认支持的有:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var doctypes = exports.doctypes = &#123;</div><div class="line">    '5': '<span class="meta">&lt;!DOCTYPE html&gt;</span>',</div><div class="line">    'xml': '<span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span> <span class="meta">?&gt;</span></span>',</div><div class="line">    'default': '<span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>',</div><div class="line">    'transitional': '<span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>',</div><div class="line">    'strict': '<span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span>',</div><div class="line">    'frameset': '<span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;</span>',</div><div class="line">    '1.1': '<span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;</span>',</div><div class="line">    'basic': '<span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd"&gt;</span>',</div><div class="line">    'mobile': '<span class="meta">&lt;!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd"&gt;</span>'</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>doctype</code> 对大小写是不敏感的, 所以下面两个是一样的效果:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">doctype Default</div><div class="line">doctype default</div></pre></td></tr></table></figure></p>
<p>例如：如果我们要想写 <code>XHTML 1.0 Strict</code> 文档声明，则可以这样写：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">doctype <span class="keyword">strict</span></div></pre></td></tr></table></figure></p>
<p>编译结果如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2、标签"><a href="#2、标签" class="headerlink" title="2、标签"></a>2、标签</h2><p><code>jade</code> 中的标签的写法非常的简单，就是一个单词。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  head</div><div class="line">    title</div><div class="line">  body</div></pre></td></tr></table></figure>
<p>以上代码会被编译成:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>jade</code> 是以严格的缩进来区分标签的开始和结束的，默认为2个空格表示缩进。</strong></p>
<p>如果我们要写一个标签并且带有内容，比如说要写一个标题，我们只需要在标签单词后面加一个空格，然后跟上内容即可。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> this is <span class="selector-tag">a</span> title.</div><div class="line"><span class="selector-tag">p</span> this is <span class="selector-tag">a</span> paragraph.</div></pre></td></tr></table></figure>
<p>编译结果为：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</div><div class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>有的时候，我们会需要输出一些特殊排版格式的文本或者是为了提高代码的阅读性，需要显示出如下的效果：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">  <span class="number">1.</span> <span class="number">001</span></div><div class="line">  <span class="number">2.</span> <span class="number">002</span></div><div class="line">  <span class="number">3.</span> <span class="number">003</span></div><div class="line">  <span class="number">4.</span> <span class="number">004</span></div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure><br>那么我们在 jade 中应该怎么写呢，这里 jade 给我们提供了两种方式，第一种是在每一行前面加上一个 <code>|</code> 和<code>空格</code>：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p</div><div class="line">  | <span class="number">1.</span> <span class="number">001</span></div><div class="line">  | <span class="number">2.</span> <span class="number">002</span></div><div class="line">  | <span class="number">3.</span> <span class="number">003</span></div><div class="line">  | <span class="number">4.</span> <span class="number">004</span></div></pre></td></tr></table></figure><br>第二种方法是：在标签名后面紧跟一个 <code>.</code> 号。则此标签下面的内容会被 <code>jade</code> 解析为一个代码段：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p.</div><div class="line">  <span class="number">1.</span> <span class="number">001</span></div><div class="line">  <span class="number">2.</span> <span class="number">002</span></div><div class="line">  <span class="number">3.</span> <span class="number">003</span></div><div class="line">  <span class="number">4.</span> <span class="number">004</span></div></pre></td></tr></table></figure></p>
<p>这下有的同学就傻傻分不清了，这两种方式到底有什么区别呢？这里我们就不得不说到标签混排，如果我们有这样一个需求，在上面的代码中 <code>1</code> 的后面需要加一个 <code>strong</code> 标签。</p>
<p>首先我们说第一种情况下，我们的写法：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p</div><div class="line">  | 1. 001</div><div class="line">  strong aaa</div><div class="line">  | 2. 002</div><div class="line">  | 3. 003</div><div class="line">  | 4. 004</div></pre></td></tr></table></figure></p>
<p>如果是第二种写法的话，我们就需要这样写：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p.</div><div class="line">  <span class="number">1.</span> <span class="number">001</span></div><div class="line">  &lt;strong&gt;aaa&lt;/strong&gt;</div><div class="line">  <span class="number">2.</span> <span class="number">002</span></div><div class="line">  <span class="number">3.</span> <span class="number">003</span></div><div class="line">  <span class="number">4.</span> <span class="number">004</span></div></pre></td></tr></table></figure></p>
<p>编译结果如下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">  <span class="number">1.</span> <span class="number">001</span></div><div class="line">  &lt;strong&gt;aaa&lt;/strong&gt;</div><div class="line">  <span class="number">2.</span> <span class="number">002</span></div><div class="line">  <span class="number">3.</span> <span class="number">003</span></div><div class="line">  <span class="number">4.</span> <span class="number">004</span></div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<h2 id="3、标签的属性和属性值"><a href="#3、标签的属性和属性值" class="headerlink" title="3、标签的属性和属性值"></a>3、标签的属性和属性值</h2><p><code>h1</code> <code>p</code> 等等这些标签，我们通常都会给他们写上<code>id</code> &amp; <code>class</code>属性的，那么这在 <code>jade</code> 中应该怎么写呢？和 <code>zen coding</code> 的语法一样，我们只需要这样写：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">h1<span class="selector-id">#id</span><span class="selector-class">.class</span> this is <span class="selector-tag">a</span> title.</div><div class="line">p<span class="selector-id">#j-text</span><span class="selector-class">.text</span> this is <span class="selector-tag">a</span> paragraph.</div></pre></td></tr></table></figure>
<p>编译结果为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;h1 id=<span class="string">"id"</span> <span class="keyword">class</span>=<span class="string">"class"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</div><div class="line">&lt;p id=<span class="string">"j-text"</span> <span class="keyword">class</span>=<span class="string">"text"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>等等，那我要是想添加多个 <code>class</code> 怎么办呢？这样办：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">h1<span class="selector-id">#id</span><span class="selector-class">.class1</span><span class="selector-class">.class2</span><span class="selector-class">.class3</span> this is <span class="selector-tag">a</span> title.</div><div class="line">p<span class="selector-id">#j-text</span><span class="selector-class">.text</span> this is <span class="selector-tag">a</span> paragraph.</div></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;h1 id=<span class="string">"id"</span> <span class="keyword">class</span>=<span class="string">"class1 class2 class3"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</div><div class="line">&lt;p id=<span class="string">"j-text"</span> <span class="keyword">class</span>=<span class="string">"text"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>什么？写 <code>div</code> 写烦了？那就不写咯。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#id</span>.class</div><div class="line"><span class="selector-id">#id</span><span class="selector-class">.class1</span><span class="selector-class">.class2</span> this is <span class="selector-tag">a</span> <span class="selector-tag">div</span> without tags.</div></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"id"</span> <span class="built_in">class</span>=<span class="string">"class"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"id"</span> <span class="built_in">class</span>=<span class="string">"class1 class2"</span>&gt;this <span class="keyword">is</span> a <span class="keyword">div</span> <span class="keyword">without</span> tags.&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p><strong>这里要说明一下，在 <code>jade</code> 的语法里面，只有 <code>div</code> 标签能够省略不写.</strong></p>
<p>说完了 <code>id</code> 和 <code>class</code>，我们再来说一下标签其他的属性应该怎么添加。<code>jade</code> 里添加其他属性和值的语法也和 <code>zen coding</code> 类似，我们需要在标签后面加上小括号<code>()</code>，然后按照<code>(属性名=属性值)</code>的格式写就好了，如果有多个属性，中间以逗号进行分割。</p>
<p>比如上面的 id 和 class 的写法我们就可以改写成：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">h1</span><span class="params">(id=<span class="string">"id"</span>, class=<span class="string">"class"</span>)</span></span> this is <span class="selector-tag">a</span> title.</div><div class="line"><span class="function"><span class="title">p</span><span class="params">(id=<span class="string">"j-text"</span>, class=<span class="string">"text"</span>)</span></span> this is <span class="selector-tag">a</span> paragraph.</div></pre></td></tr></table></figure><br>结果是一样的：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;h1 id=<span class="string">"id"</span> <span class="keyword">class</span>=<span class="string">"class"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</div><div class="line">&lt;p id=<span class="string">"j-text"</span> <span class="keyword">class</span>=<span class="string">"text"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>说来说去还是这两个属性，烦了？那我们换一个吧：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a(<span class="attribute">herf</span>=<span class="string">"/index.html"</span>, <span class="attribute">title</span>=<span class="string">"this is a link."</span>, <span class="attribute">target</span>=<span class="string">"_blank"</span>, <span class="attribute">data-uid</span>=<span class="string">"1000"</span>) index.html</div></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a <span class="attribute">herf</span>=<span class="string">"/index.html"</span> <span class="attribute">title</span>=<span class="string">"this is a link."</span> <span class="attribute">target</span>=<span class="string">"_blank"</span> <span class="attribute">data-uid</span>=<span class="string">"1000"</span>&gt;index.html&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>那么问题就来了，如果我们要写一个单属性应该怎么写？比如给表单元素添加 <code>checked</code>属性：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">input(<span class="attribute">type</span>=<span class="string">"checkbox"</span>, <span class="attribute">name</span>=<span class="string">"all"</span>, checked, <span class="attribute">value</span>=<span class="string">"全选"</span>)</div></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"all"</span> <span class="attribute">checked</span>=<span class="string">"checked"</span> <span class="attribute">value</span>=<span class="string">"全选"</span>/&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      写一些我所知道的 jade 语法
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
  </entry>
  
</feed>
