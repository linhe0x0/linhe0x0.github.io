{
    "componentChunkName": "component---node-modules-gatsby-theme-mini-src-templates-post-jsx",
    "path": "/posts/2015/10/09/strict-mode-in-javascript/",
    "result": {"data":{"site":{"siteMetadata":{"name":"根号三","thumbnail":""}},"markdownRemark":{"frontmatter":{"title":"聊聊 JS 中的严格模式","tags":["JS"],"cover":null,"date":"2015-10-09","author":"根号三"},"excerpt":"什么是严格模式？  是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法，现在已经被大多浏览器实现。 顾名思义，这种模式使得 Javascript…","html":"<h2 id=\"什么是严格模式\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\" aria-label=\"什么是严格模式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是严格模式？</h2>\n<blockquote>\n<p><code class=\"language-text\">严格模式</code> 是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法，现在已经被大多浏览器实现。 顾名思义，这种模式使得 Javascript 在更严格的条件下运行。</p>\n</blockquote>\n<p>因此，在严格模式下，我们的一些不严谨的写法将会导致程序抛出错误。 例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function fn(param) {\n  var arguments = [] // 在严格模式下该行将会抛出错误: error: redefinition of arguments\n}</code></pre></div>\n<p>在上面的代码中，由于 <code class=\"language-text\">arguments</code> 在 js 中是一个特殊对象，在严格模式下是不允许被重新定义的。 但是没有实现严格模式检查的环境中会接受这段代码。</p>\n<h2 id=\"为什么会出现严格模式\" style=\"position:relative;\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\" aria-label=\"为什么会出现严格模式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么会出现严格模式？</h2>\n<p>总所周知，从 ECMAscript 从 1997 年正式成为国际标准以来，已经发布了 6 个版本。 除此之外，还存在一些 Javascript 实现支持非标准特性，而其他的 Javascript 实现却并不支持这些特性的情况。 由于 Javascript 的实现多样化，我们很难确定哪些特性在哪些平台上是支持的，再加上 Web 浏览器的复杂性，并且它并不能让开发者指定某一个特定的 Javascript 版本来执行我们的程序。 因此我们需要精心的编写程序，以确保在所有的平台上都能够正常运行。</p>\n<p>因此在 ES5 中引入了一种版本控制的考量: <code class=\"language-text\">严格模式</code>。 此特性允许开发者选择在受限制的 Javascript 版本中禁止使用一些 Javascript 语言中问题较多或是易于出错的特性。</p>\n<p>由于其语法强大的向后兼容特性，所以即使在没有实现严格模式检查的环境中，你的严格代码仍然可以正常执行。</p>\n<h2 id=\"如何使用严格模式\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\" aria-label=\"如何使用严格模式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何使用严格模式?</h2>\n<p>在程序中使用严格模式的方式是在程序中的最开始增加一个特定的字符串字面量。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"use strict\"</code></pre></div>\n<p>如果你在一个文件的顶部加入这个特定的字符串，则表示该文件的所有内容将始终使用严格模式执行。</p>\n<p>如果你只想在一个函数体内使用严格模式，则在该函数体内的最开始处(顶部)加入这句指令。</p>\n<h2 id=\"为什么要使用字符串字面量来实现严格模式\" style=\"position:relative;\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E9%87%8F%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\" aria-label=\"为什么要使用字符串字面量来实现严格模式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么要使用字符串字面量来实现严格模式?</h2>\n<p>单独使用一个特定的字符串字面量来作为指令语法在语言里看起来确实相当怪异，但是他有一个最大的好处是向后兼容。 我们来看一下它为什么能够向后兼容。 我们都知道在 js 中解释执行一个字符串字面量是没有任何副作用的，这句话什么意思呢？ 比如说你在 chrome 浏览器控制台里面输入一个字符串字面量，解释器只会返回一个同样的字符串，除此之外不会发生任何事情，这就使得即使 ES3 引擎不支持<code class=\"language-text\">严格模式</code>，但依然能够无伤大雅的解释和执行这条指令。 ES3 引擎在解析完改字符串之后，会立即将该值丢弃。 因此，尽管旧的引擎不支持严格模式，但依然能够正常运行。</p>\n<p>但需要注意的是: 尽管不会抛出错误，但是旧的引擎不会进行任何的严格检查模式，因此如果要使用严格模式，你应该总是在完全兼容 ES5 的环境中测试严格代码。</p>\n<h2 id=\"使用严格模式需要注意哪些问题\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98\" aria-label=\"使用严格模式需要注意哪些问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用严格模式需要注意哪些问题?</h2>\n<p>我们在上面已经说过，<code class=\"language-text\">use strict</code> 指令需要写在脚本或者函数的顶部，因为该指令只有在写在顶部才能生效。 这就使得我们在使用的时候需要注意一下这里有个小坑。 这个坑是什么呢？</p>\n<p>举个例子，我们在开发大型功能的时候，开发过程中会使用多个独立的脚本文件，但是在部署到生产环境的时候出于性能优化的目的，需要将多个脚本连接成一个单一的文件。 比如说，脚本 1 运行于严格模式下,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// file1.js\n\"use strict\"\nfunction doSth() {\n}</code></pre></div>\n<p>但是有另外一个同事写了一个脚本 2 运行于非严格模式下:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// file2.js\nfunction doOtherSth(param) {\n  var arguments = []\n}</code></pre></div>\n<p>那么，我们该怎么连接这两个文件呢？ 如果我们以 file1.js 开始，那么连接后的代码将运行于严格模式下，但是由于 file2 中的一些操作会在严格模式下抛出错误，导致我们的程序无法正常运行。如果我们以 file2.js 开始，那么连接后的代码将运行于非严格模式下，因为我们前面已经讲过该指令只有在写在顶部才能生效。 似乎怎样都不太合适。</p>\n<p>那么如何解决这个问题呢？</p>\n<ol>\n<li>在项目中坚持只使用<code class=\"language-text\">严格模式</code>或者只使用<code class=\"language-text\">非严格模式</code>，并且不要将使用<code class=\"language-text\">严格模式</code>和不使用<code class=\"language-text\">严格模式</code>的文件进行打包构建。 O(∩_∩)O 哈哈~这样就不会有问题了嘛。</li>\n<li>我们上面说过，如果你只想在一个函数体内使用严格模式，则在该函数体内的最开始处(顶部)加入这句指令。 我们可以利用这个特性，将每一个脚本文件里面的代码包裹在一个立即执行的函数表达式内，这样即使两种模式的文件打包在一起，依然能够按照我们的期望进行工作。 例如:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">;(function() {\n  // file1.js\n  \"use strict\"\n  function doSth() {}\n})()\n\n;(function() {\n  // file2.js\n  function doOtherSth() {}\n})()</code></pre></div>\n<p>当然了，上面这样的做法会导致这些文件的内容不会在全局作用域内解释，这就导致我们通过 <code class=\"language-text\">var</code> 和 <code class=\"language-text\">function</code> 声明的变量不会视为全局变量。 不过这刚好对我们来说也是一个很好的特性。 因此就放心大胆的使用吧，去吧，皮卡丘。</p>\n<h2 id=\"最佳实践\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\" aria-label=\"最佳实践 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最佳实践</h2>\n<p>上面的方法 2 看起来是极好的，并且我们可以通过<code class=\"language-text\">自动化构建工具</code>为我们的脚本文件上添加如上代码。 但是如果我们想要编写一个通用的库，使其可以在尽可能多的环境中正常工作，我们不能假设脚本文件一定会被构建工具置于一个立即执行的函数中，也不能假设客户端代码一定处于严格模式或是非严格模式中。 所以为了获得最佳效果，我们应该总是在严格模式下编写代码，并显式的将其包裹在启用了严格模式的立即执行函数中，而不是依靠构建工具来实现。</p>\n<h2 id=\"结语\" style=\"position:relative;\"><a href=\"#%E7%BB%93%E8%AF%AD\" aria-label=\"结语 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结语</h2>\n<p>\"严格模式\"体现了 Javascript 更合理、更安全、更严谨的发展方向。 为了达到更为普遍的兼容性，我们应该总是在严格模式下编写代码。</p>","timeToRead":6,"headings":[{"value":"什么是严格模式？","depth":2},{"value":"为什么会出现严格模式？","depth":2},{"value":"如何使用严格模式?","depth":2},{"value":"为什么要使用字符串字面量来实现严格模式?","depth":2},{"value":"使用严格模式需要注意哪些问题?","depth":2},{"value":"最佳实践","depth":2},{"value":"结语","depth":2}]}},"pageContext":{"title":"聊聊 JS 中的严格模式","cover":null,"slug":"/strict-mode-in-javascript/","permalink":"/posts/2015/10/09/strict-mode-in-javascript/","excerpt":"什么是严格模式？  是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法，现在已经被大多浏览器实现。 顾名思义，这种模式使得 Javascript…","previous":{"id":"b45fc168-9ee9-5aa2-8fed-faab8bb01a3d","frontmatter":{"title":"jQuery 3.0 —— 下一代的jQuery","cover":null,"date":"2015-11-05"},"excerpt":"2014 年 10 月 29 日，jQuery 官方博客上更新了一篇博文，描述了关于下一代 jQuery 的一些信息。实际上这篇博文至今都已经一年时间了，jQuery 官方团队也早在 2015 年 7 月 1…","fields":{"slug":"/jquery3-the-next-generations/","permalink":"/posts/2015/11/05/jquery3-the-next-generations/"}},"next":{"id":"a9fb74b0-b64e-52c3-bd45-e4853f6b7f02","frontmatter":{"title":"解决 Javascript 中 atob 方法解码中文字符乱码问题","cover":null,"date":"2015-08-29"},"excerpt":"今天在写一个通过 GitHub API 获取 README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-…","fields":{"slug":"/utf8-to-b64-with-js/","permalink":"/posts/2015/08/29/utf8-to-b64-with-js/"}},"random":[{"id":"66c80d25-6193-5119-a1cc-f1e093b3fd8d","frontmatter":{"title":"不要害怕 Rebase","tags":["译文","Git"],"cover":"https://hackernoon.com/hn-images/1*09KWDWnv1JDeZ-LEkXpL7g.png","date":"2018-03-20"},"excerpt":"原文地址：Don’t Fear The Rebase 原文作者：本文已获原作者 Jared Ready 授权，转载请注明出处。 译者：根号三 Git 的  命令是 Git 用户感到害怕和迷惑的一个常见原因，特别是那些来自可能更集中的版本控制系统的用户。这很正常。Rebase…","fields":{"slug":"/dont-fear-the-rebase/","permalink":"/posts/2018/03/20/dont-fear-the-rebase/"},"timeToRead":6},{"id":"20213fb5-0bf8-5946-a2f4-21d500622cb7","frontmatter":{"title":"JavaScript 开发者年度调查报告","tags":["译文"],"cover":null,"date":"2015-12-26"},"excerpt":"原文链接 : JavaScript Developer Survey Results 原文作者 : ponyfoo 译文出自 : 掘金翻译计划 译者 : sqrthree(根号三) 校对者: Zhangdroid 截止目前有超过了 500…","fields":{"slug":"/javascript-developer-survey-results/","permalink":"/posts/2015/12/26/javascript-developer-survey-results/"},"timeToRead":14},{"id":"81f4d177-a198-5926-bbd3-fb8d8ff10d3c","frontmatter":{"title":"作为一个开源软件的作者是一种什么样的感受？","tags":["译文"],"cover":null,"date":"2017-03-15"},"excerpt":"原文地址：What it feels like to be an open-source maintainer 原文作者：Nolan Lawson…","fields":{"slug":"/what-it-feels-like-to-be-an-open-source-maintainer/","permalink":"/posts/2017/03/15/what-it-feels-like-to-be-an-open-source-maintainer/"},"timeToRead":13}]}},
    "staticQueryHashes": ["1923471915","2251655042"]}