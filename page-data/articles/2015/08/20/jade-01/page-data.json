{"componentChunkName":"component---src-templates-post-jsx","path":"/articles/2015/08/20/jade-01/","result":{"data":{"site":{"siteMetadata":{"name":"根号三","thumbnail":""}},"markdownRemark":{"frontmatter":{"title":"前端开发模板引擎 -- Jade之开篇","tags":["jade"],"cover":null,"date":"2015-08-20"},"excerpt":"随着 web…","html":"<p>随着 web 发展，前端应用变得越来越复杂，基于后端的 <code class=\"language-text\">javascript(Node.js)</code> 也开始崭露头角，此时 <code class=\"language-text\">javascript</code> 被寄予了更大的期望，与此同时 <code class=\"language-text\">javascript MVC</code> 思想也开始流行起来。为了使用户界面与业务数据（内容）分离，就产生了『模板引擎』这个概念。</p>\n<p>说的简单点，模板引擎就是一个字符串中有几个变量待定，通过模板引擎函数把数据动态的塞进去。</p>\n<p>今天我们就来聊一聊 <code class=\"language-text\">Jade</code> 的使用方法和语法说明。<code class=\"language-text\">Jade</code>官网：<a href=\"http://jade-lang.com/\">jade-lang.com/</a></p>\n<!--more-->\n<h2>Jade 的使用和命令行工具构建方法</h2>\n<p>Jade 的使用需要依赖 <code class=\"language-text\">Node</code>环境，通过 <code class=\"language-text\">npm</code> 包进行安装 <code class=\"language-text\">Jade</code> 命令行工具，安装成功之后就可以新建一个文件，文件后缀名为 <code class=\"language-text\">*.jade</code>。我们就可以尽情的使用 <code class=\"language-text\">jade</code> 的语法咯，写完之后只需要通过命令行工具进行编译即可编译为我们平时使用的 <code class=\"language-text\">html</code> 静态文件。</p>\n<h3>安装方法</h3>\n<p>1.首先确定是否安装有 <code class=\"language-text\">Node</code> 环境和 <code class=\"language-text\">npm</code> 工具，查看方法如下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 在命令行工具中执行如下代码：\nnode -v\n=&gt; v0.10.35\nnpm -v\n=&gt; 1.4.28\n// 如果成功返回版本号信息即为安装成功。</code></pre></div>\n<p>2.通过 <code class=\"language-text\">npm</code> 全局安装 <code class=\"language-text\">Jade</code> 命令行工具</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install jade -g\n\n// mac用户可能需要管理员权限，使用如下命令\nsudo npm install jade -g</code></pre></div>\n<p>3.创建 <code class=\"language-text\">*.Jade</code> 文件，开始任务。</p>\n<p>4.通过使用 <code class=\"language-text\">Jade</code> 命令行工具将 <code class=\"language-text\">jade</code> 文件编译为 <code class=\"language-text\">html</code> 文件</p>\n<h3>Jade 命令行工具使用方法</h3>\n<p>我们可以通过 <code class=\"language-text\">jade --help</code> 查看 <code class=\"language-text\">Jade</code> 命令行工具的使用参数</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">jade --help\n\nUsage: jade [options] [dir|file ...]\n\n  Options:\n\n    -h, --help         output usage information / 输出使用信息\n    -V, --version      output the version number / 输出版本号信息\n    -O, --obj &lt;str&gt;    javascript options object / 传输到 jade 文件中的数据对象\n    -o, --out &lt;dir&gt;    output the compiled html to &lt;dir&gt; / 输出编译后的 HTML 到 &lt;dir&gt;\n    -p, --path &lt;path&gt;  filename used to resolve includes / 在处理 stdio 时，查找包含文件时的查找路径\n    -P, --pretty       compile pretty html output / 格式化编译 html 文件\n    -c, --client       compile function for client-side runtime.js / 编译浏览器端可用的 runtime.js\n    -n, --name &lt;str&gt;   The name of the compiled template (requires --client) / 编译模板的名字\n    -D, --no-debug     compile without debugging (smaller functions) / 关闭编译的调试选项(函数会更小)\n    -w, --watch        watch files for changes and automatically re-render / 监听文件改变并自动刷新编译结果\n    --name-after-file  Name the template after the last section of the file path (requires --client and overriden by --name)\n    --doctype &lt;str&gt;    Specify the doctype on the command line (useful if it is not specified by the template) / 在命令行中指定文档类型(如果在模板中没有被指定)\n\n  Examples:\n\n    # 编译整个目录\n    $ jade templates\n\n    # 生成 {foo,bar}.html\n    $ jade {foo,bar}.jade\n\n    # 在标准IO下使用jade\n    $ jade &lt; my.jade &gt; my.html\n\n    # 在标准IO下使用jade\n    $ echo &#39;h1 Jade!&#39; | jade\n\n    # foo, bar 目录渲染到 /tmp\n    $ jade foo bar --out /tmp</code></pre></div>\n<p>实例：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 比如说我们需要编译index.jade文件，默认编译到同文件夹下的同名html 文件中\njade index.jade\n\n// 如果我们要格式化输出 index.html 文件，只需要添加 -P 参数即可\njade -P index.jade\n\n// 如果我们要实现监听和自动编译，需要使用 -w 参数\njade -P -w index.jade</code></pre></div>"}},"pageContext":{"title":"前端开发模板引擎 -- Jade之开篇","cover":null,"slug":"/jade-01/","excerpt":"随着 web…","previous":{"id":"8c2d370e-d57d-54fd-b56d-1fabcd09bcaf","frontmatter":{"title":"解决 Javascript 中 atob 方法解码中文字符乱码问题","cover":null,"date":"2015-08-29"},"excerpt":"今天在写一个通过 GitHub API 获取 README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-…","fields":{"slug":"/utf8-to-b64/"}},"next":{"id":"a83b6008-58bb-5865-aed7-19e868650104","frontmatter":{"title":"前端开发模板引擎 -- Jade之标签的基本写法","cover":null,"date":"2015-08-20"},"excerpt":"1、文档声明 我们在开始写一个  页面的时候，首先要写上  文档声明的，现在通常情况下我们都是采用  的文档声明方式，那么在  里面我们应该怎么写呢？ 在  里面编写文档声明有…","fields":{"slug":"/jade-02/"}}}},"staticQueryHashes":["2251655042"]}