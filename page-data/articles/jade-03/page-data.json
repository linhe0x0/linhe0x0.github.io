{"componentChunkName":"component---src-templates-post-jsx","path":"/articles/jade-03/","result":{"data":{"markdownRemark":{"html":"<p>前面介绍了一些 <code class=\"language-text\">Jade</code> 的简单用法，这篇文章为大家讲一下 <code class=\"language-text\">Jade</code> 中如何进行数据的动态传递和流程控制，干货来咯~</p>\n<h2>1、<code class=\"language-text\">Jade</code> 中简单的变量定义和使用</h2>\n<p>我们在写 <code class=\"language-text\">html</code> 静态页面的过程中，免不了会碰到一些需要动态注入的地方，一般的写法就略显麻烦，那么我们有了 <code class=\"language-text\">Jade</code> 之后呢，不啰嗦了，我们从最简单的例子开始：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">doctype html\nhtml\n  head\n    title Hello,World.\n  body\n    - var title = &#39;sqrtthree.com&#39;;\n    p welcome to #{title}</code></pre></div>\n<p>我想我们大概能够想象出编译结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Hello,World.&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;welcome to sqrtthree.com&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>从上面的代码中我们可以看出，在 <code class=\"language-text\">Jade</code> 中进行数据传递非常简单：</p>\n<ol>\n<li>通过<code class=\"language-text\">-</code> + <code class=\"language-text\">空格</code>开始，作为标记在 <code class=\"language-text\">Jade</code> 中定义变量</li>\n<li>通过 <code class=\"language-text\">#{变量名}</code> 进行输出和调用即可.</li>\n</ol>\n<p>那要是我们就只是想输出 <code class=\"language-text\">#{}</code>的时候该怎么办呢？转义咯~</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">p welcome to \\#{title}\t// =&gt; &lt;p&gt;welcome to #{title}&lt;/p&gt;</code></pre></div>\n<p>另外，在 <code class=\"language-text\">Jade</code> 里面我们就可以通过这种方式使用 <code class=\"language-text\">js</code>的语法了，比如这样：(为了看着方便，我就直接在后面写出关键行的编译结果了)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var title = &#39;sqrtthree.com&#39;;\np welcome to #{title.toUpperCase()}\t\t// =&gt; &lt;p&gt;welcome to SQRTTHREE.COM&lt;/p&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var title = &#39;sqrtthree.com&#39;;\np welcome to #{title.charAt(0)}\t\t// =&gt; &lt;p&gt;welcome to s&lt;/p&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var title = &#39;sqrtthree.com&#39;;\np welcome to #{title.substring(0,4)}\t// =&gt; &lt;p&gt;welcome to sqrt&lt;/p&gt;</code></pre></div>\n<p>怎么样？有没有觉得很简单呢。</p>\n<p>但是呢，我们在工作中是很少直接在文件中这样直接定义变量值的，通常都是在后台读取到值然后设置到页面中，那我们现在没有后台该怎么办呢？还记得第一篇文章中我们说过的 <code class=\"language-text\">Jade</code> 命令行工具么？我们可以在 <code class=\"language-text\">Jade</code> 为我们提供的命令行工具中直接传递数据，话不多说，继续上代码：</p>\n<p>我们通过如下的命令编译下面的 <code class=\"language-text\">Jade</code> 文件，为了方便查看，就只显示部分的编译结果</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">jade test.jade  -P --obj &#39;{&quot;title&quot;: &quot;sqrtthree&quot;}&#39;</code></pre></div>\n<p><code class=\"language-text\">Jade</code> 文件如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">doctype html\nhtml\n  head\n    title welcome\n  body\n    p welcome to #{title}\t\t// =&gt; &lt;p&gt;welcome to sqrtthree&lt;/p&gt;</code></pre></div>\n<p>那么问题就来了，如果我们在命令行中和文件中定义了相同名字的变量，那究竟是显示哪一个变量的值呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">doctype html\nhtml\n  head\n    title welcome\n  body\n    - var title = &#39;sqrtthree.com&#39;\n    p welcome to #{title}\t\t// =&gt; &lt;p&gt;welcome to sqrtthree.com&lt;/p&gt;</code></pre></div>\n<p>根据编译结果显示，在文件中定义的值把之前外部传入的值替换掉了。</p>\n<p>其实上面的方式中有一个坑不知道大家发现没有，就是通常我们传入数据的时候都不会只传一个的，那如果需要传入很多的数据的话，怎么还能够这么写呢？反正换我我是绝逼会崩溃的。</p>\n<p><code class=\"language-text\">Jade</code> 也支持传入 <code class=\"language-text\">json</code> 文件的方式进行数据传递的, 例如我们在项目里新建一个 <code class=\"language-text\">data.json</code> 文件，格式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;title&quot;: &quot;根号三的博客&quot;,\n  &quot;href&quot;: &quot;sqrtthree.com&quot;,\n  &quot;cont&quot;: &quot;我可耻，我打了个硬广。^_^&quot;\n}</code></pre></div>\n<p>这里我们就要在命令行里执行另一个参数的命令了</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">jade test.jade  -P -O data.json\t\t// 注意，O 为英文大写</code></pre></div>\n<p>页面和编译结果分别为:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">doctype html\nhtml\n  head\n    title welcome #{title}\t// =&gt; &lt;title&gt;welcome 根号三的博客&lt;/title&gt;\n  body\n    a(href=&#39;#{href}&#39;, title=&#39;#{title}&#39;) #{href}\t\t// =&gt; &lt;a href=&quot;sqrtthree.com&quot; title=&quot;根号三的博客&quot;&gt;sqrtthree.com&lt;/a&gt;\n    p #{cont}\t\t// =&gt; &lt;p&gt;我可耻，我打了个硬广。^_^&lt;/p&gt;</code></pre></div>\n<h2>2、<code class=\"language-text\">Jade</code> 中的注释</h2>\n<p>变量一多，我们就难免会忘记他们的含义，为了便于后期维护，我们的好习惯是给他们都加上注释方便理解。</p>\n<p>单行注释和 JavaScript 里是一样的，通过 <code class=\"language-text\">//</code> 来开始，并且必须为单独一行哟~</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// just some example\t\t// =&gt; &lt;!-- just some example--&gt;\np just some example\t\t// =&gt; &lt;p&gt;just some example&lt;/p&gt;</code></pre></div>\n<p><code class=\"language-text\">Jade</code> 同样支持不输出的注释，只需要加一个横线 <code class=\"language-text\">-</code> 就好了</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//- just some example\np just some example\t\t// =&gt; &lt;p&gt;just some example&lt;/p&gt;</code></pre></div>\n<p>如果我们需要多行注释的话，使用下面的块注释也是极好的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.box\n  //\n    h1 this is a demo.\n    p this is a paragraph.</code></pre></div>\n<p>编译结果是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div class=&quot;box&quot;&gt;\n  &lt;!--\n  h1 this is a demo.\n  p this is a paragraph.\n  --&gt;\n&lt;/div&gt;</code></pre></div>\n<h2>3、流程控制</h2>\n<p>有了变量，我们就可以做很多事情。比如像下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var data = {&quot;name&quot;: &quot;sqrtthree&quot;,&quot;age&quot;: 20};\n\n- for ( var attr in data)\n  p= &#39;my &#39; + attr + &#39; is &#39; + data[attr]ighlight html %}</code></pre></div>\n<p>那么结果是什么样的呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;my name is sqrtthree&lt;/p&gt;\n&lt;p&gt;my age is 20&lt;/p&gt;</code></pre></div>\n<p>咦，看着怎么这么熟悉呢？没错，就是 <code class=\"language-text\">js</code> 中遍历 <code class=\"language-text\">json</code>对象的操作。当然了，下面这种方式也是可以的，结果和上面是一样的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var data = {&quot;name&quot;: &quot;sqrtthree&quot;,&quot;age&quot;: 20};\n\n- for ( var attr in data)\n  //- p= &#39;my &#39; + attr + &#39; is &#39; + data[attr]\n  p my #{attr} is #{data[attr]}</code></pre></div>\n<p>当然了，除了 <code class=\"language-text\">for</code> 之外，<code class=\"language-text\">Jade</code> 还提供了另外一种语法糖</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var data = {&quot;name&quot;: &quot;sqrtthree&quot;,&quot;age&quot;: 20};\n\n- each value, keys in data\n  //- p=keys + &#39; : &#39; + value\n  p #{keys} : #{value}</code></pre></div>\n<p>说完了 <code class=\"language-text\">json</code> 对象，我们来说一说他的好搭档 - 数组</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var skills = [&#39;html&#39;, &#39;css&#39;, &#39;javascript&#39;, &#39;nodejs&#39;];\n\nul\n  - each skill in skills\n    li #{skill}</code></pre></div>\n<p>编译结果是这个样子的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ul&gt;\n  &lt;li&gt;html&lt;/li&gt;\n  &lt;li&gt;css&lt;/li&gt;\n  &lt;li&gt;javascript&lt;/li&gt;\n  &lt;li&gt;nodejs&lt;/li&gt;\n&lt;/ul&gt;</code></pre></div>\n<p>什么？太简单了？那我们来点复杂的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var data = [{id: 1,skills: [&#39;html&#39;, &#39;css&#39;]},{id: 2,skills: [&#39;javascript&#39;,&#39;nodejs&#39;]}];\n\ndl\n  - each list in data\n    dt #{list.id}\n    - each item in list.skills\n      dd #{item}</code></pre></div>\n<p>结果是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;dl&gt;\n  &lt;dt&gt;1&lt;/dt&gt;\n  &lt;dd&gt;html&lt;/dd&gt;\n  &lt;dd&gt;css&lt;/dd&gt;\n  &lt;dt&gt;2&lt;/dt&gt;\n  &lt;dd&gt;javascript&lt;/dd&gt;\n  &lt;dd&gt;nodejs&lt;/dd&gt;\n&lt;/dl&gt;</code></pre></div>\n<p>说完了 <code class=\"language-text\">for</code> &#x26; <code class=\"language-text\">each</code> 语句，我们还有 <code class=\"language-text\">while</code> 语句呢，比如我们要输出 5 个 <code class=\"language-text\">li</code>，我们可以这么写：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var n = 0;\n\nul\n  while n &lt; 5\n    li=n++</code></pre></div>\n<p>结果很明显：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ul&gt;\n  &lt;li&gt;0&lt;/li&gt;\n  &lt;li&gt;1&lt;/li&gt;\n  &lt;li&gt;2&lt;/li&gt;\n  &lt;li&gt;3&lt;/li&gt;\n  &lt;li&gt;4&lt;/li&gt;\n&lt;/ul&gt;</code></pre></div>\n<h2>4、条件判断</h2>\n<p>关于<code class=\"language-text\">if else</code>，我们可以这样用</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var onOff = true;\n- var data = [&#39;html&#39;,&#39;css&#39;,&#39;javascript&#39;]\n\nul\n  if onOff\n    -each skills in data\n      li=skills\n  else\n    li none</code></pre></div>\n<p>当 <code class=\"language-text\">onOff</code> 变量为真时，结果为</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ul&gt;\n  &lt;li&gt;html&lt;/li&gt;\n  &lt;li&gt;css&lt;/li&gt;\n  &lt;li&gt;javascript&lt;/li&gt;\n&lt;/ul&gt;</code></pre></div>\n<p>当 <code class=\"language-text\">onOff</code> 变量为假时，结果为</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ul&gt;\n  &lt;li&gt;none&lt;/li&gt;\n&lt;/ul&gt;</code></pre></div>\n<p>又见语法糖，<code class=\"language-text\">Jade</code> 默认是支持 <code class=\"language-text\">unless</code> 的，那么问题来了，<code class=\"language-text\">unless</code> 究竟是个什么东东呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var onOff = true;\n- var data = [&#39;html&#39;,&#39;css&#39;,&#39;javascript&#39;]\n\nul\n  unless !onOff\n    -each skills in data\n      li=skills\n  else\n    li none</code></pre></div>\n<p>从上面的代码中，我们可以看出，<code class=\"language-text\">unless</code> 实际上就是 <code class=\"language-text\">if ( !(expr) )</code> 的等价方式.</p>\n<p>下面我们谈谈 <code class=\"language-text\">case</code> &#x26; <code class=\"language-text\">when</code> 的用法，编译结果我就不写了，大家可以自行测试。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- var data = &#39;jser&#39;;\n\ncase data\n  when &#39;jser&#39;\n    p Hello, jser.\n  when &#39;weber&#39;\n    p Hello, weber.\n  default\n    p Hello, #{data}</code></pre></div>","frontmatter":{"title":"前端开发模板引擎 -- Jade之数据的动态传递和流程控制","date":"2015-08-20","category":"技术","tags":["jade"],"cover":null}}},"pageContext":{"title":"前端开发模板引擎 -- Jade之数据的动态传递和流程控制","cover":null,"slug":"/jade-03/","excerpt":"前面介绍了一些  的简单用法，这篇文章为大家讲一下  中如何进行数据的动态传递和流程控制，干货来咯~…","previous":{"id":"190c8862-b2f2-5680-a69d-fe32be9ec474","frontmatter":{"title":"前端开发模板引擎 -- Jade之标签的基本写法","cover":null},"excerpt":"1、文档声明 我们在开始写一个  页面的时候，首先要写上  文档声明的，现在通常情况下我们都是采用  的文档声明方式，那么在  里面我们应该怎么写呢？ 在  里面编写文档声明有…","fields":{"slug":"/jade-02/"}},"next":{"id":"a0716fa1-b68f-553c-8387-90f4337c1979","frontmatter":{"title":"前端开发模板引擎 -- Jade之神奇的 mixins 和模板继承","cover":null},"excerpt":"…","fields":{"slug":"/jade-04/"}}}},"staticQueryHashes":["1306129578"]}