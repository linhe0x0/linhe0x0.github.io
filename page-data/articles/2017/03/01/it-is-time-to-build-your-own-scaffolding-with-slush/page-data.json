{"componentChunkName":"component---src-templates-post-jsx","path":"/articles/2017/03/01/it-is-time-to-build-your-own-scaffolding-with-slush/","result":{"data":{"site":{"siteMetadata":{"name":"根号三","thumbnail":""},"host":"localhost"},"markdownRemark":{"frontmatter":{"title":"是时候来用 Slush 构建你自己的脚手架了","tags":["gulp","工具"],"cover":null,"date":"2017-03-01"},"excerpt":"Slush 是什么？ 简单的来说，Slush…","html":"<h2>Slush 是什么？</h2>\n<p>简单的来说，Slush 就是一个脚手架生成工具。什么？脚手架？这是什么鬼？嗯，脚手架嘛，自然是这个样子咯~</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tNc79gy1fd3vev11wnj30go0b3431.jpg\"></p>\n<p>什么？你问的是编程中的脚手架呀？啊，这么说吧。身为一个前端开发者，每次新建一个项目的时候是不是要创建好多个文件夹、配置文件？写个文档是不是要创建好多个目录？然而每个项目的结构和配置文件都大同小异，是不是早已繁琐感觉人生无望，失去了活着的意义？</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79gy1fd3vw3uqtfj30bo08rwem.jpg\"></p>\n<p>就在这个时候，Slush 横空出世，能够让你轻松搞定这些繁琐的事情，重新找回人生的意义，你就说吼不吼啊。从此麻麻再也不用担心我整天都在忙着创建文件夹啦。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79ly1fd3wiy66q4g306o0360vr.gif\"></p>\n<h2>道理我都懂，可我大 Yeoman 用的好好的，为什么要换新？</h2>\n<p>嗯。Yeoman 确实也是一个很好用的脚手架工具，历史悠久。然而它以 Grunt 为基础工具，上手难度大大提高。在轮子层出不穷的前端领域早已是风前残烛。而 Slush 则是基于 Gulp 的 『流式』思想作为基础工具，当你在做定制化脚手架时，Gulp 简单易用的特点则能让你轻轻松松搞定。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79gy1fd3wvq1wemj3060046q36.jpg\"></p>\n<p>噢，这么屌？那该怎么用呢？</p>\n<h1>说了这么多，我到底该怎么用？</h1>\n<p>好啦，废话不多说啦，我们赶紧来趁着这个热乎劲看看怎么使用吧。</p>\n<h3>1. 安装 slush</h3>\n<p>首先，你得有 NodeJS 环境，什么？连 NodeJS 都没装？赶紧回家洗洗睡吧。如果你已经有了呢，你就可以通过 npm 直接将 slush 安装到全局环境下啦：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g slush</code></pre></div>\n<p>安装完了之后，你可以执行下面这行命令来确保安装成功：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">slush -v</code></pre></div>\n<p>如果你能看到输出了一个版本号，就说明已经安装成功啦。下面我们就来看一下如何使用吧。</p>\n<h3>2. 安装第三方脚手架</h3>\n<p>在使用 slush 创建项目之前，你得先安装一些别人开发好的脚手架。安装好脚手架之后才能根据脚手架生成约定好的项目结构哟。</p>\n<p>咦？不知道有什么脚手架？快来 <a href=\"http://slushjs.github.io/generators\">大厅</a> 里找找吧。</p>\n<p>很好，你已经找到了自己喜欢的脚手架了，我们快来安装它吧。打住，提醒你一下，脚手架要安装到全局环境下才有效哟。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g slush-react-starter-kit</code></pre></div>\n<h3>3. 开始生成项目吧</h3>\n<p>现在我们已经安装好需要的一切了，终于可以开始创建项目啦。</p>\n<p>首先，创建一个项目文件夹并进入文件夹中：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir my-first-slush-project\ncd my-first-slush-project</code></pre></div>\n<p>其次，执行 slush 生成命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">slush react-starter-kit</code></pre></div>\n<p><code class=\"language-text\">react-starter-kit</code>是什么鬼？我们安装的明明是 <code class=\"language-text\">slush-react-starter-kit</code> 呀。没错，在生成项目的时候，slush 后面跟的脚手架名字中是不带 <code class=\"language-text\">slush</code> 关键词的。就是这么任性。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79ly1fd3xirh0ebg30jg0axhdt.gif\"></p>\n<h2>没找到好使的，宝宝想要自定义怎么办？</h2>\n<p>当然了，可能你翻遍了整个大厅都没找到自己想要的，迫切想要自己定制一个脚手架怎么办呢？且听我慢慢道来。</p>\n<p>其实很简单啦，Slush 脚手架就是一个普通的 npm package，唯一需要注意的有这么几点：</p>\n<ol>\n<li>名字要以 <code class=\"language-text\">slush-*</code> 的方式</li>\n<li>package 中包含一个 <code class=\"language-text\">slushfile.js</code> 文件</li>\n<li>package.json 文件中加上 slushgenerator 关键词方便别人检索</li>\n<li>模板文件放在 <code class=\"language-text\">templates</code> 文件夹中</li>\n<li>别忘了安装 gulp 作为本地依赖啦</li>\n</ol>\n<p>假设你已经按照上面这些约定做好了准备工作，那么接下来我们就可以搞一件大新闻啦。</p>\n<h4>第一步：创建模板文件</h4>\n<p>首先，你要将模板文件（就是运行脚手架之后生成的项目文件）全部放到 <code class=\"language-text\">templates</code> 文件夹中</p>\n<h4>第二步：在 slushfile.js 文件中编写任务流。</h4>\n<p>前面已经说到 Slush 是基于 Gulp 作为基础工具的，所以你只需要按照 Gulp 的使用方法在 <code class=\"language-text\">slushfile.js</code> 编写任务流就可以啦。</p>\n<p>咦，好像有点不太对，既然是用 Gulp，那么 <code class=\"language-text\">gulpfile.js</code> 文件呢？</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gy1fd3y3nwzfgj304o03smxd.jpg\"></p>\n<p>这里确实是不需要 <code class=\"language-text\">gulpfile.js</code> 文件啦，因为 Gulp 任务都在 <code class=\"language-text\">slushfile.js</code> 文件中写啦，Slush 会帮你自动驱动 Gulp 的啦。</p>\n<p>好了，那么 <code class=\"language-text\">slushfile.js</code> 文件中的到底该怎么写呢？放着我来，小哥亲自给你示范一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  install <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-install'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  conflict <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-conflict'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  template <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  inquirer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inquirer'</span><span class=\"token punctuation\">)</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  inquirer\n    <span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">'Give your app a name'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> gulp<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 从运行参数中获取值作为 name 的默认值。</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'confirm'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'moveon'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">'Continue?'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">answers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>answers<span class=\"token punctuation\">.</span>moveon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      gulp\n        <span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/templates/**'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用脚本所在的目录作为相对路径。</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span>answers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Lodash 模板支持，可以方便的在模板中进行插值。</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">conflict</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当文件冲突时，询问是否覆盖。</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出到执行命令的当前文件夹中。</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 `bower install` 或 `npm install` 执行安装操作。</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 告知完成。</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>PS: 去哪里发现诸如 <code class=\"language-text\">[inquirer](https://github.com/SBoudrias/Inquirer.js)</code> 这么好用的 package 呢？你可以关注下 <a href=\"https://github.com/sqrthree/awesome-npm-packages\">github.com/sqrthree/awesome-npm-packages</a> 哟。</p>\n<p>现在就已经搞定啦，接下来怎么使用呢？因为 Slush 调用的是全局环境下的脚手架，但是目前我们的脚手架并不在全局环境中，然而你还没发布这个脚手架，不能直接工作 <code class=\"language-text\">npm install -g</code> 进行全局安装，所以显然是不！能！用！啦！哈！哈！哈！</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79ly1fd3ynyznx6g3050050wgk.gif\"></p>\n<p>别着急砸电脑嘛，我们还有一个办法捏。那就是通过 <code class=\"language-text\">npm link</code> 命令将当前脚手架挂载到全局环境中啦。你只需要在当前文件夹中执行 <code class=\"language-text\">npm link</code>，搞定，收工（前提是 <code class=\"language-text\">package.json</code> 已经写好）。然后就可以随便找个文件夹安装我们上面说的方法使用脚手架啦。</p>\n<h2>生成 Slush 脚手架的脚手架</h2>\n<p>尽管自定义一个脚手架已经非常方便了，但是细心的你会发现几乎每个脚手架之间 <code class=\"language-text\">slushfile.js</code> 也都大同小异，只是 <code class=\"language-text\">templates</code> 文件夹中的模板文件不一样，所以呢，你懂得 😉。</p>\n<p><a href=\"https://github.com/chrisenytc/slush-generator\">slush-generator</a> 就是这么一个让我们来生成 Slush 脚手架的脚手架。有了它，创建自定义脚手架的时候异常方便。</p>\n<h4>第一步：安装 slush-generator</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">npm install <span class=\"token operator\">-</span>g slush<span class=\"token operator\">-</span>generator</code></pre></div>\n<h4>第二步：创建并进入自定义脚手架的文件夹</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir my-slush-generator\ncd my-slush-generator</code></pre></div>\n<h4>第三步：运行任务：</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">slush generator</code></pre></div>\n<p>之后会让你回答一些问题，在回答过之后，你的自定义脚手架目录就已经生成好啦。接下来只需要在 <code class=\"language-text\">templates</code> 文件夹中放置你需要的文件就好了。</p>\n<h2>查看已经安装好的脚手架</h2>\n<p>直接输入 <code class=\"language-text\">slush</code> 即可看到已经安装过的脚手架：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">➜  slush\n[slush] Installed generators\n[slush] ├── generator (0.2.11)\n[slush] └── koa2 (0.1.0)</code></pre></div>\n<p>怎么样？是不是已经迫不及待的想要尝试了？</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gy1fd3z94buhfj30g40g4t9g.jpg\"></p>\n<p>喔，对了，少侠留步，差点忘了告诉你一件事情：</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79ly1fd3za793nqj30rs0rsabk.jpg\"></p>"}},"pageContext":{"title":"是时候来用 Slush 构建你自己的脚手架了","cover":null,"slug":"/it-is-time-to-build-your-own-scaffolding-with-slush/","excerpt":"Slush 是什么？ 简单的来说，Slush…","previous":{"id":"fab02b89-0592-532c-83a8-b4783556c888","frontmatter":{"title":"作为一个开源软件的作者是一种什么样的感受？","cover":null,"date":"2017-03-15"},"excerpt":"原文地址：What it feels like to be an open-source maintainer 原文作者：Nolan Lawson…","fields":{"slug":"/what-it-feels-like-to-be-an-open-source-maintainer/"}},"next":{"id":"55f62b56-8e45-5b48-83ea-a0c8b342185e","frontmatter":{"title":"一个关于 Styled Components 的五分钟介绍","cover":"https://camo.githubusercontent.com/4cf7254acbf60caa799fadead24a8e35839b84af/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f323030302f312a4449466a69345a6d4a61345f483345706247325841772e706e67","date":"2017-02-10"},"excerpt":"原文地址：A 5-minute Intro to Styled Components 原文作者：Sacha Greif 译文出自：掘金翻译计划 译者：根号三 校对者：Tina92、lovelyCiTY CSS 是一个很神奇的语言，你可以在 1…","fields":{"slug":"/a-5-minute-intro-to-styled-components/"}}}},"staticQueryHashes":["2262388672"]}