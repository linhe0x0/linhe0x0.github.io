{"componentChunkName":"component---src-templates-post-jsx","path":"/articles/jade-04/","result":{"data":{"markdownRemark":{"html":"<h2>1、神奇的 <code class=\"language-text\">mixins</code></h2>\n<p>想必有 <code class=\"language-text\">less</code> &#x26; <code class=\"language-text\">sass</code> 经验的同学对 <code class=\"language-text\">mixins</code> 一定都不陌生了，<code class=\"language-text\">mixins</code> 呢，其实就是方便对一堆代码块的重复利用。在 <code class=\"language-text\">Jade</code> 里面当然也少不了代码块的复用咯~~</p>\n<p><code class=\"language-text\">mixins</code> 的定义很简单，就只需要 <code class=\"language-text\">mixin 代码块名字</code> 即可</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mixin demo\n  p this is a demo</code></pre></div>\n<p>调用方式就更简单了，我们需要这样 <code class=\"language-text\">+代码块名字</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+demo</code></pre></div>\n<p>输出结果非常理想</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;this is a demo&lt;/p&gt;</code></pre></div>\n<p>什么？你说这都是只能用于内容固定的代码块？没关系，我们来看看内容不固定的时候应该怎么办</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mixin info(name, skills)\n  p my name is #{name}\n  ul.skills-box\n    each skill in skills\n      li #{skill}\n\n+info(&#39;sqrtthree&#39;,[&#39;html&#39;,&#39;css&#39;,&#39;javascript&#39;,&#39;nodejs&#39;])</code></pre></div>\n<p>编译结果如下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;my name is sqrtthree&lt;/p&gt;\n&lt;ul class=&quot;skills-box&quot;&gt;\n  &lt;li&gt;html&lt;/li&gt;\n  &lt;li&gt;css&lt;/li&gt;\n  &lt;li&gt;javascript&lt;/li&gt;\n  &lt;li&gt;nodejs&lt;/li&gt;\n&lt;/ul&gt;</code></pre></div>\n<p>什么？你还想要嵌套的 <code class=\"language-text\">mixins</code>，╮(╯▽╰)╭ 怎么这么多事。。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mixin info(name, skills)\n  p my name is #{name}\n  ul.skills-box\n    each skill in skills\n      li #{skill}\n\nmixin developersInfo(developer)\n  h2 #{developer.name}\n  +info(developer.name, developer.skills)\n\n+developersInfo({&quot;name&quot;: &quot;sqrtthree&quot;, &quot;skills&quot;: [&#39;html&#39;,&#39;css&#39;,&#39;javascript&#39;,&#39;nodejs&#39;]})</code></pre></div>\n<p>编译结果是这个样子的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;h2&gt;sqrtthree&lt;/h2&gt;\n&lt;p&gt;my name is sqrtthree&lt;/p&gt;\n&lt;ul class=&quot;skills-box&quot;&gt;\n  &lt;li&gt;html&lt;/li&gt;\n  &lt;li&gt;css&lt;/li&gt;\n  &lt;li&gt;javascript&lt;/li&gt;\n  &lt;li&gt;nodejs&lt;/li&gt;\n&lt;/ul&gt;</code></pre></div>\n<p>那如果我们遇到不定参的问题呢</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mixin info(className, ...skills)\n  ul(class=&#39;#{className}&#39;)\n    each skill in skills\n      li #{skill}\n\n+info(&#39;list&#39;,&#39;html&#39;,&#39;css&#39;,&#39;javascript&#39;,&#39;nodejs&#39;)</code></pre></div>\n<p>我们来看编译结果</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ul class=&quot;list&quot;&gt;\n  &lt;li&gt;html&lt;/li&gt;\n  &lt;li&gt;css&lt;/li&gt;\n  &lt;li&gt;javascript&lt;/li&gt;\n  &lt;li&gt;nodejs&lt;/li&gt;\n&lt;/ul&gt;</code></pre></div>\n<p>变量都能传递了，那属性能传递么？</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mixin attr(text)\n  p(class=attributes.class) #{text}\n\n+attr(&#39;text&#39;)(class=&quot;tips&quot;)</code></pre></div>\n<p>结果如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p class=&quot;tips&quot;&gt;text&lt;/p&gt;</code></pre></div>\n<p>属性传递的时候还有一个语法糖呢。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mixin attr(text)\n  p&amp;attributes(attributes) #{text}\n\n+attr(&#39;demo&#39;)(class=&quot;tips&quot;, id=&quot;j-tips&quot;, data-id=&quot;18&quot;)</code></pre></div>\n<p>我们来看编译结果是什么样的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p id=&quot;j-tips&quot; data-id=&quot;18&quot; class=&quot;tips&quot;&gt;text&lt;/p&gt;</code></pre></div>\n<p><code class=\"language-text\">mixins</code> 还有一个高级用法，那就是内联代码块。先上例子</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mixin code(text)\n p #{text}\n if block\n  block\n else\n  p no block.\n\n+code(&#39;this is a demo&#39;)\n  p this is a block.</code></pre></div>\n<p>编译结果如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;this is a demo&lt;/p&gt;\n&lt;p&gt;this is a block.&lt;/p&gt;</code></pre></div>\n<p>从上面的代码中，我们可以看出，我们在调用<code class=\"language-text\">+code</code>的时候给他设置一个代码块 <code class=\"language-text\">p this is a block</code>，那么在 <code class=\"language-text\">mixins</code> 里面，程序会自动把这个代码块的内容传递给 <code class=\"language-text\">block</code> 变量。然后我们可以通过判断进行相应的操作。</p>\n<h2>2、模板的继承</h2>\n<p>我们在做整站开发时，通常每一个页面的头部和底部都是一样的，之前我们的做法可能是写完一个之后然后不断的复制粘贴，但是现在我们有了 <code class=\"language-text\">Jade</code>之后，来看看我们可以怎么做？</p>\n<p>在 <code class=\"language-text\">Jade</code> 里面，我们通过 <code class=\"language-text\">block</code> 和 <code class=\"language-text\">extends</code> 这两个关键字实现模板之间的继承，一个代码块可以看成是 <code class=\"language-text\">Jade</code> 中的一个 <code class=\"language-text\">block</code>，我们将在子模板中实现</p>\n<p>我们先看一个小例子，定义一个简单的代码块</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">block demo\n  p this is a demo.</code></pre></div>\n<p>默认情况下，代码块的内容是会被输出的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;this is a demo.&lt;/p&gt;</code></pre></div>\n<p>在同一个文件中，我们可以直接通过这种方式进行调用</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">block demo\n  p this is a demo.\nblock demo\nblock demo\nblock demo</code></pre></div>\n<p>结果是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;this is a demo.&lt;/p&gt;\n&lt;p&gt;this is a demo.&lt;/p&gt;\n&lt;p&gt;this is a demo.&lt;/p&gt;\n&lt;p&gt;this is a demo.&lt;/p&gt;</code></pre></div>\n<p>那么如果是不同文件之间，如何进行调用呢？</p>\n<p>比如我们有一个 <code class=\"language-text\">layout.jade</code> 文件，内容是这样的。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">doctype html\nhtml\n  head\n    title this is a demo.\n  body\n    h1 demo.\n\n    block cont</code></pre></div>\n<p>然后呢，我们有一个 <code class=\"language-text\">demo.jade</code>文件是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">extends layout\t// 这里的 layout 指的是需要继承的模板文件\n\nblock cont\n  h2 Look, this is a demo.\n  p this is a paragraph.</code></pre></div>\n<p>然后我们通过命令行工具编译 <code class=\"language-text\">demo.jade</code> 文件，结果是神奇的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;this is a demo.&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;demo.&lt;/h1&gt;\n    &lt;h2&gt;Look, this is a demo.&lt;/h2&gt;\n    &lt;p&gt;this is a paragraph.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>怎么样？是不是觉得很方便呢？</p>\n<p>模板的继承解决了多个文件之间代码复用的问题，其实上面我们提到的页头和页脚我们用模板包含的方式可能更合适一些，下面我们来看一看模板的包含.</p>\n<p><code class=\"language-text\">includes</code> 允许你静态包含一段 <code class=\"language-text\">Jade</code>, 或者别的存放在单个文件中的东西比如 <code class=\"language-text\">css</code> <code class=\"language-text\">html</code>。</p>\n<p>比如我们有一个 <code class=\"language-text\">footer.jade</code> 文件，他里面有着这样的内容</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">div#footer\n  p copyright.</code></pre></div>\n<p>然后我们在我们的 <code class=\"language-text\">demo.jade</code> 文件中这样使用</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">doctype html\nhtml\n  head\n    title this is a demo.\n  body\n    h1 Hello, World.\n\n    include footer</code></pre></div>\n<p>编译结果是这个样子的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;this is a demo.&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, World.&lt;/h1&gt;\n    &lt;div id=&quot;footer&quot;&gt;\n      &lt;p&gt;copyright.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>当然，通过 <code class=\"language-text\">includes</code> 引入 <code class=\"language-text\">css</code> 代码也是一样的。大家可以尝试一下，我这里就不举例子了。</p>","frontmatter":{"title":"前端开发模板引擎 -- Jade之神奇的 mixins 和模板继承","date":"2015-08-20","category":"技术","tags":["jade"],"cover":null}}},"pageContext":{"title":"前端开发模板引擎 -- Jade之神奇的 mixins 和模板继承","cover":null,"slug":"/jade-04/","excerpt":"…","previous":{"id":"f032b313-698f-5bff-9216-6ab62a8c196e","frontmatter":{"title":"前端开发模板引擎 -- Jade之数据的动态传递和流程控制","cover":null},"excerpt":"前面介绍了一些  的简单用法，这篇文章为大家讲一下  中如何进行数据的动态传递和流程控制，干货来咯~…","fields":{"slug":"/jade-03/"}},"next":{"id":"9396032e-22f7-5282-9e29-de5216ceb497","frontmatter":{"title":"Hello World","cover":null},"excerpt":"About Me I'm a Front-End developer, now living in ZhengZhou, China. I'm ❤ programming & UI design. Skills HTML5 & CSS3 JavaScript Node.js Go…","fields":{"slug":"/hello-world/"}}}},"staticQueryHashes":["1306129578"]}